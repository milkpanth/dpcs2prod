{
  "manifest": {
    "name": "node-jose",
    "version": "2.2.0",
    "description": "A JavaScript implementation of the JSON Object Signing and Encryption (JOSE) for current web browsers and node.js-based servers",
    "keywords": [
      "crypto",
      "jose",
      "jwa",
      "jwe",
      "jwk",
      "jws"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/cisco/node-jose.git"
    },
    "license": "Apache-2.0",
    "author": {
      "name": "Cisco Systems, Inc.",
      "email": "https://www.cisco.com"
    },
    "contributors": [
      {
        "name": "Stephen Augustus",
        "email": "foo@auggie.dev"
      },
      {
        "name": "Matthew A. Miller",
        "email": "linuxwolf@outer-planes.net"
      },
      {
        "name": "Ian W. Remmel",
        "email": "design@ianwremmel.com"
      },
      {
        "name": "Joe Hildebrand",
        "email": "joe-github@cursive.net"
      },
      {
        "name": "Filip Skokan",
        "email": "panva.ip@gmail.com"
      }
    ],
    "main": "lib/index.js",
    "scripts": {
      "test": "mocha './test/**/*-test.js'"
    },
    "browser": {
      "crypto": false
    },
    "react-native": {
      "crypto": false
    },
    "dependencies": {
      "base64url": "^3.0.1",
      "buffer": "^6.0.3",
      "es6-promise": "^4.2.8",
      "lodash": "^4.17.21",
      "long": "^5.2.0",
      "node-forge": "^1.2.1",
      "pako": "^2.0.4",
      "process": "^0.11.10",
      "uuid": "^9.0.0"
    },
    "devDependencies": {
      "bowser": "^2.11.0",
      "chai": "^4.3.7",
      "is-safari": "^1.0.0",
      "jose-cookbook": "git+https://github.com/ietf-jose/cookbook.git",
      "mocha": "^10.1.0"
    },
    "bugs": {
      "url": "https://github.com/cisco/node-jose/issues"
    },
    "homepage": "https://github.com/cisco/node-jose#readme",
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-node-jose-2.2.0-b64f3225ad6bec328509a420800de597ba2bf3ed-integrity/node_modules/node-jose/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-jose #\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/cisco/node-jose.svg)](https://greenkeeper.io/)\n[![Build Status](https://travis-ci.org/cisco/node-jose.svg?branch=master)](https://travis-ci.org/cisco/node-jose)\n\nA JavaScript implementation of the JSON Object Signing and Encryption (JOSE) for current web browsers and node.js-based servers.  This library implements (wherever possible) all algorithms, formats, and options in [JWS](https://tools.ietf.org/html/rfc7515 \"Jones, M., J. Bradley and N. Sakimura, 'JSON Web Signature (JWS)' RFC 7515, May 2015\"), [JWE](https://tools.ietf.org/html/rfc7516 \"Jones, M. and J. Hildebrand 'JSON Web Encryption (JWE)', RFC 7516, May 2015\"), [JWK](https://tools.ietf.org/html/rfc7517 \"Jones, M., 'JSON Web Key (JWK)', RFC 7517, May 2015\"), and [JWA](https://tools.ietf.org/html/rfc7518 \"Jones, M., 'JSON Web Algorithms (JWA)', RFC 7518, May 2015\") and uses native cryptographic support ([WebCrypto API](http://www.w3.org/TR/WebCryptoAPI/) or node.js' \"[crypto](https://nodejs.org/api/crypto.html)\" module) where feasible.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installing](#installing)\n- [Basics](#basics)\n- [Keys and Key Stores](#keys-and-key-stores)\n  - [Obtaining a KeyStore](#obtaining-a-keystore)\n  - [Exporting a KeyStore](#exporting-a-keystore)\n  - [Retrieving Keys](#retrieving-keys)\n  - [Searching for Keys](#searching-for-keys)\n  - [Managing Keys](#managing-keys)\n  - [Importing and Exporting a Single Key](#importing-and-exporting-a-single-key)\n  - [Obtaining a Key's Thumbprint](#obtaining-a-keys-thumbprint)\n- [Signatures](#signatures)\n  - [Keys Used for Signing and Verifying](#keys-used-for-signing-and-verifying)\n  - [Signing Content](#signing-content)\n  - [Verifying a JWS](#verifying-a-jws)\n    - [Allowing (or Disallowing) Signature Algorithms](#allowing-or-disallowing-signature-algorithms)\n    - [Handling `crit` Header Members](#handling-crit-header-members)\n- [Encryption](#encryption)\n  - [Keys Used for Encrypting and Decrypting](#keys-used-for-encrypting-and-decrypting)\n  - [Encrypting Content](#encrypting-content)\n  - [Decrypting a JWE](#decrypting-a-jwe)\n    - [Allowing (or Disallowing) Encryption Algorithms](#allowing-or-disallowing-encryption-algorithms)\n    - [Handling `crit` Header Members](#handling-crit-header-members-1)\n- [Useful Utilities](#useful-utilities)\n  - [Converting to Buffer](#converting-to-buffer)\n  - [URI-Safe Base64](#uri-safe-base64)\n  - [Random Bytes](#random-bytes)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installing ##\n\nTo install the latest from [NPM](https://npmjs.com/):\n\n```shell\n  npm install node-jose\n```\n\nOr to install a specific release:\n\n```shell\n  npm install node-jose@0.3.0\n```\n\nAlternatively, the latest unpublished code can be installed directly from the repository:\n\n```shell\n  npm install git+https://github.com/cisco/node-jose.git\n```\n\n## Basics ##\n\nRequire the library as normal:\n\n```javascript\nvar jose = require('node-jose');\n```\n\nThis library uses [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) for nearly every operation.\n\nThis library supports [Browserify](http://browserify.org/) and [Webpack](https://webpack.github.io/).  To use in a web browser, `require('node-jose')` and bundle with the rest of your app.\n\nThe content to be signed/encrypted -- or returned from being verified/decrypted -- are [Buffer](https://nodejs.org/api/buffer.html) objects.\n\n## Keys and Key Stores ##\n\nThe `jose.JWK` namespace deals with JWK and JWK-sets.\n\n* `jose.JWK.Key` is a logical representation of a JWK, and is the \"raw\" entry point for various cryptographic operations (e.g., sign, verify, encrypt, decrypt).\n* `jose.JWK.KeyStore` represents a collection of Keys.\n\nCreating a JWE or JWS ultimately require one or more explicit Key objects.\n\nProcessing a JWE or JWS relies on a KeyStore.\n\n### Obtaining a KeyStore ###\nTo create an empty keystore:\n\n```javascript\nkeystore = jose.JWK.createKeyStore();\n```\n\nTo import a JWK-set as a keystore:\n\n```javascript\n// {input} is a String or JSON object representing the JWK-set\njose.JWK.asKeyStore(input).\n     then(function(result) {\n       // {result} is a jose.JWK.KeyStore\n       keystore = result;\n     });\n```\n\n### Exporting a KeyStore ###\n\nTo export the public keys of a keystore as a JWK-set:\n\n```javascript\noutput = keystore.toJSON();\n```\n\nTo export **all** the keys of a keystore:\n\n```javascript\noutput = keystore.toJSON(true);\n```\n\n### Retrieving Keys ###\n\nTo retrieve a key from a keystore:\n\n```javascript\n// by 'kid'\nkey = keystore.get(kid);\n```\n\nThis retrieves the first key that matches the given {kid}.  If multiple keys have the same {kid}, you can further narrow what to retrieve:\n\n```javascript\n// ... and by 'kty'\nkey = keystore.get(kid, { kty: 'RSA' });\n\n// ... and by 'use'\nkey = keystore.get(kid, { use: 'enc' });\n\n// ... and by 'alg'\nkey = keystore.get(kid, { use: 'RSA-OAEP' });\n\n// ... and by 'kty' and 'use'\nkey = keystore.get(kid, { kty: 'RSA', use: 'enc' });\n\n// same as above, but with a single {props} argument\nkey = keystore.get({ kid: kid, kty: 'RSA', use: 'enc' });\n```\n\n### Searching for Keys ###\n\nTo retrieve all the keys from a keystore:\n\n```javascript\neverything = keystore.all();\n```\n\n`all()` can be filtered much like `get()`:\n\n```javascript\n// filter by 'kid'\neverything = keystore.all({ kid: kid });\n\n// filter by 'kty'\neverything = keystore.all({ kty: 'RSA' });\n\n// filter by 'use'\neverything = keystore.all({ use: 'enc' });\n\n// filter by 'alg'\neverything = keystore.all({ alg: 'RSA-OAEP' });\n\n// filter by 'kid' + 'kty' + 'alg'\neverything = keystore.all({ kid: kid, kty: 'RSA', alg: 'RSA-OAEP' });\n```\n\n### Managing Keys ###\n\nTo import an existing Key (as a JSON object or Key instance):\n\n```javascript\n// input is either a:\n// *  jose.JWK.Key to copy from; or\n// *  JSON object representing a JWK; or\nkeystore.add(input).\n        then(function(result) {\n          // {result} is a jose.JWK.Key\n          key = result;\n        });\n```\n\nTo import and existing Key from a PEM or DER:\n\n```javascript\n// input is either a:\n// *  String serialization of a JSON JWK/(base64-encoded) PEM/(binary-encoded) DER\n// *  Buffer of a JSON JWK/(base64-encoded) PEM/(binary-encoded) DER\n// form is either a:\n// * \"json\" for a JSON stringified JWK\n// * \"private\" for a DER encoded 'raw' private key\n// * \"pkcs8\" for a DER encoded (unencrypted!) PKCS8 private key\n// * \"public\" for a DER encoded SPKI public key (alternate to 'spki')\n// * \"spki\" for a DER encoded SPKI public key\n// * \"pkix\" for a DER encoded PKIX X.509 certificate\n// * \"x509\" for a DER encoded PKIX X.509 certificate\n// * \"pem\" for a PEM encoded of PKCS8 / SPKI / PKIX\nkeystore.add(input, form).\n        then(function(result) {\n          // {result} is a jose.JWK.Key\n        });\n```\n\nTo generate a new Key:\n\n```javascript\n// first argument is the key type (kty)\n// second is the key size (in bits) or named curve ('crv') for \"EC\"\nkeystore.generate(\"oct\", 256).\n        then(function(result) {\n          // {result} is a jose.JWK.Key\n          key = result;\n        });\n\n// ... with properties\nvar props = {\n  kid: 'gBdaS-G8RLax2qgObTD94w',\n  alg: 'A256GCM',\n  use: 'enc'\n};\nkeystore.generate(\"oct\", 256, props).\n        then(function(result) {\n          // {result} is a jose.JWK.Key\n          key = result;\n        });\n```\n\nTo remove a Key from its Keystore:\n```javascript\nkeystore.remove(key);\n// NOTE: key.keystore does not change!!\n```\n\n### Importing and Exporting a Single Key ###\n\nTo create a single \"stand alone\" key:\n\n```javascript\njose.JWK.createKey(\"oct\", 256, { alg: \"A256GCM\" }).\n         then(function(result) {\n           // {result} is a jose.JWK.Key\n           // {result.keystore} is a unique jose.JWK.KeyStore\n         });\n```\n\n\nTo import a single Key:\n\n```javascript\n// where input is either a:\n// *  jose.JWK.Key instance\n// *  JSON Object representation of a JWK\njose.JWK.asKey(input).\n        then(function(result) {\n          // {result} is a jose.JWK.Key\n          // {result.keystore} is a unique jose.JWK.KeyStore\n        });\n\n// where input is either a:\n// *  String serialization of a JSON JWK/(base64-encoded) PEM/(binary-encoded) DER\n// *  Buffer of a JSON JWK/(base64-encoded) PEM/(binary-encoded) DER\n// form is either a:\n// * \"json\" for a JSON stringified JWK\n// * \"pkcs8\" for a DER encoded (unencrypted!) PKCS8 private key\n// * \"spki\" for a DER encoded SPKI public key\n// * \"pkix\" for a DER encoded PKIX X.509 certificate\n// * \"x509\" for a DER encoded PKIX X.509 certificate\n// * \"pem\" for a PEM encoded of PKCS8 / SPKI / PKIX\njose.JWK.asKey(input, form).\n        then(function(result) {\n          // {result} is a jose.JWK.Key\n          // {result.keystore} is a unique jose.JWK.KeyStore\n        });\n```\n\nTo export the public portion of a Key as a JWK:\n\n```javascript\nvar output = key.toJSON();\n```\n\nTo export the public **and** private portions of a Key:\n\n```javascript\nvar output = key.toJSON(true);\n```\n\n### Obtaining a Key's Thumbprint ###\n\nTo get or calculate a [RFC 7638](https://tools.ietf.org/html/rfc7638) thumbprint for a key:\n\n```javascript\n// where hash is a supported algorithm, currently one of:\n// * SHA-1\n// * SHA-256\n// * SHA-384\n// * SHA-512\nkey.thumbprint(hash).\n    then(function(print) {\n      // {print} is a Buffer containing the thumbprint binary value\n    });\n```\n\nWhen importing or generating a key that does not have a \"kid\" defined, a\n\"SHA-256\" thumbprint is calculated and used as the \"kid\".\n\n## Signatures ##\n\n### Keys Used for Signing and Verifying ###\n\nWhen signing content, the key is expected to meet one of the following:\n\n1. A secret key (e.g, `\"kty\":\"oct\"`)\n2. The **private** key from a PKI (`\"kty\":\"EC\"` or `\"kty\":\"RSA\"`) key pair\n\nWhen verifying content, the key is expected to meet one of the following:\n\n1. A secret key (e.g, `\"kty\":\"oct\"`)\n2. The **public** key from a PKI (`\"kty\":\"EC\"` or `\"kty\":\"RSA\"`) key pair\n\n\n### Signing Content ###\n\nAt its simplest, to create a JWS:\n\n```javascript\n// {input} is a Buffer\njose.JWS.createSign(key).\n        update(input).\n        final().\n        then(function(result) {\n          // {result} is a JSON object -- JWS using the JSON General Serialization\n        });\n```\n\nThe JWS is signed using the preferred algorithm appropriate for the given Key.  The preferred algorithm is the first item returned by `key.algorithms(\"sign\")`.\n\nTo create a JWS using another serialization format:\n\n```javascript\njose.JWS.createSign({ format: 'flattened' }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // {result} is a JSON object -- JWS using the JSON Flattened Serialization\n        });\n\njose.JWS.createSign({ format: 'compact' }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // {result} is a String -- JWS using the Compact Serialization\n        });\n```\n\nTo create a JWS using a specific algorithm:\n```javascript\njose.JWS.createSign({ fields: { alg: 'PS256' } }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\nTo create a JWS for a specified content type:\n\n```javascript\njose.JWS.createSign({ fields: { cty: 'jwk+json' } }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\nTo create a JWS from String content:\n\n```javascript\njose.JWS.createSign(key).\n        update(input, \"utf8\").\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\nTo create a JWS with multiple signatures:\n\n```javascript\n// {keys} is an Array of jose.JWK.Key instances\njose.JWS.createSign(keys).\n        update(input).\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\n### Verifying a JWS ###\n\nTo verify a JWS, and retrieve the payload:\n\n```javascript\njose.JWS.createVerify(keystore).\n        verify(input).\n        then(function(result) {\n          // {result} is a Object with:\n          // *  header: the combined 'protected' and 'unprotected' header members\n          // *  payload: Buffer of the signed content\n          // *  signature: Buffer of the verified signature\n          // *  key: The key used to verify the signature\n        });\n```\n\nTo verify using an implied Key:\n\n```javascript\n// {key} can be:\n// *  jose.JWK.Key\n// *  JSON object representing a JWK\njose.JWS.createVerify(key).\n        verify(input).\n        then(function(result) {\n          // ...\n        });\n```\n\nTo verify using a key embedded in the JWS:\n\n```javascript\njose.JWS.createVerify().\n        verify(input, { allowEmbeddedKey: true }).\n        then(function(result) {\n          // ...\n        });\n```\n\nAlternatively, a cached `createVerify()` can be configured to allow an embedded key:\n\n```javascript\nvar verifier = jose.JWS.createVerify({ allowEmbeddedKey: true });\n\nverifier.verify(input).\n         then(function(result) {\n           // ...\n         });\n```\n\nThe key can be embedded using either 'jwk' or 'x5c', and can be located in either the JWS Unprotected Header or JWS Protected Header.\n\n**NOTE:** `verify()` will use the embedded key (if found and permitted) instead of any other key.\n\n#### Allowing (or Disallowing) Signature Algorithms ###\n\nTo restrict what signature algorithms are allowed when verifying, add the `algorithms` member to the `options` Object.  The `algorithms` member is either a string or an array of strings, where the string value(s) can be one of the following:\n\n* `\"*\"`: accept all supported algorithms\n* **`<alg name>`** (e.g., `\"PS256\"`): accept the specific algorithm (can have a single '*' to match a range of algorithms)\n* **`!<alg name>`** (e.g., `\"!RS256\"`): *do not* accept the specific algorithm (can have a single '*' to match a range of algorithms)\n\nThe negation is intended to be used with the wildcard accept string, and disallow takes precedence over allowed.\n\nTo only accept RSA-PSS sigatures:\n\n```javascript\nvar opts = {\n  algorithms: [\"PS*\"]\n};\njose.JWS.createVerify(key, opts).\n        verify(input).\n        then(function(result) {\n          // ...\n        });\n```\n\nTo accept any algorithm, but disallow HMAC-based signatures:\n\n```javascript\nvar opts = {\n  algorithms: [\"*\", \"!HS*\"]\n};\njose.JWS.createVerify(key, opts).\n        verify(input).\n        then(function(result) {\n          // ...\n        });\n```\n\n#### Handling `crit` Header Members ####\n\nTo accept 'crit' field members, add the `handlers` member to the options Object.  The `handlers` member is itself an Object, where its member names are the `crit` header member, and the value is one of:\n\n* `Function`: takes the JWE decrypt output (just prior to decrypting) and returns a Promise for the processing of the member.\n* `Object`: An object with the following `Function` members:\n  * \"prepare\" -- takes the JWE decrypt output (just prior to decrypting) and returns a Promise for the processing of the member.\n  * \"complete\" -- takes the JWE decrypt output (immediately after decrypting) and returns a Promise for the processing of the member.\n\n**NOTE** If the handler function returns a promise, the fulfilled value is ignored.  It is expected these handler functions will modify the provided value directly.\n\nTo perform additional (pre-verify) processing on a `crit` header member:\n\n```javascript\nvar opts = {\n  handlers: {\n    \"exp\": function(jws) {\n      // {jws} is the JWS verify output, pre-verification\n      jws.header.exp = new Date(jws.header.exp);\n    }\n  }\n};\njose.JWS.createVerify(key, opts).\n        verify(input).\n        then(function(result) {\n          // ...\n        });\n```\n\nTo perform additional (post-verify) processing on a `crit` header member:\n\n```javascript\nvar opts = {\n  handlers: {\n    \"exp\": {\n      complete: function(jws) {\n        // {jws} is the JWS verify output, post-verification\n        jws.header.exp = new Date(jws.header.exp);\n      }\n    }\n  }\n};\njose.JWS.createVerify(key, opts).\n        verify(input).\n        then(function(result) {\n          // ...\n        });\n```\n\n\n## Encryption ##\n\n\n### Keys Used for Encrypting and Decrypting ###\n\nWhen encrypting content, the key is expected to meet one of the following:\n\n1. A secret key (e.g, `\"kty\":\"oct\"`)\n2. The **public** key from a PKI (`\"kty\":\"EC\"` or `\"kty\":\"RSA\"`) key pair\n\nWhen decrypting content, the key is expected to meet one of the following:\n\n1. A secret key (e.g, `\"kty\":\"oct\"`)\n2. The **private** key from a PKI (`\"kty\":\"EC\"` or `\"kty\":\"RSA\"`) key pair\n\n\n### Encrypting Content ###\n\nAt its simplest, to create a JWE:\n\n```javascript\n// {input} is a Buffer\njose.JWE.createEncrypt(key).\n        update(input).\n        final().\n        then(function(result) {\n          // {result} is a JSON Object -- JWE using the JSON General Serialization\n        });\n```\n\nHow the JWE content is encrypted depends on the provided Key.\n\n* If the Key only supports content encryption algorithms, then the preferred algorithm is used to encrypt the content and the key encryption algorithm (i.e., the \"alg\" member) is set to \"dir\".  The preferred algorithm is the first item returned by `key.algorithms(\"encrypt\")`.\n* If the Key supports key management algorithms, then the JWE content is encrypted using \"A128CBC-HS256\" by default, and the Content Encryption Key is encrypted using the preferred algorithms for the given Key.  The preferred algorithm is the first item returned by `key.algorithms(\"wrap\")`.\n\n\nTo create a JWE using a different serialization format:\n\n```javascript\njose.JWE.createEncrypt({ format: 'compact' }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // {result} is a String -- JWE using the Compact Serialization\n        });\n\njose.JWE.createEncrypt({ format: 'flattened' }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // {result} is a JSON Object -- JWE using the JSON Flattened Serialization\n        });\n```\n\nTo create a JWE and compressing the content before encrypting:\n\n```javascript\njose.JWE.createEncrypt({ zip: true }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\nTo create a JWE for a specific content type:\n\n```javascript\njose.JWE.createEncrypt({ fields: { cty : 'jwk+json' } }, key).\n        update(input).\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\nTo create a JWE with multiple recipients:\n\n```javascript\n// {keys} is an Array of jose.JWK.Key instances\njose.JWE.createEncrypt(keys).\n        update(input).\n        final().\n        then(function(result) {\n          // ....\n        });\n```\n\n### Decrypting a JWE ###\n\nTo decrypt a JWE, and retrieve the plaintext:\n\n```javascript\njose.JWE.createDecrypt(keystore).\n        decrypt(input).\n        then(function(result) {\n          // {result} is a Object with:\n          // *  header: the combined 'protected' and 'unprotected' header members\n          // *  protected: an array of the member names from the \"protected\" member\n          // *  key: Key used to decrypt\n          // *  payload: Buffer of the decrypted content\n          // *  plaintext: Buffer of the decrypted content (alternate)\n        });\n```\n\nTo decrypt a JWE using an implied key:\n\n```javascript\njose.JWE.createDecrypt(key).\n        decrypt(input).\n        then(function(result) {\n          // ....\n        });\n```\n\n#### Allowing (or Disallowing) Encryption Algorithms ###\n\nTo restrict what encryption algorithms are allowed when verifying, add the `algorithms` member to the `options` Object.  The `algorithms` member is either a string or an array of strings, where the string value(s) can be one of the following:\n\n* `\"*\"`: accept all supported algorithms\n* **`<alg name>`** (e.g., `\"A128KW\"`): accept the specific algorithm (can have a single '*' to match a range of similar algorithms)\n* **`!<alg name>`** (e.g., `\"!RSA1_5\"`): *do not* accept the specific algorithm (can have a single '*' to match a range of similar algorithms)\n\nThe negation is intended to be used with the wildcard accept string, and disallow takes precedence over allowed.\n\nTo only accept \"dir\" and AES-GCM encryption:\n\n```javascript\nvar opts = {\n  algorithms: [\"dir\", \"A*GCM\"]\n};\njose.JWE.createDecrypt(key, opts).\n        decrypt(input).\n        then(function(result) {\n          // ...\n        });\n```\n\nTo accept any algorithm, but disallow RSA-based encryption:\n\n```javascript\nvar opts = {\n  algorithms: [\"*\", \"!RSA*\"]\n};\njose.JWS.createVerify(key, opts).\n        verify(input).\n        then(function(result) {\n          // ...\n        });\n```\n\n#### Handling `crit` Header Members ####\n\nTo accept 'crit' field members, add the `handlers` member to the options Object.  The `handlers` member is itself an Object, where its member names are the `crit` header member, and the value is one of:\n\n* `Function`: takes the JWE decrypt output (just prior to decrypting) and returns a Promise for the processing of the member.\n* `Object`: An object with the following `Function` members:\n  * \"prepare\" -- takes the JWE decrypt output (just prior to decrypting) and returns a Promise for the processing of the member.\n  * \"complete\" -- takes the JWE decrypt output (immediately after decrypting) and returns a Promise for the processing of the member.\n\n**NOTE** If the handler function returns a promise, the fulfilled value is ignored.  It is expected these handler functions will modify the provided value directly.\n\nTo perform additional (pre-decrypt) processing on a `crit` header member:\n\n```javascript\nvar opts = {\n  handlers: {\n    \"exp\": function(jwe) {\n      // {jwe} is the JWE decrypt output, pre-decryption\n      jwe.header.exp = new Date(jwe.header.exp);\n    }\n  }\n};\njose.JWE.createDecrypt(key, opts).\n        decrypt(input).\n        then(function(result) {\n          // ...\n        });\n```\n\nTo perform additional (post-decrypt) processing on a `crit` header member:\n\n```javascript\nvar opts = {\n  handlers: {\n    \"exp\": {\n      complete: function(jwe) {\n        // {jwe} is the JWE decrypt output, post-decryption\n        jwe.header.exp = new Date(jwe.header.exp);\n      }\n    }\n  }\n};\njose.JWE.createDecrypt(key, opts).\n        decrypt(input).\n        then(function(result) {\n          // ...\n        });\n```\n\n## Useful Utilities ##\n\n### Converting to Buffer ###\n\nTo convert a [Typed Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays), [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), or Array of Numbers to a Buffer:\n\n```javascript\nbuff = jose.util.asBuffer(input);\n```\n\n### URI-Safe Base64 ###\n\nThis exposes [urlsafe-base64](https://github.com/RGBboy/urlsafe-base64)'s `encode` and `decode` methods as `encode` and `decode` (respectively).\n\nTo convert from a Buffer to a base64uri-encoded String:\n\n```javascript\nvar output = jose.util.base64url.encode(input);\n```\n\nTo convert a String to a base64uri-encoded String:\n\n```javascript\n// explicit encoding\noutput = jose.util.base64url.encode(input, \"utf8\");\n\n// implied \"utf8\" encoding\noutput = jose.util.base64url.encode(input);\n```\n\nTo convert a base64uri-encoded String to a Buffer:\n\n```javascript\nvar output = jose.util.base64url.decode(input);\n```\n\n### Random Bytes ###\n\nTo generate a Buffer of octets, regardless of platform:\n\n```javascript\n// argument is size (in bytes)\nvar rnd = jose.util.randomBytes(32);\n```\n\nThis function uses:\n\n* `crypto.randomBytes()` on node.js\n* `crypto.getRandomValues()` on modern browsers\n* A PRNG based on AES and SHA-1 for older platforms\n",
    "licenseText": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-jose/-/node-jose-2.2.0.tgz#b64f3225ad6bec328509a420800de597ba2bf3ed",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-jose/-/node-jose-2.2.0.tgz",
    "hash": "b64f3225ad6bec328509a420800de597ba2bf3ed",
    "integrity": "sha512-XPCvJRr94SjLrSIm4pbYHKLEaOsDvJCpyFw/6V/KK/IXmyZ6SFBzAUDO9HQf4DB/nTEFcRGH87mNciOP23kFjw==",
    "registry": "npm",
    "packageName": "node-jose",
    "cacheIntegrity": "sha512-XPCvJRr94SjLrSIm4pbYHKLEaOsDvJCpyFw/6V/KK/IXmyZ6SFBzAUDO9HQf4DB/nTEFcRGH87mNciOP23kFjw== sha1-tk8yJa1r7DKFCaQggA3ll7or8+0="
  },
  "registry": "npm",
  "hash": "b64f3225ad6bec328509a420800de597ba2bf3ed"
}