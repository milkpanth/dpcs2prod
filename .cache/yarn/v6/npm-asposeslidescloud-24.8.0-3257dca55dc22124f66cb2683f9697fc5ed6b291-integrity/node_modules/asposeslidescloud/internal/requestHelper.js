"use strict";
/*
* MIT License

* Copyright (c) 2018 Aspose Pty Ltd

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:

* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addHeaderParameter = exports.addPathParameterToUrl = exports.addQueryParameterToUrl = exports.invokeApiMethod = exports.checkMultipartContent = void 0;
const axios_1 = require("axios");
const https = require('https');
axios_1.default.interceptors.request.use(request => {
    if (request.debug) {
        console.log('>> Request');
        console.log(request.method + ' ' + request.url);
        console.log('Headers\n' + request.headers);
        console.log('Data: ' + JSON.stringify(request.data));
    }
    return request;
});
axios_1.default.interceptors.response.use(response => {
    if (response.config.debug) {
        console.log('<< Response');
        console.log('Status: ' + response.status);
        console.log('Headers\n' + response.headers);
        if (Buffer.isBuffer(response.data)) {
            console.log('Data: binary (' + Buffer.byteLength((response.data)) + ' bytes)');
        }
        else {
            console.log('Data: ' + JSON.stringify(response.data));
        }
    }
    return response;
});
const objectSerializer_1 = require("./objectSerializer");
function checkMultipartContent(options, files) {
    if (files && files.length) {
        const data = {
            pipeline: null,
            attachments: []
        };
        if (options.data) {
            data.pipeline = JSON.stringify(options.data);
        }
        else {
            delete data.pipeline;
        }
        for (var i = 0; i < files.length; i++) {
            data.attachments.push(files[i]);
        }
        options.data = data;
        if (!options.headers) {
            options.headers = {};
        }
        options.headers["Content-type"] = "multipart/form-data";
    }
}
exports.checkMultipartContent = checkMultipartContent;
/**
 * Invoke api method
 * @param requestOptions request parameters
 * @param confguration api configuration
 * @param notApplyAuthToRequest if setted to true, auth is not applied to request
 */
function invokeApiMethod(requestOptions, confguration, notApplyAuthToRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield invokeApiMethodInternal(requestOptions, confguration, notApplyAuthToRequest);
        }
        catch (e) {
            if (e instanceof NeedRepeatException) {
                return yield invokeApiMethodInternal(requestOptions, confguration, notApplyAuthToRequest);
            }
            throw e;
        }
    });
}
exports.invokeApiMethod = invokeApiMethod;
/**
 * Add parameter to query
 * @param url url
 * @param queryParameters queryParameters
 * @param parameterName parameterName
 * @param parameterValue parameterValue
 */
function addQueryParameterToUrl(url, queryParameters, parameterName, parameterValue) {
    if (parameterValue !== undefined && parameterValue != null) {
        if (Array.isArray(parameterValue)) {
            parameterValue = parameterValue.join(",");
        }
        if (url.indexOf("{" + parameterName + "}") >= 0) {
            url = url.replace("{" + parameterName + "}", String(parameterValue));
        }
        else {
            queryParameters[parameterName] = String(parameterValue);
        }
    }
    else {
        url = url.replace("/{" + parameterName + "}", "");
    }
    return url;
}
exports.addQueryParameterToUrl = addQueryParameterToUrl;
/**
 * Add parameter to query
 * @param url url
 * @param queryParameters queryParameters
 * @param parameterName parameterName
 * @param parameterValue parameterValue
 */
function addPathParameterToUrl(url, parameterName, parameterValue) {
    if (!parameterValue) {
        return url.replace("/{" + parameterName + "}", "");
    }
    return url.replace("{" + parameterName + "}", parameterValue);
}
exports.addPathParameterToUrl = addPathParameterToUrl;
/**
 * Add parameter to headers
 * @param headers headers
 * @param parameterName parameterName
 * @param parameterValue parameterValue
 */
function addHeaderParameter(headers, parameterName, parameterValue) {
    if (parameterValue) {
        headers[parameterName] = String(parameterValue);
    }
}
exports.addHeaderParameter = addHeaderParameter;
/**
 * Invoke api method
 * @param requestOptions request parameters
 * @param configuration api configuration
 * @param notApplyAuthToRequest if setted to true, auth is not applied to request
 */
function invokeApiMethodInternal(requestOptions, configuration, notApplyAuthToRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        if (configuration.allowInsecureRequests) {
            requestOptions.httpsAgent = new https.Agent({
                rejectUnauthorized: false
            });
        }
        if (!requestOptions.headers) {
            requestOptions.headers = {};
        }
        requestOptions.headers["x-aspose-client"] = "nodejs sdk v24.8.0";
        if (configuration.timeout) {
            requestOptions.headers["x-aspose-timeout"] = configuration.timeout;
        }
        for (var key in configuration.customHeaders) {
            requestOptions.headers[key] = configuration.customHeaders[key];
        }
        if (!notApplyAuthToRequest) {
            yield addAuthHeader(requestOptions, configuration);
        }
        else {
            requestOptions.headers["Content-type"] = "application/x-www-form-urlencoded";
        }
        requestOptions.debug = configuration.debugMode;
        return new Promise((resolve, reject) => {
            const r = (0, axios_1.default)(requestOptions)
                .then((response) => __awaiter(this, void 0, void 0, function* () {
                //compatibility with request library responses
                response.body = response.data;
                response.statusCode = response.status;
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    resolve(response);
                }
                else {
                    yield rejectResponse(reject, response, configuration, notApplyAuthToRequest);
                }
            }))
                .catch((error) => __awaiter(this, void 0, void 0, function* () {
                if (error.response) {
                    error.response.body = error.response.data;
                    error.response.statusCode = error.response.status;
                    yield rejectResponse(reject, error.response, configuration, notApplyAuthToRequest);
                }
                else if (error.request && error.request.res) {
                    yield rejectResponse(reject, error.request.res, configuration, notApplyAuthToRequest);
                }
                reject(error);
            }));
            r.writeDebugToConsole = configuration.debugMode;
        });
    });
}
function addAuthHeader(requestOptions, configuration) {
    return __awaiter(this, void 0, void 0, function* () {
        if (configuration.appSid || configuration.appKey) {
            if (isRequestTokenPending) {
                yield requestingToken;
            }
            if (!configuration.accessToken) {
                isRequestTokenPending = true;
                requestingToken = requestToken(configuration).catch((err) => { isRequestTokenPending = false; throw (err); });
                yield requestingToken;
            }
            isRequestTokenPending = false;
            if (requestOptions && requestOptions.headers) {
                requestOptions.headers.Authorization = "Bearer " + configuration.accessToken;
            }
        }
        return Promise.resolve();
    });
}
function requestToken(configuration) {
    return __awaiter(this, void 0, void 0, function* () {
        const requestOptions = {
            method: "POST",
            url: configuration.authBaseUrl + "/connect/token",
            data: {
                grant_type: "client_credentials",
                client_id: configuration.appSid,
                client_secret: configuration.appKey,
            }
        };
        const response = yield invokeApiMethod(requestOptions, configuration, true);
        configuration.accessToken = response.body.access_token;
        return Promise.resolve();
    });
}
function rejectResponse(reject, response, configuration, notApplyAuthToRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!notApplyAuthToRequest && response.statusCode === 401) {
            yield requestToken(configuration);
            reject(new NeedRepeatException());
        }
        else {
            try {
                if (response.statusCode == 400 && response.body && response.body.error && typeof response.body.error == "string") {
                    reject({ message: response.body.error, code: 401 });
                }
                else if (response.body && (response.body.length === undefined || response.body.length)) {
                    let bodyContent = response.body;
                    let bodyString = bodyContent;
                    if (bodyContent instanceof Buffer) {
                        bodyString = bodyContent.toString("utf8");
                        bodyContent = JSON.parse(bodyString);
                    }
                    let result = objectSerializer_1.ObjectSerializer.deserialize(bodyContent, "SlidesApiErrorResponse");
                    try {
                        result = JSON.parse(result);
                    }
                    catch (_a) {
                        //Error means the object is already deserialized
                        reject({ message: result.error ? result.error.message : bodyString, code: response.statusCode });
                    }
                }
                else {
                    reject({ message: response.statusMessage, code: response.statusCode });
                }
            }
            catch (error) {
                reject({ message: "Error while parse server error: " + error });
            }
        }
    });
}
var requestingToken = null;
var isRequestTokenPending = false;
/**
 * Exception, indicating necessity of request repeat
 */
class NeedRepeatException extends Error {
}
