/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http = require("http");
import { Readable } from 'stream';
import { Configuration } from "./internal/configuration";
import * as model from "./model";
export * from "./model";
export declare class SlidesApi {
    private _configuration;
    get configuration(): Configuration;
    /**
     * @param appSid Client Id.
     * @param appKey Client Secret.
     * @param baseUrl Base api Url.
     * @param authBaseUrl Base authentication Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     * @param timeout Timeout (in seconds) for an operation. Applies to the Slides operation, not to the HTTP request.
     */
    constructor(appSid: string, appKey: string, baseUrl?: string, authBaseUrl?: string, debugMode?: boolean, timeout?: number);
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param alignmentType Alignment type that will be applied to the shapes.
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges.
     * @param shapes Shapes indexes.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    alignShapes(name: string, slideIndex: number, alignmentType: model.ShapesAlignmentType, alignToSlide?: boolean, shapes?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param alignmentType Alignment type that will be applied to the shapes.
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges.
     * @param shapes Shapes indexes.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    alignSpecialSlideShapes(name: string, slideIndex: number, slideType: model.SpecialSlideType, alignmentType: model.ShapesAlignmentType, alignToSlide?: boolean, shapes?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Compresses embedded fonts by removing unused characters.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    compressEmbeddedFonts(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Compresses embedded fonts by removing unused characters.
     * @param document Document data.
     * @param password Document password.
     */
    compressEmbeddedFontsOnline(document: Readable, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Convert presentation from request content to format specified.
     * @param document Document data.
     * @param format Export format.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default.
     * @param options Export options.
     */
    convert(document: Readable, format: model.ExportFormat, password?: string, storage?: string, fontsFolder?: string, slides?: Array<number>, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Convert presentation from request content to format specified.
     * @param document Document data.
     * @param format Export format.
     * @param outPath Path to save result.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default.
     * @param options Export options.
     */
    convertAndSave(document: Readable, format: model.ExportFormat, outPath: string, password?: string, storage?: string, fontsFolder?: string, slides?: Array<number>, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Copy file
     * @param srcPath Source file path e.g. '/folder/file.ext'
     * @param destPath Destination file path
     * @param srcStorageName Source storage name
     * @param destStorageName Destination storage name
     * @param versionId File version ID to copy
     */
    copyFile(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string, versionId?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Copy folder
     * @param srcPath Source folder path e.g. '/src'
     * @param destPath Destination folder path e.g. '/dst'
     * @param srcStorageName Source storage name
     * @param destStorageName Destination storage name
     */
    copyFolder(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Copy layoutSlide from source presentation.
     * @param name Document name.
     * @param cloneFrom Name of the document to clone layoutSlide from.
     * @param cloneFromPosition Position of cloned layout slide.
     * @param cloneFromPassword Password for the document to clone layoutSlide from.
     * @param cloneFromStorage Storage of the document to clone layoutSlide from.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    copyLayoutSlide(name: string, cloneFrom: string, cloneFromPosition: number, cloneFromPassword?: string, cloneFromStorage?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.LayoutSlide;
    }>;
    /**
     * Copy masterSlide from source presentation.
     * @param name Document name.
     * @param cloneFrom Name of the document to clone masterSlide from.
     * @param cloneFromPosition Position of cloned master slide.
     * @param cloneFromPassword Password for the document to clone masterSlide from.
     * @param cloneFromStorage Storage of the document to clone masterSlide from.
     * @param applyToAll True to apply cloned master slide to every existing slide.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    copyMasterSlide(name: string, cloneFrom: string, cloneFromPosition: number, cloneFromPassword?: string, cloneFromStorage?: string, applyToAll?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.MasterSlide;
    }>;
    /**
     * Copy a slide from the current or another presentation.
     * @param name Document name.
     * @param slideToCopy The index of the slide to be copied from the source presentation.
     * @param position The target position at which to copy the slide. Copy to the end by default.
     * @param source Name of the document to copy a slide from.
     * @param sourcePassword Password for the document to copy a slide from.
     * @param sourceStorage Template storage name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    copySlide(name: string, slideToCopy: number, position?: number, source?: string, sourcePassword?: string, sourceStorage?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Add an effect to slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createAnimationEffect(name: string, slideIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Set slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param sequence Animation sequence DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createAnimationInteractiveSequence(name: string, slideIndex: number, sequence: model.InteractiveSequence, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Add an animation effect to a slide interactive sequence.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param sequenceIndex The position of the interactive sequence.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createAnimationInteractiveSequenceEffect(name: string, slideIndex: number, sequenceIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Add a new category to a chart.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param category Category DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createChartCategory(name: string, slideIndex: number, shapeIndex: number, category: model.ChartCategory, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Add a new data point to a chart series.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param seriesIndex Series index.
     * @param dataPoint Data point DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createChartDataPoint(name: string, slideIndex: number, shapeIndex: number, seriesIndex: number, dataPoint: model.DataPoint, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Add a new series to a chart.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index (must be a chart).
     * @param series Series DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createChartSeries(name: string, slideIndex: number, shapeIndex: number, series: model.Series, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Adds the comment on the slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param dto Comment DTO.
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createComment(name: string, slideIndex: number, dto: model.SlideCommentBase, shapeIndex?: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideComments;
    }>;
    /**
     * Adds the comment on the slide.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param dto Comment DTO.
     * @param shapeIndex Shape index.
     * @param password Document password.
     */
    createCommentOnline(document: Readable, slideIndex: number, dto: model.SlideCommentBase, shapeIndex?: number, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Create the folder
     * @param path Folder path to create e.g. 'folder_1/folder_2/'
     * @param storageName Storage name
     */
    createFolder(path?: string, storageName?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.
     * @param name Document name.
     * @param image Image data.
     * @param pictureFrame PictureFrame DTO
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createImageWatermark(name: string, image?: Readable, pictureFrame?: model.PictureFrame, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.
     * @param document Document data.
     * @param image Image data.
     * @param pictureFrame PictureFrame DTO.
     * @param password Document password.
     */
    createImageWatermarkOnline(document: Readable, image?: Readable, pictureFrame?: model.PictureFrame, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Add new notes slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param dto A NotesSlide object with notes slide data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createNotesSlide(name: string, slideIndex: number, dto: model.NotesSlide, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.NotesSlide;
    }>;
    /**
     * Creates new paragraph.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param dto Paragraph DTO.
     * @param position Position of the new paragraph in the list. Default is at the end of the list.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    createParagraph(name: string, slideIndex: number, shapeIndex: number, dto: model.Paragraph, position?: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Creates new portion.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param dto Portion DTO.
     * @param position Position of the new portion in the list. Default is at the end of the list.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    createPortion(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, dto: model.Portion, position?: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Create a presentation.
     * @param name Document name.
     * @param data Source presentation binary data.
     * @param inputPassword The password for source presentation.
     * @param password The document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createPresentation(name: string, data?: Readable, inputPassword?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Create a presentation from an existing source.
     * @param name Document name.
     * @param sourcePath Source file path.
     * @param sourcePassword Source file password.
     * @param sourceStorage Source storage name.
     * @param password The document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createPresentationFromSource(name: string, sourcePath?: string, sourcePassword?: string, sourceStorage?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Create a presentation.
     * @param name Document name.
     * @param templatePath Template file path.
     * @param data Document input data.
     * @param templatePassword Template file password.
     * @param templateStorage Template storage name.
     * @param isImageDataEmbedded True if image data is embedded.
     * @param password The document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createPresentationFromTemplate(name: string, templatePath: string, data?: string, templatePassword?: string, templateStorage?: string, isImageDataEmbedded?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Create a section starting at a specified slide index.
     * @param name Document name.
     * @param sectionName Section name.
     * @param slideIndex Slide index (one-based).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createSection(name: string, sectionName: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Create new shape.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param dto Shape DTO.
     * @param shapeToClone Optional index for clone shape instead of adding a new one.
     * @param position Position of the new shape in the list. Default is at the end of the list.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    createShape(name: string, slideIndex: number, dto?: model.ShapeBase, shapeToClone?: number, position?: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Create a slide.
     * @param name Document name.
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index
     * @param position The target position at which to create the slide. Add to the end by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createSlide(name: string, layoutAlias?: string, position?: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Add SmartArt node
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param smartArtIndex Index of the object on the slide among the same type of objects.
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2).
     * @param text Node text.
     * @param position Position to insert a new node.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createSmartArtNode(name: string, slideIndex: number, smartArtIndex: number, subNode?: string, text?: string, position?: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SmartArt;
    }>;
    /**
     * Add an effect to special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createSpecialSlideAnimationEffect(name: string, slideIndex: number, slideType: model.SpecialSlideType, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Set special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param sequence Animation sequence DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createSpecialSlideAnimationInteractiveSequence(name: string, slideIndex: number, slideType: model.SpecialSlideType, sequence: model.InteractiveSequence, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param sequenceIndex The position of the interactive sequence.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createSpecialSlideAnimationInteractiveSequenceEffect(name: string, slideIndex: number, slideType: model.SpecialSlideType, sequenceIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Creates new paragraph.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param dto Paragraph DTO.
     * @param position Position of the new paragraph in the list. Default is at the end of the list.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    createSpecialSlideParagraph(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, dto: model.Paragraph, position?: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Creates new portion.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param dto Portion DTO.
     * @param position Position of the new portion in the list. Default is at the end of the list.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    createSpecialSlidePortion(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, dto: model.Portion, position?: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Create new shape.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param dto Shape DTO.
     * @param shapeToClone Optional index for clone shape instead of adding a new one.
     * @param position Position of the new shape in the list. Default is at the end of the list.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    createSpecialSlideShape(name: string, slideIndex: number, slideType: model.SpecialSlideType, dto: model.ShapeBase, shapeToClone?: number, position?: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Creates table cell paragraph.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param dto Paragraph DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createTableCellParagraph(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, dto: model.Paragraph, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Creates table cell portion.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param dto Portion DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createTableCellPortion(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, dto: model.Portion, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Inserts the table row in the specified position. If position is not specified, the row add to the end of the table.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param dto Table row data.
     * @param position Position.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createTableRow(name: string, slideIndex: number, shapeIndex: number, dto: model.TableRow, position?: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TableRow;
    }>;
    /**
     * Append module to VBA project
     * @param name Document name.
     * @param moduleDto VBA module DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createVbaModule(name: string, moduleDto: model.VbaModule, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.VbaModule;
    }>;
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.
     * @param name Document name.
     * @param shape Shape DTO
     * @param fontHeight Watermark font height.
     * @param text Watermark text.
     * @param fontName Watermark font name.
     * @param fontColor Watermark font color.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    createWatermark(name: string, shape?: model.Shape, fontHeight?: number, text?: string, fontName?: string, fontColor?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.
     * @param document Document data.
     * @param shape Shape DTO
     * @param fontHeight Watermark font height.
     * @param text Watermark text.
     * @param fontName Watermark font name.
     * @param fontColor Watermark font color.
     * @param password Document password.
     */
    createWatermarkOnline(document: Readable, shape?: model.Shape, fontHeight?: number, text?: string, fontName?: string, fontColor?: string, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Remove animation from a slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteAnimation(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove an effect from slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param effectIndex Index of the effect to be removed.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteAnimationEffect(name: string, slideIndex: number, effectIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove an interactive sequence from slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param sequenceIndex The index of an interactive sequence to be deleted.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteAnimationInteractiveSequence(name: string, slideIndex: number, sequenceIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove an effect from slide animation interactive sequence.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param sequenceIndex Interactive sequence index.
     * @param effectIndex Index of the effect to be removed.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteAnimationInteractiveSequenceEffect(name: string, slideIndex: number, sequenceIndex: number, effectIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Clear all interactive sequences from slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteAnimationInteractiveSequences(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Clear main sequence in slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteAnimationMainSequence(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove background from a slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteBackground(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideBackground;
    }>;
    /**
     * Delete a category from a chart.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param categoryIndex Category index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteChartCategory(name: string, slideIndex: number, shapeIndex: number, categoryIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Delete a data point from a chart series.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param seriesIndex Series index.
     * @param pointIndex Data point index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteChartDataPoint(name: string, slideIndex: number, shapeIndex: number, seriesIndex: number, pointIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Delete a series from a chart.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index (must be a chart).
     * @param seriesIndex Series index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteChartSeries(name: string, slideIndex: number, shapeIndex: number, seriesIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.
     * @param name Document name.
     * @param author Author of comments.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteComments(name: string, author?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.
     * @param document Document data.
     * @param author Author of comments.
     * @param password Document password.
     */
    deleteCommentsOnline(document: Readable, author?: string, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Clean document properties.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteDocumentProperties(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentProperties;
    }>;
    /**
     * Delete document property.
     * @param name Document name.
     * @param propertyName The property name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteDocumentProperty(name: string, propertyName: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentProperties;
    }>;
    /**
     * Removes specified embedded font and returns presentation fonts info.
     * @param name Document name.
     * @param fontName Font name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteEmbeddedFont(name: string, fontName: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Removes specified embedded font and returns presentation.
     * @param document Document data.
     * @param fontName Font name.
     * @param password Document password.
     */
    deleteEmbeddedFontOnline(document: Readable, fontName: string, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Delete file
     * @param path File path e.g. '/folder/file.ext'
     * @param storageName Storage name
     * @param versionId File version ID to delete
     */
    deleteFile(path?: string, storageName?: string, versionId?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Delete folder
     * @param path Folder path e.g. '/folder'
     * @param storageName Storage name
     * @param recursive Enable to delete folders, subfolders and files
     */
    deleteFolder(path?: string, storageName?: string, recursive?: boolean): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Remove notes slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteNotesSlide(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slide;
    }>;
    /**
     * Remove a paragraph.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteParagraph(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Remove a range of paragraphs.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphs The indices of the paragraphs to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteParagraphs(name: string, slideIndex: number, shapeIndex: number, paragraphs?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Deletes cropped areas of a pictire.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index (must refer to a picture frame).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Presentation storage.
     */
    deletePictureCroppedAreas(name: string, slideIndex: number, shapeIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Remove a portion.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deletePortion(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Remove a range of portions.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portions The indices of the portions to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deletePortions(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portions?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Resets all presentation protection settings.
     * @param name Document name.
     * @param password Presentation password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteProtection(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ProtectionProperties;
    }>;
    /**
     * Resets all presentation protection settings.
     * @param document Document data.
     * @param password Presentation password.
     */
    deleteProtectionOnline(document: Readable, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Delete a presentation section.
     * @param name Document name.
     * @param sectionIndex Section index.
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSection(name: string, sectionIndex: number, withSlides?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Delete presentation sections.
     * @param name Document name.
     * @param sections The indices of the sections to be deleted; delete all by default.
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSections(name: string, sections?: Array<number>, withSlides?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Remove a shape.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteShape(name: string, slideIndex: number, shapeIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Remove a range of shapes.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapes The indices of the shapes to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteShapes(name: string, slideIndex: number, shapes?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Delete a presentation slide by index.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSlide(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param author Author of comments.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSlideComments(name: string, slideIndex: number, author?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideComments;
    }>;
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.
     * @param document Document data.
     * @param slideIndex
     * @param author Author of comments.
     * @param password Document password.
     */
    deleteSlideCommentsOnline(document: Readable, slideIndex: number, author?: string, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Delete presentation slides.
     * @param name Document name.
     * @param slides The indices of the slides to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSlides(name: string, slides?: Array<number>, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Delete SmartArt node
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param smartArtIndex Index of the object on the slide among the same type of objects.
     * @param nodeIndex Root level node index.
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSmartArtNode(name: string, slideIndex: number, smartArtIndex: number, nodeIndex: number, subNode?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SmartArt;
    }>;
    /**
     * Remove animation from a special slide (master, layout, notes).
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSpecialSlideAnimation(name: string, slideIndex: number, slideType: model.SpecialSlideType, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param effectIndex Index of the effect to be removed.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSpecialSlideAnimationEffect(name: string, slideIndex: number, slideType: model.SpecialSlideType, effectIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param sequenceIndex The index of an interactive sequence to be deleted.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSpecialSlideAnimationInteractiveSequence(name: string, slideIndex: number, slideType: model.SpecialSlideType, sequenceIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param sequenceIndex Interactive sequence index.
     * @param effectIndex Index of the effect to be removed.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSpecialSlideAnimationInteractiveSequenceEffect(name: string, slideIndex: number, slideType: model.SpecialSlideType, sequenceIndex: number, effectIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSpecialSlideAnimationInteractiveSequences(name: string, slideIndex: number, slideType: model.SpecialSlideType, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteSpecialSlideAnimationMainSequence(name: string, slideIndex: number, slideType: model.SpecialSlideType, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Remove a paragraph.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteSpecialSlideParagraph(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Remove a range of paragraphs.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphs The indices of the shapes to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteSpecialSlideParagraphs(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphs?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Remove a portion.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteSpecialSlidePortion(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Remove a range of portions.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portions The indices of the shapes to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteSpecialSlidePortions(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, portions?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Remove a shape.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteSpecialSlideShape(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Remove a range of shapes.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapes The indices of the shapes to be deleted; delete all by default.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    deleteSpecialSlideShapes(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapes?: Array<number>, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Delete cell paragraph.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteTableCellParagraph(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Delete table ell portion.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteTableCellPortion(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Deletes the table row.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param withAttachedRows Also delete all attached rows.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteTableRow(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, withAttachedRows?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Table;
    }>;
    /**
     * Removes unused layout slides.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteUnusedLayoutSlides(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.LayoutSlides;
    }>;
    /**
     * Removes unused layout slides.
     * @param document Document data
     * @param password Document password.
     */
    deleteUnusedLayoutSlidesOnline(document: Readable, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Removes unused master slides.
     * @param name Document name.
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteUnusedMasterSlides(name: string, ignorePreserveField?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.MasterSlides;
    }>;
    /**
     * Removes unused master slides.
     * @param document Document data
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true.
     * @param password Document password.
     */
    deleteUnusedMasterSlidesOnline(document: Readable, ignorePreserveField?: boolean, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Delete module from VBA project.
     * @param name Document name.
     * @param moduleIndex The index of the macros module to remove.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteVbaModule(name: string, moduleIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.VbaProject;
    }>;
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     * @param name Document name.
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    deleteWatermark(name: string, shapeName?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     * @param document Document data.
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used.
     * @param password Document password.
     */
    deleteWatermarkOnline(document: Readable, shapeName?: string, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Download file
     * @param path File path e.g. '/folder/file.ext'
     * @param storageName Storage name
     * @param versionId File version ID to download
     */
    downloadFile(path?: string, storageName?: string, versionId?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get image in specified format.
     * @param name Document name.
     * @param index Image index.
     * @param format Export format (png, jpg, gif).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    downloadImage(name: string, index: number, format: model.ImageExportFormat, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get image binary data.
     * @param name Document name.
     * @param index Image index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    downloadImageDefaultFormat(name: string, index: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get image binary data.
     * @param document Document data.
     * @param index Image index.
     * @param password Document password.
     */
    downloadImageDefaultFormatOnline(document: Readable, index: number, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get image in specified format.
     * @param document Document data.
     * @param index Image index.
     * @param format Export format (png, jpg, gif).
     * @param password Document password.
     */
    downloadImageOnline(document: Readable, index: number, format: model.ImageExportFormat, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get all presentation images in specified format.
     * @param name
     * @param format Export format (png, jpg, gif).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    downloadImages(name: string, format: model.ImageExportFormat, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get all presentation images.
     * @param name
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    downloadImagesDefaultFormat(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get all presentation images.
     * @param document Document data.
     * @param password Document password.
     */
    downloadImagesDefaultFormatOnline(document: Readable, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Get all presentation images in specified format.
     * @param document Document data.
     * @param format Export format (png, jpg, gif).
     * @param password Document password.
     */
    downloadImagesOnline(document: Readable, format: model.ImageExportFormat, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Convert Mathematical Text to MathML Format
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param format Format.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    downloadMathPortion(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, format: model.MathFormat, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Convert notes slide to the specified image format.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param format Output file format.
     * @param width The width of the slide representation in the output format.
     * @param height The height of the slide representation in the output format
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Storage folder containing custom fonts to be used with the document.
     */
    downloadNotesSlide(name: string, slideIndex: number, format: model.NotesSlideExportFormat, width?: number, height?: number, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Convert notes slide to the specified image format.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param format Output file format.
     * @param width The width of the slide representation in the output format.
     * @param height The height of the slide representation in the output format.
     * @param password Document password.
     * @param fontsFolder Storage folder containing custom fonts to be used with the document.
     */
    downloadNotesSlideOnline(document: Readable, slideIndex: number, format: model.NotesSlideExportFormat, width?: number, height?: number, password?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Save a presentation to a specified format.
     * @param name Document name.
     * @param format Export format.
     * @param options Export options.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default.
     */
    downloadPresentation(name: string, format: model.ExportFormat, options?: model.ExportOptions, password?: string, folder?: string, storage?: string, fontsFolder?: string, slides?: Array<number>): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Render shape to specified picture format.
     * @param name Presentation name.
     * @param slideIndex Slide index.
     * @param shapeIndex Index of shape starting from 1
     * @param format Export picture format.
     * @param options export options
     * @param scaleX X scale ratio.
     * @param scaleY Y scale ratio.
     * @param bounds Shape thumbnail bounds type.
     * @param password Document password.
     * @param folder Presentation folder.
     * @param storage Presentation storage.
     * @param fontsFolder Fonts folder.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    downloadShape(name: string, slideIndex: number, shapeIndex: number, format: model.ShapeExportFormat, options?: model.IShapeExportOptions, scaleX?: number, scaleY?: number, bounds?: model.ShapeThumbnailBounds, password?: string, folder?: string, storage?: string, fontsFolder?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Creates the shape from the DTO and returns the result in the specified format.
     * @param format Export format
     * @param dto Shape DTO.
     */
    downloadShapeFromDto(format: model.ShapeExportFormat, dto: model.ShapeBase): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Render shape to specified picture format.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param shapeIndex Index of shape starting from 1
     * @param format Export picture format.
     * @param scaleX X scale ratio.
     * @param scaleY Y scale ratio.
     * @param bounds Shape thumbnail bounds type.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Fonts folder.
     * @param options Export options.
     */
    downloadShapeOnline(document: Readable, slideIndex: number, shapeIndex: number, format: model.ShapeExportFormat, scaleX?: number, scaleY?: number, bounds?: model.ShapeThumbnailBounds, password?: string, storage?: string, fontsFolder?: string, options?: model.IShapeExportOptions): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Save a slide to a specified format.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param format Output file format.
     * @param options Export options.
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Storage folder containing custom fonts to be used with the document.
     */
    downloadSlide(name: string, slideIndex: number, format: model.SlideExportFormat, options?: model.ExportOptions, width?: number, height?: number, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Save a slide to a specified format.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param format Output file format.
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Storage folder containing custom fonts to be used with the document.
     * @param options Export options.
     */
    downloadSlideOnline(document: Readable, slideIndex: number, format: model.SlideExportFormat, width?: number, height?: number, password?: string, storage?: string, fontsFolder?: string, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Render shape to specified picture format.
     * @param name Presentation name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Index of shape starting from 1
     * @param format Export picture format.
     * @param options Export options
     * @param scaleX X scale ratio.
     * @param scaleY Y scale ratio.
     * @param bounds Shape thumbnail bounds type.
     * @param password Document password.
     * @param folder Presentation folder.
     * @param storage Presentation storage.
     * @param fontsFolder Fonts folder.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    downloadSpecialSlideShape(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, format: model.ShapeExportFormat, options?: model.IShapeExportOptions, scaleX?: number, scaleY?: number, bounds?: model.ShapeThumbnailBounds, password?: string, folder?: string, storage?: string, fontsFolder?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Read slide animation effects.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getAnimation(name: string, slideIndex: number, shapeIndex?: number, paragraphIndex?: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Get API info.
     */
    getApiInfo(): Promise<{
        response: http.ServerResponse;
        body: model.ApiInfo;
    }>;
    /**
     * Returns presentation fonts info.
     * @param fontsFolder Storage folder for custom fonts.
     * @param storage Storage for custom fonts.
     */
    getAvailableFonts(fontsFolder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Read slide background info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getBackground(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideBackground;
    }>;
    /**
     * Read slide theme color scheme info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getColorScheme(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ColorScheme;
    }>;
    /**
     * Lists comment authors.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getCommentAuthors(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.CommentAuthors;
    }>;
    /**
     * Get disc usage
     * @param storageName Storage name
     */
    getDiscUsage(storageName?: string): Promise<{
        response: http.ServerResponse;
        body: model.DiscUsage;
    }>;
    /**
     * Read presentation document properties.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getDocumentProperties(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentProperties;
    }>;
    /**
     * Read presentation document property.
     * @param name Document name.
     * @param propertyName The property name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getDocumentProperty(name: string, propertyName: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentProperty;
    }>;
    /**
     * Get file versions
     * @param path File path e.g. '/file.ext'
     * @param storageName Storage name
     */
    getFileVersions(path?: string, storageName?: string): Promise<{
        response: http.ServerResponse;
        body: model.FileVersions;
    }>;
    /**
     * Get all files and folders within a folder
     * @param path Folder path e.g. '/folder'
     * @param storageName Storage name
     */
    getFilesList(path?: string, storageName?: string): Promise<{
        response: http.ServerResponse;
        body: model.FilesList;
    }>;
    /**
     * Read slide theme font scheme info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getFontScheme(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontScheme;
    }>;
    /**
     * Returns presentation fonts info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getFonts(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Returns presentation fonts info.
     * @param document Document data.
     * @param password Document password.
     */
    getFontsOnline(document: Readable, password?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Read slide theme format scheme info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getFormatScheme(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.FormatScheme;
    }>;
    /**
     * Get default templates for HTML5 export.
     */
    getHtml5Templates(): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Read presentation layoutSlide info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getLayoutSlide(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.LayoutSlide;
    }>;
    /**
     * Read presentation layoutSlides info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getLayoutSlides(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.LayoutSlides;
    }>;
    /**
     * Read presentation masterSlide info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getMasterSlide(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.MasterSlide;
    }>;
    /**
     * Read presentation masterSlides info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getMasterSlides(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.MasterSlides;
    }>;
    /**
     * Read notes slide info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getNotesSlide(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.NotesSlide;
    }>;
    /**
     * Get header/footer info for the notes slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getNotesSlideHeaderFooter(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.NotesSlideHeaderFooter;
    }>;
    /**
     * Read notes slide info.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param password Document password.
     */
    getNotesSlideOnline(document: Readable, slideIndex: number, password?: string): Promise<{
        response: http.ServerResponse;
        body: model.NotesSlide;
    }>;
    /**
     * Read shape paragraph info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getParagraph(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Read effective paragraph info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getParagraphEffective(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getParagraphRectangle(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TextBounds;
    }>;
    /**
     * Read shape paragraphs info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getParagraphs(name: string, slideIndex: number, shapeIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Read slide placeholder info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param placeholderIndex Placeholder index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getPlaceholder(name: string, slideIndex: number, placeholderIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Placeholder;
    }>;
    /**
     * Read slide placeholders info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getPlaceholders(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Placeholders;
    }>;
    /**
     * Read paragraph portion info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getPortion(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Read effective portion info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getPortionEffective(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getPortionRectangle(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TextBounds;
    }>;
    /**
     * Read paragraph portions info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getPortions(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Read presentation info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getPresentation(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Read presentation images info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getPresentationImages(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Images;
    }>;
    /**
     * Extract presentation text items.
     * @param name Document name.
     * @param withEmpty True to incude empty items.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getPresentationTextItems(name: string, withEmpty?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TextItems;
    }>;
    /**
     * Read presentation protection properties.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getProtectionProperties(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ProtectionProperties;
    }>;
    /**
     * Read presentation sections info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSections(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Read slide shape info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getShape(name: string, slideIndex: number, shapeIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Returns geometry path of the shape
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getShapeGeometryPath(name: string, slideIndex: number, shapeIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.GeometryPaths;
    }>;
    /**
     * Read slide shapes info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param shapeType Shape type.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getShapes(name: string, slideIndex: number, password?: string, folder?: string, storage?: string, shapeType?: model.ShapeType, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Read presentation slide info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlide(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slide;
    }>;
    /**
     * Read presentation slide comments.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlideComments(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideComments;
    }>;
    /**
     * Get footer info for the slide.
     * @param name Document name.
     * @param slideIndex The position of the slide to be reordered.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlideHeaderFooter(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.HeaderFooter;
    }>;
    /**
     * Read slide images info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlideImages(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Images;
    }>;
    /**
     * Read presentation slide properties.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlideProperties(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideProperties;
    }>;
    /**
     * Read presentation slide show properties.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlideShowProperties(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideShowProperties;
    }>;
    /**
     * Extract slide text items.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param withEmpty True to include empty items.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlideTextItems(name: string, slideIndex: number, withEmpty?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TextItems;
    }>;
    /**
     * Read presentation slides info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSlides(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Read special slide (master, layout, notes) animation effects.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned.
     * @param paragraphIndex Paragraph index. If specified, only effects related to that paragraph are returned.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getSpecialSlideAnimation(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex?: number, paragraphIndex?: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Read shape paragraph info.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getSpecialSlideParagraph(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Read special shape paragraphs info.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getSpecialSlideParagraphs(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Read paragraph portion info.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getSpecialSlidePortion(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Read paragraph portions info.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getSpecialSlidePortions(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Read special slide shape info.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getSpecialSlideShape(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Read special slide shapes info.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    getSpecialSlideShapes(name: string, slideIndex: number, slideType: model.SpecialSlideType, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Returns paragraph info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getTableCellParagraph(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Returns table cell paragraphs.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getTableCellParagraphs(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraphs;
    }>;
    /**
     * Returns table cell portion.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getTableCellPortion(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, portionIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Returns table cell portions.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getTableCellPortions(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portions;
    }>;
    /**
     * Read slide theme info.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getTheme(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Theme;
    }>;
    /**
     * Get VBA module info.
     * @param name Document name.
     * @param moduleIndex The index of the macros module to remove.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getVbaModule(name: string, moduleIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.VbaModule;
    }>;
    /**
     * Get VBA project info.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getVbaProject(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.VbaProject;
    }>;
    /**
     * Read presentation view properties.
     * @param name Document name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    getViewProperties(name: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ViewProperties;
    }>;
    /**
     * Highlight all matches of sample in text frame text using specified color.
     * @param name Document name.
     * @param regex Regular expression.
     * @param color Highlighting color.
     * @param ignoreCase True to search ignoring char case.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    highlightPresentationRegex(name: string, regex: string, color: string, ignoreCase?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentReplaceResult;
    }>;
    /**
     * Highlight all matches of sample using specified color.
     * @param name Document name.
     * @param text Text sample to highlight.
     * @param color Highlighting color.
     * @param wholeWordsOnly Match only whole words.
     * @param ignoreCase True to search ignoring char case.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    highlightPresentationText(name: string, text: string, color: string, wholeWordsOnly?: boolean, ignoreCase?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentReplaceResult;
    }>;
    /**
     * Highlight all matches of sample in text frame text using specified color.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param regex Regular expression.
     * @param color Highlighting color.
     * @param ignoreCase True to search ignoring char case.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    highlightShapeRegex(name: string, slideIndex: number, shapeIndex: number, regex: string, color: string, ignoreCase?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shape;
    }>;
    /**
     * Highlight all matches of sample in text frame text using specified color.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param text Text sample to highlight.
     * @param color Highlighting color.
     * @param wholeWordsOnly Match only whole words.
     * @param ignoreCase True to search ignoring char case.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    highlightShapeText(name: string, slideIndex: number, shapeIndex: number, text: string, color: string, wholeWordsOnly?: boolean, ignoreCase?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shape;
    }>;
    /**
     * Create presentation document from html.
     * @param name Document name.
     * @param html HTML data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    importFromHtml(name: string, html?: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * @param name Document name.
     * @param pdf PDF data.
     * @param options Import options.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    importFromPdf(name: string, pdf: Readable, options?: model.PdfImportOptions, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Imports shapes from SVG file.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param image SVG image data.
     * @param x The X coordinate of the imported group of shapes (0 is default if not specified).
     * @param y The Y coordinate of the imported group of shapes (0 is default if not specified).
     * @param width The width of the imported group of shapes (default is SVG image width).
     * @param height The height of the imported group of shapes (default is SVG image width).
     * @param shapes Indexes of shapes to import. All shapes are imported if not specified.
     * @param group If true, the set of shapes will be imported as a one group shape.
     * @param password Document password.
     * @param folder Presentation folder.
     * @param storage Presentation storage.
     */
    importShapesFromSvg(name: string, slideIndex: number, image?: Readable, x?: number, y?: number, width?: number, height?: number, shapes?: Array<number>, group?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Shapes;
    }>;
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * @param name Document name.
     * @param request PresentationsMergeRequest with a list of presentations to merge.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    merge(name: string, request: model.PresentationsMergeRequest, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     * @param outPath Path to save result.
     * @param files Files to merge
     * @param request Merge request.
     * @param storage Document storage.
     */
    mergeAndSaveOnline(outPath: string, files?: Array<Readable>, request?: model.OrderedMergeRequest, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response.
     * @param files Files to merge
     * @param request Merge request.
     * @param storage Document storage.
     */
    mergeOnline(files?: Array<Readable>, request?: model.OrderedMergeRequest, storage?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Merge table cells.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param tableCellMergeOptions Merge settings.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    mergeTableCells(name: string, slideIndex: number, shapeIndex: number, tableCellMergeOptions: model.TableCellMergeOptions, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Table;
    }>;
    /**
     * Move file
     * @param srcPath Source file path e.g. '/src.ext'
     * @param destPath Destination file path e.g. '/dest.ext'
     * @param srcStorageName Source storage name
     * @param destStorageName Destination storage name
     * @param versionId File version ID to move
     */
    moveFile(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string, versionId?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Move folder
     * @param srcPath Folder path to move e.g. '/folder'
     * @param destPath Destination folder path to move to e.g '/dst'
     * @param srcStorageName Source storage name
     * @param destStorageName Destination storage name
     */
    moveFolder(srcPath: string, destPath: string, srcStorageName?: string, destStorageName?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Move presentation section to a specified position.
     * @param name Document name.
     * @param sectionIndex The position of the section to be reordered.
     * @param newPosition The new position of the reordered section.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    moveSection(name: string, sectionIndex: number, newPosition: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Reorder presentation slide position.
     * @param name Document name.
     * @param slideIndex The position of the slide to be reordered.
     * @param newPosition The new position of the reordered slide.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    moveSlide(name: string, slideIndex: number, newPosition: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Get info whether a notes slide exists.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    notesSlideExists(name: string, slideIndex: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.EntityExists;
    }>;
    /**
     * Get info whether a notes slide exists.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param password Document password.
     */
    notesSlideExistsOnline(document: Readable, slideIndex: number, password?: string): Promise<{
        response: http.ServerResponse;
        body: model.EntityExists;
    }>;
    /**
     * Check if file or folder exists
     * @param path File or folder path e.g. '/file.ext' or '/folder'
     * @param storageName Storage name
     * @param versionId File version ID
     */
    objectExists(path?: string, storageName?: string, versionId?: string): Promise<{
        response: http.ServerResponse;
        body: model.ObjectExist;
    }>;
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * @param name Document name.
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    orderedMerge(name: string, request: model.OrderedMergeRequest, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Performs slides pipeline.
     * @param pipeline A Pipeline object.
     * @param files Files to upload with the pipeline
     */
    pipeline(pipeline: model.Pipeline, files?: Array<Readable>): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Reorder presentation slides positions.
     * @param name Document name.
     * @param oldPositions A comma separated array of positions of slides to be reordered.
     * @param newPositions A comma separated array of new slide positions.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    reorderSlides(name: string, oldPositions?: Array<number>, newPositions?: Array<number>, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slides;
    }>;
    /**
     * Replaces specified font and returns presentation fonts info.
     * @param name Document name.
     * @param sourceFont Source font name.
     * @param targetFont Target font name.
     * @param embed Embed target font.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     */
    replaceFont(name: string, sourceFont: string, targetFont: string, embed?: boolean, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Replaces specified font and returns presentation.
     * @param document Document data.
     * @param sourceFont Source font name.
     * @param targetFont Target font name.
     * @param embed Embed target font.
     * @param password Document password.
     * @param fontsFolder Custom fonts folder.
     */
    replaceFontOnline(document: Readable, sourceFont: string, targetFont: string, embed?: boolean, password?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Replaces image by the specified index.
     * @param name Document name.
     * @param imageIndex Image index.
     * @param image Image data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    replaceImage(name: string, imageIndex: number, image: Readable, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Replaces image by the specified index and returns updated document.
     * @param document Document data.
     * @param imageIndex Image index.
     * @param image Image data.
     * @param password Password.
     */
    replaceImageOnline(document: Readable, imageIndex: number, image: Readable, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Replace text with a new value using a regex.
     * @param name Document name.
     * @param pattern Text value pattern to be replaced.
     * @param newValue Text value to replace with.
     * @param ignoreCase True if character case must be ignored.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    replacePresentationRegex(name: string, pattern: string, newValue: string, ignoreCase?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentReplaceResult;
    }>;
    /**
     * Replace text with a new value using a regex.
     * @param document Document data.
     * @param pattern Text regex pattern to be replaced.
     * @param newValue Text value to replace with.
     * @param ignoreCase True if character case must be ignored.
     * @param password Document password.
     */
    replacePresentationRegexOnline(document: Readable, pattern: string, newValue: string, ignoreCase?: boolean, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Replace text with a new value.
     * @param name Document name.
     * @param oldValue Text value to be replaced.
     * @param newValue Text value to replace with.
     * @param ignoreCase True if character case must be ignored.
     * @param wholeWordsOnly True to replace whole words only.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    replacePresentationText(name: string, oldValue: string, newValue: string, ignoreCase?: boolean, wholeWordsOnly?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentReplaceResult;
    }>;
    /**
     * Replace text with a new value.
     * @param document Document data.
     * @param oldValue Text value to be replaced.
     * @param newValue Text value to replace with.
     * @param ignoreCase True if character case must be ignored.
     * @param wholeWordsOnly True to replace whole words only.
     * @param password Document password.
     */
    replacePresentationTextOnline(document: Readable, oldValue: string, newValue: string, ignoreCase?: boolean, wholeWordsOnly?: boolean, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Replace text with a new value.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param oldValue Text value to be replaced.
     * @param newValue Text value to replace with.
     * @param ignoreCase True if character case must be ignored.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    replaceSlideText(name: string, slideIndex: number, oldValue: string, newValue: string, ignoreCase?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideReplaceResult;
    }>;
    /**
     * Replace slide text with a new value.
     * @param document Document data.
     * @param slideIndex Index of target slide.
     * @param oldValue Text value to be replaced.
     * @param newValue Text value to replace with.
     * @param ignoreCase True if character case must be ignored.
     * @param password Document password.
     */
    replaceSlideTextOnline(document: Readable, slideIndex: number, oldValue: string, newValue: string, ignoreCase?: boolean, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Finds and replaces text in presentation with given format.
     * @param name Document name.
     * @param oldValue Text value to be replaced.
     * @param newValue Text value to replace with.
     * @param portionFormat Portion format.
     * @param withMasters Text replacement includes master slides.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    replaceTextFormatting(name: string, oldValue: string, newValue: string, portionFormat?: model.PortionFormat, withMasters?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Finds and replaces text in presentation with given format.
     * @param document Document data.
     * @param oldValue Text value to be replaced.
     * @param newValue Text value to replace with.
     * @param portionFormat Portion format.
     * @param withMasters Text replacement includes master slides.
     * @param password Document password.
     */
    replaceTextFormattingOnline(document: Readable, oldValue: string, newValue: string, portionFormat?: model.PortionFormat, withMasters?: boolean, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param format Format.
     * @param outPath Path to save result.
     * @param password Document password.
     * @param folder Presentation folder.
     * @param storage Presentation storage.
     */
    saveMathPortion(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, format: model.MathFormat, outPath: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Save a presentation to a specified format.
     * @param name Document name.
     * @param format Export format.
     * @param outPath Output path.
     * @param options Export options.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default.
     */
    savePresentation(name: string, format: model.ExportFormat, outPath: string, options?: model.ExportOptions, password?: string, folder?: string, storage?: string, fontsFolder?: string, slides?: Array<number>): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Render shape to specified picture format.
     * @param name Presentation name.
     * @param slideIndex Slide index.
     * @param shapeIndex Index of shape starting from 1
     * @param format Export picture format.
     * @param outPath Output path.
     * @param options export options
     * @param scaleX X scale ratio.
     * @param scaleY Y scale ratio.
     * @param bounds Shape thumbnail bounds type.
     * @param password Document password.
     * @param folder Presentation folder.
     * @param storage Presentation storage.
     * @param fontsFolder Fonts folder.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    saveShape(name: string, slideIndex: number, shapeIndex: number, format: model.ShapeExportFormat, outPath: string, options?: model.IShapeExportOptions, scaleX?: number, scaleY?: number, bounds?: model.ShapeThumbnailBounds, password?: string, folder?: string, storage?: string, fontsFolder?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Render shape to specified picture format.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param shapeIndex Index of shape starting from 1
     * @param format Export picture format.
     * @param outPath Path to save result.
     * @param scaleX X scale ratio.
     * @param scaleY Y scale ratio.
     * @param bounds Shape thumbnail bounds type.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Fonts folder.
     * @param options Export options.
     */
    saveShapeOnline(document: Readable, slideIndex: number, shapeIndex: number, format: model.ShapeExportFormat, outPath: string, scaleX?: number, scaleY?: number, bounds?: model.ShapeThumbnailBounds, password?: string, storage?: string, fontsFolder?: string, options?: model.IShapeExportOptions): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Save a slide to a specified format.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param format Output file format.
     * @param outPath Path to upload the output file to.
     * @param options Export options.
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Storage folder containing custom fonts to be used with the document.
     */
    saveSlide(name: string, slideIndex: number, format: model.SlideExportFormat, outPath: string, options?: model.ExportOptions, width?: number, height?: number, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Save a slide to a specified format.
     * @param document Document data.
     * @param slideIndex Slide index.
     * @param format Output file format.
     * @param outPath Path to save result.
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Storage folder containing custom fonts to be used with the document.
     * @param options Export options.
     */
    saveSlideOnline(document: Readable, slideIndex: number, format: model.SlideExportFormat, outPath: string, width?: number, height?: number, password?: string, storage?: string, fontsFolder?: string, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Render shape to specified picture format.
     * @param name Presentation name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Index of shape starting from 1
     * @param format Export picture format.
     * @param outPath Output path.
     * @param options export options
     * @param scaleX X scale ratio.
     * @param scaleY Y scale ratio.
     * @param bounds Shape thumbnail bounds type.
     * @param password Document password.
     * @param folder Presentation folder.
     * @param storage Presentation storage.
     * @param fontsFolder Fonts folder.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    saveSpecialSlideShape(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, format: model.ShapeExportFormat, outPath: string, options?: model.IShapeExportOptions, scaleX?: number, scaleY?: number, bounds?: model.ShapeThumbnailBounds, password?: string, folder?: string, storage?: string, fontsFolder?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
    }>;
    /**
     * Set slide animation.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param animation Animation DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setAnimation(name: string, slideIndex: number, animation: model.SlideAnimation, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Set background for a slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param background Slide background update data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setBackground(name: string, slideIndex: number, background: model.SlideBackground, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideBackground;
    }>;
    /**
     * Set background color for a slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param color Slide background target color in RRGGBB format.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setBackgroundColor(name: string, slideIndex: number, color: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideBackground;
    }>;
    /**
     * Set chart axis.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param axisType Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical.
     * @param axis Axis DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setChartAxis(name: string, slideIndex: number, shapeIndex: number, axisType: model.AxisType, axis: model.Axis, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Axis;
    }>;
    /**
     * Set chart axis.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param legend Chart legend DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setChartLegend(name: string, slideIndex: number, shapeIndex: number, legend: model.Legend, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Legend;
    }>;
    /**
     * Set a series group in a chart.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index (must be a chart).
     * @param seriesGroupIndex Series group index.
     * @param seriesGroup Series group DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setChartSeriesGroup(name: string, slideIndex: number, shapeIndex: number, seriesGroupIndex: number, seriesGroup: model.ChartSeriesGroup, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Set 3D chart wall.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param chartWallType Chart wall type: floor, sideWall or backWall.
     * @param chartWall Chart wall DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setChartWall(name: string, slideIndex: number, shapeIndex: number, chartWallType: model.ChartWallType, chartWall: model.ChartWall, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ChartWall;
    }>;
    /**
     * Set document properties.
     * @param name Document name.
     * @param properties New properties.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setDocumentProperties(name: string, properties: model.DocumentProperties, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentProperties;
    }>;
    /**
     * Set document property.
     * @param name Document name.
     * @param propertyName The property name.
     * @param property Property with the value.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setDocumentProperty(name: string, propertyName: string, property: model.DocumentProperty, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.DocumentProperty;
    }>;
    /**
     * Embeds specified font and returns presentation fonts info.
     * @param name Document name.
     * @param fontName Font name.
     * @param onlyUsed Only used characters will be embedded.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     */
    setEmbeddedFont(name: string, fontName: string, onlyUsed?: boolean, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Embeds font from request and returns presentation fonts info.
     * @param font Font data.
     * @param name Document name.
     * @param onlyUsed Only used characters will be embedded.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setEmbeddedFontFromRequest(font: Readable, name: string, onlyUsed?: boolean, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.FontsData;
    }>;
    /**
     * Embeds font from request and returns presentation.
     * @param document Document data.
     * @param font Font data.
     * @param onlyUsed Only used characters will be embedded.
     * @param password Document password.
     */
    setEmbeddedFontFromRequestOnline(document: Readable, font: Readable, onlyUsed?: boolean, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Embeds specified font and returns presentation.
     * @param document Document data.
     * @param fontName Font name.
     * @param onlyUsed Only used characters will be embedded.
     * @param password Document password.
     * @param fontsFolder Custom fonts folder.
     */
    setEmbeddedFontOnline(document: Readable, fontName: string, onlyUsed?: boolean, password?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Set header/footer the notes slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param dto Header/footer to set.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setNotesSlideHeaderFooter(name: string, slideIndex: number, dto: model.NotesSlideHeaderFooter, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.NotesSlideHeaderFooter;
    }>;
    /**
     * Set footers for all slides in a presentation.
     * @param name Document name.
     * @param dto HeaderFooter instance.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setPresentationHeaderFooter(name: string, dto: model.HeaderFooter, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Document;
    }>;
    /**
     * Updates presentation protection properties.
     * @param name Document name.
     * @param dto Protection properties.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setProtection(name: string, dto: model.ProtectionProperties, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ProtectionProperties;
    }>;
    /**
     * Sets presentation protection options.
     * @param document Document data.
     * @param dto Protection properties.
     * @param password Document password.
     */
    setProtectionOnline(document: Readable, dto: model.ProtectionProperties, password?: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * @param name Document name.
     * @param sections Sections DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setSections(name: string, sections: model.Sections, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Sets geometry path to the shape
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param dto Geometry paths DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setShapeGeometryPath(name: string, slideIndex: number, shapeIndex: number, dto: model.GeometryPaths, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Set footer the slide.
     * @param name Document name.
     * @param slideIndex The position of the slide to be reordered.
     * @param dto Footer to set.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setSlideHeaderFooter(name: string, slideIndex: number, dto: model.HeaderFooter, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.HeaderFooter;
    }>;
    /**
     * Update presentation slide properties.
     * @param name Document name.
     * @param dto The view properties data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setSlideProperties(name: string, dto: model.SlideProperties, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideProperties;
    }>;
    /**
     * Update presentation slide show properties.
     * @param name Document name.
     * @param dto The slide show properties data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setSlideShowProperties(name: string, dto: model.SlideShowProperties, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideShowProperties;
    }>;
    /**
     * Set special slide (master, layout, notes) animation.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param animation Animation DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setSpecialSlideAnimation(name: string, slideIndex: number, slideType: model.SpecialSlideType, animation: model.SlideAnimation, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Update presentation view properties.
     * @param name Document name.
     * @param dto The view properties data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    setViewProperties(name: string, dto: model.ViewProperties, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.ViewProperties;
    }>;
    /**
     * Splitting presentations. Create one image per slide.
     * @param name Document name.
     * @param options Export options.
     * @param format Export format. Default value is jpeg.
     * @param width The width of created images.
     * @param height The height of created images.
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     */
    split(name: string, options?: model.ExportOptions, format?: model.SlideExportFormat, width?: number, height?: number, from?: number, to?: number, destFolder?: string, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: model.SplitDocumentResult;
    }>;
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.
     * @param document Document data.
     * @param format ExportFormat
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder.
     * @param width Slide width.
     * @param height Slide height.
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     * @param options Export options.
     */
    splitAndSaveOnline(document: Readable, format: model.SlideExportFormat, destFolder?: string, width?: number, height?: number, from?: number, to?: number, password?: string, storage?: string, fontsFolder?: string, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: model.SplitDocumentResult;
    }>;
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.
     * @param document Document data.
     * @param format ExportFormat
     * @param width Slide width.
     * @param height Slide height.
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
     * @param password Document password.
     * @param storage Document storage.
     * @param fontsFolder Custom fonts folder.
     * @param options Export options.
     */
    splitOnline(document: Readable, format: model.SlideExportFormat, width?: number, height?: number, from?: number, to?: number, password?: string, storage?: string, fontsFolder?: string, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     * Split table cell.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param splitType Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan).
     * @param value Split value. In case of splitting by column or row span, the value must be an integer number.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    splitTableCell(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, splitType: model.TableCellSplitType, value: number, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Table;
    }>;
    /**
     * Check if storage exists
     * @param storageName Storage name
     */
    storageExists(storageName: string): Promise<{
        response: http.ServerResponse;
        body: model.StorageExist;
    }>;
    /**
     * Modify an animation effect for a slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param effectIndex The position of the effect to be modified.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateAnimationEffect(name: string, slideIndex: number, effectIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Modify an animation effect for a slide interactive sequence.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param sequenceIndex The position of the interactive sequence.
     * @param effectIndex The position of the effect to be modified.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateAnimationInteractiveSequenceEffect(name: string, slideIndex: number, sequenceIndex: number, effectIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Update a chart category.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param categoryIndex Category index.
     * @param category Category DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateChartCategory(name: string, slideIndex: number, shapeIndex: number, categoryIndex: number, category: model.ChartCategory, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Update a data point in a chart series.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param seriesIndex Series index.
     * @param pointIndex Data point index.
     * @param dataPoint Data point DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateChartDataPoint(name: string, slideIndex: number, shapeIndex: number, seriesIndex: number, pointIndex: number, dataPoint: model.DataPoint, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Update a series in a chart.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index (must be a chart).
     * @param seriesIndex Series index.
     * @param series Series DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateChartSeries(name: string, slideIndex: number, shapeIndex: number, seriesIndex: number, series: model.Series, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Chart;
    }>;
    /**
     * Update a layoutSlide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param slideDto Slide update data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateLayoutSlide(name: string, slideIndex: number, slideDto: model.LayoutSlide, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.LayoutSlide;
    }>;
    /**
     * Update notes slide properties.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param dto A NotesSlide object with notes slide data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateNotesSlide(name: string, slideIndex: number, dto: model.NotesSlide, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.NotesSlide;
    }>;
    /**
     * Update paragraph properties.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param dto Paragraph DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    updateParagraph(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, dto: model.Paragraph, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Update portion properties.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param dto Portion DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    updatePortion(name: string, slideIndex: number, shapeIndex: number, paragraphIndex: number, portionIndex: number, dto: model.Portion, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Update section name.
     * @param name Document name.
     * @param sectionIndex The position of the section to be updated.
     * @param sectionName Section name.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateSection(name: string, sectionIndex: number, sectionName: string, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Sections;
    }>;
    /**
     * Update shape properties.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param dto Shape DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    updateShape(name: string, slideIndex: number, shapeIndex: number, dto: model.ShapeBase, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Update a slide.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param slideDto Slide update data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateSlide(name: string, slideIndex: number, slideDto: model.Slide, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Slide;
    }>;
    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param effectIndex The position of the effect to be modified.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateSpecialSlideAnimationEffect(name: string, slideIndex: number, slideType: model.SpecialSlideType, effectIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param sequenceIndex The position of the interactive sequence.
     * @param effectIndex The position of the effect to be modified.
     * @param effect Animation effect DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateSpecialSlideAnimationInteractiveSequenceEffect(name: string, slideIndex: number, slideType: model.SpecialSlideType, sequenceIndex: number, effectIndex: number, effect: model.Effect, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.SlideAnimation;
    }>;
    /**
     * Update paragraph properties.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param dto Paragraph DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    updateSpecialSlideParagraph(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, dto: model.Paragraph, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Update portion properties.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param dto Portion DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    updateSpecialSlidePortion(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, paragraphIndex: number, portionIndex: number, dto: model.Portion, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Update shape properties.
     * @param name Document name.
     * @param slideIndex Parent slide index.
     * @param slideType Slide type (master, layout or notes).
     * @param shapeIndex Shape index.
     * @param dto Shape DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2).
     */
    updateSpecialSlideShape(name: string, slideIndex: number, slideType: model.SpecialSlideType, shapeIndex: number, dto: model.ShapeBase, password?: string, folder?: string, storage?: string, subShape?: string): Promise<{
        response: http.ServerResponse;
        body: model.ShapeBase;
    }>;
    /**
     * Update the table cell.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param dto Table cell data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateTableCell(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, dto: model.TableCell, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TableCell;
    }>;
    /**
     * Updates table cell paragraph.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param dto Paragraph DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateTableCellParagraph(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, dto: model.Paragraph, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Paragraph;
    }>;
    /**
     * Updates table cell portion.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param cellIndex Table cell index.
     * @param paragraphIndex Paragraph index.
     * @param portionIndex Portion index.
     * @param dto Portion DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateTableCellPortion(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, cellIndex: number, paragraphIndex: number, portionIndex: number, dto: model.Portion, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.Portion;
    }>;
    /**
     * Update the table row.
     * @param name Document name.
     * @param slideIndex Slide index.
     * @param shapeIndex Shape index.
     * @param rowIndex Row index.
     * @param dto Table cell data.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateTableRow(name: string, slideIndex: number, shapeIndex: number, rowIndex: number, dto: model.TableRow, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.TableRow;
    }>;
    /**
     * Update VBA module.
     * @param name Document name.
     * @param moduleIndex The index of the macros module to remove.
     * @param moduleDto VBA module DTO.
     * @param password Document password.
     * @param folder Document folder.
     * @param storage Document storage.
     */
    updateVbaModule(name: string, moduleIndex: number, moduleDto: model.VbaModule, password?: string, folder?: string, storage?: string): Promise<{
        response: http.ServerResponse;
        body: model.VbaModule;
    }>;
    /**
     * Upload file
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.
     * @param file File to upload
     * @param storageName Storage name
     */
    uploadFile(path: string, file: Readable, storageName?: string): Promise<{
        response: http.ServerResponse;
        body: model.FilesUploadResult;
    }>;
}
export declare class SlidesAsyncApi {
    private _configuration;
    get configuration(): Configuration;
    /**
     * @param appSid Client Id.
     * @param appKey Client Secret.
     * @param baseUrl Base api Url.
     * @param authBaseUrl Base authentication Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     * @param timeout Timeout (in seconds) for an operation. Applies to the Slides operation, not to the HTTP request.
     */
    constructor(appSid: string, appKey: string, baseUrl?: string, authBaseUrl?: string, debugMode?: boolean, timeout?: number);
    /**
     *
     * @param id
     */
    getOperationResult(id: string): Promise<{
        response: http.ServerResponse;
        body: Buffer;
    }>;
    /**
     *
     * @param id
     */
    getOperationStatus(id: string): Promise<{
        response: http.ServerResponse;
        body: model.Operation;
    }>;
    /**
     *
     * @param document Document data.
     * @param format
     * @param password
     * @param storage
     * @param fontsFolder
     * @param slides
     * @param options
     */
    startConvert(document: Readable, format: model.ExportFormat, password?: string, storage?: string, fontsFolder?: string, slides?: Array<number>, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param document Document data.
     * @param format
     * @param outPath
     * @param password
     * @param storage
     * @param fontsFolder
     * @param slides
     * @param options
     */
    startConvertAndSave(document: Readable, format: model.ExportFormat, outPath: string, password?: string, storage?: string, fontsFolder?: string, slides?: Array<number>, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param name
     * @param format
     * @param options
     * @param password
     * @param folder
     * @param storage
     * @param fontsFolder
     * @param slides
     */
    startDownloadPresentation(name: string, format: model.ExportFormat, options?: model.ExportOptions, password?: string, folder?: string, storage?: string, fontsFolder?: string, slides?: Array<number>): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param files Files to merge
     * @param request
     * @param storage
     */
    startMerge(files?: Array<Readable>, request?: model.OrderedMergeRequest, storage?: string): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param outPath
     * @param files Files to merge
     * @param request
     * @param storage
     */
    startMergeAndSave(outPath: string, files?: Array<Readable>, request?: model.OrderedMergeRequest, storage?: string): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param name
     * @param format
     * @param outPath
     * @param options
     * @param password
     * @param folder
     * @param storage
     * @param fontsFolder
     * @param slides
     */
    startSavePresentation(name: string, format: model.ExportFormat, outPath: string, options?: model.ExportOptions, password?: string, folder?: string, storage?: string, fontsFolder?: string, slides?: Array<number>): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param name
     * @param format
     * @param options
     * @param width
     * @param height
     * @param from
     * @param to
     * @param destFolder
     * @param password
     * @param folder
     * @param storage
     * @param fontsFolder
     */
    startSplit(name: string, format: model.SlideExportFormat, options?: model.ExportOptions, width?: number, height?: number, from?: number, to?: number, destFolder?: string, password?: string, folder?: string, storage?: string, fontsFolder?: string): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
    /**
     *
     * @param document Document data.
     * @param format
     * @param destFolder
     * @param width
     * @param height
     * @param from
     * @param to
     * @param password
     * @param storage
     * @param fontsFolder
     * @param options
     */
    startUploadAndSplit(document: Readable, format: model.SlideExportFormat, destFolder?: string, width?: number, height?: number, from?: number, to?: number, password?: string, storage?: string, fontsFolder?: string, options?: model.ExportOptions): Promise<{
        response: http.ServerResponse;
        body: string;
    }>;
}
