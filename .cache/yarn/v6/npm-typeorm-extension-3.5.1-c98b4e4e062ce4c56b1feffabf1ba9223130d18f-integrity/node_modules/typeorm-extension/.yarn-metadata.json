{
  "manifest": {
    "name": "typeorm-extension",
    "version": "3.5.1",
    "description": "A library to create/drop database, simple seeding data sets, ...",
    "author": {
      "name": "Peter Placzek",
      "email": "contact@tada5hi.net",
      "url": "https://github.com/tada5hi"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/tada5hi/typeorm-extension.git"
    },
    "main": "dist/index.cjs",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      },
      "./bin/*": "./bin/*"
    },
    "files": [
      "bin",
      "dist"
    ],
    "engines": {
      "node": ">=14.0.0"
    },
    "scripts": {
      "build:types": "tsc --emitDeclarationOnly",
      "build:js": "rollup -c",
      "build": "rimraf dist && rimraf bin && npm run build:types && npm run build:js",
      "build:watch": "npm run build -- --watch",
      "commit": "npx git-cz",
      "test": "jest --config ./test/jest.config.js",
      "test:coverage": "cross-env NODE_ENV=test jest --config ./test/jest.config.js --coverage",
      "lint": "eslint --ext .js,.vue,.ts ./src ./test",
      "lint:fix": "npm run lint -- --fix",
      "docs:dev": "vitepress dev docs --temp .temp",
      "docs:build": "vitepress build docs --temp .temp",
      "docs:help": "vitepress --help",
      "prepare": "husky install"
    },
    "keywords": [
      "database",
      "create",
      "drop",
      "api",
      "json-api",
      "jsonapi",
      "migration",
      "seeder",
      "seeding",
      "cli"
    ],
    "bin": {
      "typeorm-extension": "bin/cli.cjs",
      "typeorm-extension-esm": "bin/cli.mjs"
    },
    "license": "MIT",
    "dependencies": {
      "@faker-js/faker": "^8.4.1",
      "consola": "^3.2.3",
      "envix": "^1.5.0",
      "locter": "^2.1.0",
      "pascal-case": "^3.1.2",
      "rapiq": "^0.9.0",
      "reflect-metadata": "^0.2.2",
      "smob": "^1.5.0",
      "yargs": "^17.7.2"
    },
    "peerDependencies": {
      "typeorm": "~0.3.0"
    },
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^15.2.3",
      "@swc/core": "^1.4.13",
      "@tada5hi/commitlint-config": "^1.2.0",
      "@tada5hi/eslint-config-typescript": "^1.2.10",
      "@tada5hi/semantic-release": "^0.3.1",
      "@tada5hi/tsconfig": "^0.5.1",
      "@types/jest": "^27.5.0",
      "@types/node": "^20.12.6",
      "@types/yargs": "^17.0.32",
      "better-sqlite3": "^9.4.5",
      "cross-env": "^7.0.3",
      "eslint": "^8.56.0",
      "husky": "^9.0.11",
      "jest": "^27.5.1",
      "rollup": "^4.14.1",
      "semantic-release": "^22.0.12",
      "ts-jest": "^27.1.4",
      "typeorm": "^0.3.20",
      "typescript": "^4.9.5",
      "vitepress": "^1.1.0",
      "vue": "^3.4.9"
    },
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-typeorm-extension-3.5.1-c98b4e4e062ce4c56b1feffabf1ba9223130d18f-integrity/node_modules/typeorm-extension/package.json",
    "readmeFilename": "README.MD",
    "readme": "# Typeorm Extension ðŸš€\n\n[![npm version](https://badge.fury.io/js/typeorm-extension.svg)](https://badge.fury.io/js/typeorm-extension)\n[![codecov](https://codecov.io/gh/Tada5hi/typeorm-extension/branch/master/graph/badge.svg?token=4KNSG8L13V)](https://codecov.io/gh/Tada5hi/typeorm-extension)\n[![Master Workflow](https://github.com/Tada5hi/typeorm-extension/workflows/CI/badge.svg)](https://github.com/Tada5hi/typeorm-extension)\n[![Known Vulnerabilities](https://snyk.io/test/github/Tada5hi/typeorm-extension/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Tada5hi/typeorm-extension?targetFile=package.json)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&logoColor=white)](https://conventionalcommits.org)\n\nThis is a library to\n- `create`, `drop` & `seed` the (default-) database ðŸ”¥\n- manage one or many data-source instances ðŸ‘»\n- parse & apply query parameters (extended **JSON:API** specification & fully typed) to:\n    - `filter` (related) resources according to one or more criteria,\n    - reduce (related) resource `fields`,\n    - `include` related resources,\n    - `sort` resources according to one or more criteria,\n    - limit the number of resources returned in a response by `page` limit & offset\n\n> **Warning**\n> This readme includes the documentation for the upcoming version 3.\n> This is the [link](https://github.com/tada5hi/typeorm-extension/tree/v2) for the v2.\n\n**Table of Contents**\n- [Installation](#installation)\n- [Documentation](#documentation)\n- [Usage](#usage)\n  - [CLI](#cli)\n    - [Options](#cli-options)\n    - [Examples](#cli-examples)\n  - [Database](#database)\n    - [Create](#create)\n    - [Drop](#drop)\n  - [Instances](#instances)\n    - [Single](#single)\n    - [Multiple](#multiple)\n  - [Seeding](#seeding)\n    - [Configuration](#configuration)\n    - [Entity](#entity)\n    - [Factory](#factory)\n    - [Seed](#seed)\n    - [Execute](#execute)\n  - [Query](#query)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n```bash\nnpm install typeorm-extension --save\n```\n\n## Documentation\n\nTo read the docs, visit [https://typeorm-extension.tada5hi.net](https://typeorm-extension.tada5hi.net)\n\n## Usage\n\n### CLI\n\nIf you use esm, the executable must be changed from `typeorm-extension` to `typeorm-extension-esm`.\nThe following commands are available in the terminal:\n- `typeorm-extension db:create` to create the database\n- `typeorm-extension db:drop` to drop the database\n- `typeorm-extension seed:run` seed the database\n- `typeorm-extension seed:create` to create a new seeder\n\nIf the application has not yet been built or is to be tested with ts-node, the commands can be adapted as follows:\n\n```\n\"scripts\": {\n    \"db:create\": \"ts-node ./node_modules/typeorm-extension/bin/cli.cjs db:create\",\n    \"db:drop\": \"ts-node ./node_modules/typeorm-extension/bin/cli.cjs db:drop\",\n    \"seed:run\": \"ts-node ./node_modules/typeorm-extension/bin/cli.cjs seed:run\",\n    \"seed:create\": \"ts-node ./node_modules/typeorm-extension/bin/cli.cjs seed:create\"\n}\n```\nTo test the application in the context of an esm project, the following adjustments must be made:\n- executable `ts-node` to `ts-node-esm`\n- library path `cli.cjs` to `cli.mjs`\n\nRead the [Seeding Configuration](#configuration) section to find out how to specify the path,\nfor the seeder- & factory-location.\n\n#### CLI Options\n\n| Option                  | Commands                                           | Default         | Description                                                                                                                                                                                                                              |\n|-------------------------|----------------------------------------------------|-----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `--root` or `-r`        | `db:create`, `db:drop`, `seed:create` & `seed:run` | `process.cwd()` | Root directory of the project.                                                                                                                                                                                                           |\n| `--dataSource` or `-d`  | `db:create`, `db:drop` & `seed:run`                | `data-source`   | Name (or relative path incl. name) of the data-source file.                                                                                                                                                                              |\n| `--synchronize` or `-s` | `db:create` & `db:drop`                            | `yes`           | Synchronize the database schema after database creation. Options: `yes` or `no`.                                                                                                                                                         |\n| `--initialDatabase`     | `db:create`                                        | `undefined`     | Specify the initial database to connect to. This option is only relevant for the `postgres` driver, which must always to connect to a database. If no database is provided, the database name will be equal to the connection user name. |\n| `--name`                | `seed:create` & `seed:run`                         | `undefined`     | Name (or relative path incl. name) of the seeder.                                                                                                                                                                                        |\n| `--preserveFilePaths`   | `db:create`, `db:drop`, `seed:create` & `seed:run` | `false`         | This option indicates if file paths should be preserved and treated as if the just-in-time compilation environment is detected.                                                                                                          |\n\n#### CLI Examples\n**`Database Create`**\n```shell\nts-node ./node_modules/typeorm-extension/bin/cli.cjs db:create  -d src/data-source.ts\n```\n**`Database Drop`**\n```shell\nts-node ./node_modules/typeorm-extension/bin/cli.cjs db:drop  -d src/data-source.ts\n```\n\n**`Seed Run`**\n```shell\nts-node ./node_modules/typeorm-extension/bin/cli.cjs seed:run  -d src/data-source.ts\n```\n\n**`Seed Run Explicit`**\n```shell\nts-node ./node_modules/typeorm-extension/bin/cli.cjs seed:run  -d src/data-source.ts --name src/database/seeds/user.ts\n```\n\n**`Seed Create`**\n```shell\nts-node ./node_modules/typeorm-extension/bin/cli.cjs seed:create  --name src/database/seeds/user.ts\n```\n\n### Database\nAn alternative to the CLI variant, is to `create` the database in the code base during the runtime of the application.\nTherefore, provide the `DataSourceOptions` for the DataSource manually, or let it be created automatically:\n\n#### Create\n**`Example #1`**\n```typescript\nimport { DataSource, DataSourceOptions } from 'typeorm';\nimport { createDatabase } from 'typeorm-extension';\n\n(async () => {\n    const options: DataSourceOptions = {\n        type: 'better-sqlite',\n        database: 'db.sqlite'\n    };\n\n    // Create the database with specification of the DataSource options\n    await createDatabase({\n        options\n    });\n\n    const dataSource = new DataSource(options);\n    await dataSource.initialize();\n    // do something with the DataSource\n})();\n```\n\n**`Example #2`**\n```typescript\nimport {\n    buildDataSourceOptions,\n    createDatabase\n} from 'typeorm-extension';\n\n(async () => {\n    const options = await buildDataSourceOptions();\n\n    // modify options\n\n    // Create the database with specification of the DataSource options\n    await createDatabase({\n        options\n    });\n\n    const dataSource = new DataSource(options);\n    await dataSource.initialize();\n    // do something with the DataSource\n})();\n```\n\n**`Example #3`**\n\nIt is also possible to let the library automatically search for the data-source under the hood.\nTherefore, it will search by default for a `data-source.{ts,js}` file in the following directories:\n- `{src,dist}/db/`\n- `{src,dist}/database`\n- `{src,dist}`\n\n```typescript\nimport { createDatabase } from 'typeorm-extension';\n\n(async () => {\n    // Create the database without specifying it manually\n    await createDatabase();\n})();\n```\n\n\nTo get a better overview and understanding of the\n[createDatabase](https://typeorm-extension.tada5hi.net/guide/database-api-reference.html#createdatabase)\nfunction, check out the documentation.\n\n#### Drop\n\n**`Example #1`**\n```typescript\nimport {\n    DataSource,\n    DataSourceOptions\n} from 'typeorm';\nimport { dropDatabase } from 'typeorm-extension';\n\n(async () => {\n    const options: DataSourceOptions = {\n        type: 'better-sqlite',\n        database: 'db.sqlite'\n    };\n\n    // Drop the database with specification of the DataSource options\n    await dropDatabase({\n        options\n    });\n})();\n```\n\n**`Example #2`**\n```typescript\nimport {\n    buildDataSourceOptions,\n    dropDatabase\n} from 'typeorm-extension';\n\n(async () => {\n    const options = await buildDataSourceOptions();\n\n    // modify options\n\n    // Drop the database with specification of the DataSource options\n    await dropDatabase({\n        options\n    });\n})();\n```\n\n**`Example #3`**\n\nIt is also possible to let the library automatically search for the data-source under the hood.\nTherefore, it will search by default for a `data-source.{ts,js}` file in the following directories:\n- `{src,dist}/db/`\n- `{src,dist}/database`\n- `{src,dist}`\n\n```typescript\nimport { dropDatabase } from 'typeorm-extension';\n\n(async () => {\n    // Drop the database without specifying it manually\n    await dropDatabase();\n})();\n```\n\nTo get a better overview and understanding of the\n[dropDatabase](https://typeorm-extension.tada5hi.net/guide/database-api-reference.html#dropDatabase)\nfunction, check out the documentation.\n\n### Instances\n\n#### Single\n\nThe default DataSource instance can be acquired, by not providing any alias at all or using the key `default`.\nIf no DataSource instance or DataSourceOptions object is deposited initially the method will attempt to locate and load\nthe DataSource file and initialize itself from there.\n\n```typescript\nimport { useDataSource } from 'typeorm-extension';\n\n(async () => {\n    const dataSource : DataSource = await useDataSource();\n})();\n```\n\nReference(s):\n- [setDataSource](https://typeorm-extension.tada5hi.net/guide/datasource-api-reference.html#setdatasource)\n- [useDataSource](https://typeorm-extension.tada5hi.net/guide/datasource-api-reference.html#usedatasource)\n\n#### Multiple\n\nIt is also possible to manage multiple DataSource instances.\nTherefore, each additional DataSource must be registered under a different alias.\nThis can be done by either setting the DataSource instance or the DataSourceOptions object for the given alias.\n\n```typescript\nimport { DataSource, DataSourceOptions } from 'typeorm';\nimport { setDataSource, useDataSource } from 'typeorm-extension';\n\n(async () => {\n    const secondDataSourceOptions : DataSourceOptions = {\n        // ...\n    };\n\n    const dataSource = new DataSource(secondDataSourceOptions);\n    setDataSource(dataSource, 'second');\n\n    const instance : DataSource = await useDataSource('second');\n})();\n```\n\nReference(s):\n- [setDataSource](https://typeorm-extension.tada5hi.net/guide/datasource-api-reference.html#setdatasource)\n- [setDataSourceOptions](https://typeorm-extension.tada5hi.net/guide/datasource-api-reference.html#setdatasourceoptions)\n\n### Seeding\n\nSeeding the database is fairly easy and can be achieved by following the steps below:\n- `Configuration`: Specify the seed and factory location by path or object.\n- `Entity`: Define one or more entities.\n- `Factory` (optional): Define a factory for each entity for which data should be automatically generated.\n- `Seed`: Define one or more seed classes to populate the database with an initial data set or generated data by a factory.\n- `Execute`: Run the seeder(s) with the CLI or in the code base.\n\n#### Configuration\n\nSeeder paths are configured as **glob patterns**, making it easy\nto match all the factory/seeder files in your project without configuration effort:\n- use `*` to match anything expect slashes and hidden files\n- use `**` to match zero or more directories\n- use comma separate values between `{}` to match against a list of options\n\nCheck out the [glob](https://www.npmjs.com/package/glob) documentation for other supported pattern features.\nIt is important to use the posix/unix path separator (/) because\nthe Windows path separator (\\\\) is used to match paths with literal global pattern characters.\n\nThe seeder- & factory-location, can be specified via:\n- `environment` variable(s)\n- extended `data-source.ts` file\n- `runSeeder(s)` method options parameter, in case of a direct code base usage\n\nThe following values are assumed by default:\n- factory path: `src/database/factories/**/*{.ts,.js}`\n- seed path: `src/database/seeds/**/*{.ts,.js}`\n\nNote: When seeder paths are configured as **glob patterns**, the paths are resolved and sorted in alphabetical order using filenames. This helps to ensure that the seeders are executed in the correct order.\n\nIt is possible to define that a seeder is only executed once.\nThis can either be set globally using the seedTacking option or locally using the track property of a seeder class.\n\n`data-source.ts`\n\n```typescript\nimport { DataSource, DataSourceOptions } from 'typeorm';\nimport { SeederOptions } from 'typeorm-extension';\n\nconst options: DataSourceOptions & SeederOptions = {\n    type: 'better-sqlite',\n    database: 'db.sqlite',\n\n    seeds: ['src/database/seeds/**/*{.ts,.js}'],\n    seedTracking: false,\n    factories: ['src/database/factories/**/*{.ts,.js}'],\n};\n\nexport const dataSource = new DataSource(options);\n```\n\n`runSeeder(s)`\n\n```typescript\nimport { DataSource, DataSourceOptions } from 'typeorm';\nimport { runSeeders, SeederOptions } from 'typeorm-extension';\n\n(async () => {\n    const options: DataSourceOptions = {\n        type: 'better-sqlite',\n        database: 'db.sqlite',\n    };\n\n    const dataSource = new DataSource(options);\n    await dataSource.initialize();\n\n    runSeeders(dataSource, {\n        seeds: ['src/database/seeds/**/*{.ts,.js}'],\n        factories: ['src/database/factories/**/*{.ts,.js}']\n    });\n})();\n```\n\n#### Entity\nTo get started, define one or more entities.\n\n**`user.ts`**\n```typescript\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column\n} from 'typeorm';\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    email: string\n}\n```\n\n#### Factory\nTo create entities with random data, create a factory for each desired entity.\nThe definition of a factory is **optional**.\n\nThe factory callback provides an instance of the [faker](https://fakerjs.dev/guide/) library as function argument,\nto populate the entity with random data.\n\n**`user.factory.ts`**\n```typescript\nimport { setSeederFactory } from 'typeorm-extension';\nimport { User } from './user';\n\nexport default setSeederFactory(User, (faker) => {\n    const user = new User();\n    user.firstName = faker.name.firstName('male');\n    user.lastName = faker.name.lastName('male');\n    user.email = faker.internet.email(user.firstName, user.lastName);\n\n    return user;\n})\n```\n\n#### Seed\nAnd last but not least, create a seeder. The seeder can be called by the cli command `seed` or in the codebase\nby using the function `runSeeder`.\nA seeder class only requires one method, called `run` and provides the arguments `dataSource` & `factoryManager`.\n\n**`user.seeder.ts`**\n\nA seeder class must implement the [Seeder](https://typeorm-extension.tada5hi.net/guide/seeding-api-reference.html) interface, and could look like this:\n\n```typescript\nimport { Seeder, SeederFactoryManager } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { User } from './user';\n\nexport default class UserSeeder implements Seeder {\n    /**\n     * Track seeder execution.\n     *\n     * Default: false\n     */\n    track = false;\n\n    public async run(\n        dataSource: DataSource,\n        factoryManager: SeederFactoryManager\n    ): Promise<any> {\n        const repository =  dataSource.getRepository(User);\n        await repository.insert([\n            {\n                firstName: 'Caleb',\n                lastName: 'Barrows',\n                email: 'caleb.barrows@gmail.com'\n            }\n        ]);\n\n        // ---------------------------------------------------\n\n        const userFactory = await factoryManager.get(User);\n        // save 1 factory generated entity, to the database\n        await userFactory.save();\n\n        // save 5 factory generated entities, to the database\n        await userFactory.saveMany(5);\n    }\n}\n```\n\n#### Execute\n\nPopulate the database from the code base:\n\n```typescript\nimport { DataSource, DataSourceOptions } from 'typeorm';\nimport { runSeeders, SeederOptions } from 'typeorm-extension';\nimport { User } from 'user';\n\n(async () => {\n    const options: DataSourceOptions & SeederOptions = {\n        type: 'better-sqlite',\n        database: 'db.sqlite',\n        entities: [User],\n\n        seeds: ['./*.seeder.ts'],\n        factories: ['./*.factory.ts']\n    };\n\n    const dataSource = new DataSource(options);\n    await dataSource.initialize();\n\n    await runSeeders(dataSource);\n})();\n```\n\nPopulate the database by explicit definitions from the codebase.\n\n```typescript\nimport { DataSource, DataSourceOptions } from 'typeorm';\nimport { runSeeders, SeederOptions } from 'typeorm-extension';\nimport { User } from 'user';\nimport UserSeeder from 'user.seeder';\nimport UserFactory from 'user.factory';\n\n(async () => {\n    const options: DataSourceOptions & SeederOptions = {\n        type: 'better-sqlite',\n        database: 'db.sqlite',\n        entities: [User],\n\n        seeds: [UserSeeder],\n        factories: [UserFactory]\n    };\n\n    const dataSource = new DataSource(options);\n    await dataSource.initialize();\n\n    await runSeeders(dataSource);\n})();\n```\n\n### Query\nThe query submodule enables query parameter (fields, filter, ...) values to be build, parsed & validated.\nTherefore, the [rapiq](https://www.npmjs.com/package/rapiq) library is used under the hood.\n\nThe query parameter options (allowed, default, ...) are fully typed ðŸ”¥ and depend on the (nested-) properties of the target entity passed to\nthe typeorm query builder.\n\nFor explanation proposes,\ntwo simple entities with a relation between them are declared to demonstrate the usage of the query utils:\n\n```typescript\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    OneToOne,\n    JoinColumn\n} from 'typeorm';\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn({unsigned: true})\n    id: number;\n\n    @Column({type: 'varchar', length: 30})\n    @Index({unique: true})\n    name: string;\n\n    @Column({type: 'varchar', length: 255, default: null, nullable: true})\n    email: string;\n\n    @OneToOne(() => Profile)\n    profile: Profile;\n}\n\n@Entity()\nexport class Profile {\n    @PrimaryGeneratedColumn({unsigned: true})\n    id: number;\n\n    @Column({type: 'varchar', length: 255, default: null, nullable: true})\n    avatar: string;\n\n    @Column({type: 'varchar', length: 255, default: null, nullable: true})\n    cover: string;\n\n    @OneToOne(() => User)\n    @JoinColumn()\n    user: User;\n}\n```\n\nIn this example [routup](https://www.npmjs.com/package/routup) and the\nplugin [@routup/query](https://www.npmjs.com/package/@routup/query) is used to handle HTTP requests,\nbut there is also a guide available for [express](https://typeorm-extension.tada5hi.net/guide/query.html).\n\n```typescript\nimport { createServer } from 'node:http';\nimport type { Request, Response } from 'routup';\nimport { createNodeDispatcher, Router } from 'routup';\nimport { createHandler, useQuery } from '@routup/query';\n\nimport {\n    applyQuery,\n    useDataSource\n} from 'typeorm-extension';\n\nconst router = new Router();\nrouter.use(createHandler());\n\n/**\n * Get many users.\n *\n * Request example\n * - url: /users?page[limit]=10&page[offset]=0&include=profile&filter[id]=1&fields[user]=id,name\n *\n * Return Example:\n * {\n *     data: [\n *         {id: 1, name: 'tada5hi', profile: {avatar: 'avatar.jpg', cover: 'cover.jpg'}}\n *      ],\n *     meta: {\n *        total: 1,\n *        limit: 20,\n *        offset: 0\n *    }\n * }\n * @param req\n * @param res\n */\nrouter.get('users', async (req: Request, res: Response) => {\n    const dataSource = await useDataSource();\n    const repository = dataSource.getRepository(User);\n    const query = repository.createQueryBuilder('user');\n\n    // -----------------------------------------------------\n\n    const { pagination } = applyQuery(query, useQuery(req), {\n        defaultAlias: 'user',\n        fields: {\n            // porfile fields can only be included,\n            // if the relation 'profile' is included.\n            allowed: ['id', 'name', 'profile.id', 'profile.avatar'],\n        },\n        filters: {\n            // porfile.id can only be used as a filter,\n            // if the relation 'profile' is included.\n            allowed: ['id', 'name', 'profile.id'],\n        },\n        pagination: {\n            // only allow to select 20 items at maximum.\n            maxLimit: 20\n        },\n        relations: {\n            allowed: ['profile']\n        },\n        sort: {\n            // profile.id can only be used as sorting key,\n            // if the relation 'profile' is included.\n            allowed: ['id', 'name', 'profile.id']\n        },\n    });\n\n    // -----------------------------------------------------\n\n    const [entities, total] = await query.getManyAndCount();\n\n    return {\n        data: entities,\n        meta: {\n            total,\n            ...pagination\n        }\n    };\n});\n\nconst server = createServer(createNodeDispatcher(router));\nserver.listen(80);\n```\n\n## Contributing\n\nBefore starting to work on a pull request, it is important to review the guidelines for\n[contributing](./CONTRIBUTING.md) and the [code of conduct](./CODE_OF_CONDUCT.md).\nThese guidelines will help to ensure that contributions are made effectively and are accepted.\n\n## License\n\nMade with ðŸ’š\n\nPublished under [MIT License](./LICENSE).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021-2024 Peter Placzek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/typeorm-extension/-/typeorm-extension-3.5.1.tgz#c98b4e4e062ce4c56b1feffabf1ba9223130d18f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/typeorm-extension/-/typeorm-extension-3.5.1.tgz",
    "hash": "c98b4e4e062ce4c56b1feffabf1ba9223130d18f",
    "integrity": "sha512-gykF1eBattSIt+F0+134c+j+AFODYCb/6uIjmFCNzAoc63UW5j7d25JnzDah10viWnDi99BY03UUIxRcQWcR+w==",
    "registry": "npm",
    "packageName": "typeorm-extension",
    "cacheIntegrity": "sha512-gykF1eBattSIt+F0+134c+j+AFODYCb/6uIjmFCNzAoc63UW5j7d25JnzDah10viWnDi99BY03UUIxRcQWcR+w== sha1-yYtOTgYs5MVrH+/6vxupIjEw0Y8="
  },
  "registry": "npm",
  "hash": "c98b4e4e062ce4c56b1feffabf1ba9223130d18f"
}