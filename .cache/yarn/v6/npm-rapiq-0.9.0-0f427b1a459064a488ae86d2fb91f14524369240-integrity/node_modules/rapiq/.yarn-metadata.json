{
  "manifest": {
    "name": "rapiq",
    "version": "0.9.0",
    "description": "A tiny library which provides utility types/functions for request and response query handling.",
    "main": "dist/index.cjs",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      }
    },
    "files": [
      "dist/"
    ],
    "scripts": {
      "build:types": "tsc --emitDeclarationOnly",
      "build:js": "rollup -c",
      "build": "rimraf dist && npm run build:types && npm run build:js",
      "commit": "npx git-cz",
      "test": "cross-env NODE_ENV=test jest --config ./test/jest.config.js",
      "test:coverage": "cross-env NODE_ENV=test jest --config ./test/jest.config.js --coverage",
      "lint": "eslint --ext .js,.ts ./src",
      "lint:fix": "npm run lint -- --fix",
      "docs:dev": "vitepress dev docs --temp .temp",
      "docs:build": "vitepress build docs --temp .temp",
      "docs:help": "vitepress --help",
      "prepare": "npx husky install",
      "prepublishOnly": "npm run build"
    },
    "author": {
      "name": "Peter Placzek",
      "email": "contact@tada5hi.net",
      "url": "https://github.com/tada5hi"
    },
    "license": "MIT",
    "keywords": [
      "query",
      "json",
      "json-api",
      "api",
      "rest",
      "api-utils",
      "include",
      "pagination",
      "sort",
      "fields",
      "filter",
      "relations",
      "typescript"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Tada5hi/rapiq.git"
    },
    "bugs": {
      "url": "https://github.com/Tada5hi/rapiq/issues"
    },
    "homepage": "https://github.com/Tada5hi/rapiq#readme",
    "dependencies": {
      "ebec": "^1.1.0",
      "smob": "^1.4.0"
    },
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^15.1.0",
      "@swc/core": "^1.3.67",
      "@swc/jest": "^0.2.26",
      "@tada5hi/commitlint-config": "^1.1.0",
      "@tada5hi/eslint-config-typescript": "^1.2.0",
      "@tada5hi/semantic-release": "^0.2.0",
      "@tada5hi/tsconfig": "^0.5.0",
      "@types/jest": "^29.5.2",
      "@types/node": "^20.2.5",
      "cross-env": "^7.0.3",
      "eslint": "^8.44.0",
      "husky": "^8.0.3",
      "jest": "^29.5.0",
      "rimraf": "^5.0.1",
      "rollup": "^3.26.0",
      "semantic-release": "^19.0.5",
      "typescript": "^5.1.6",
      "vitepress": "^1.0.0-beta.5",
      "vue": "^3.3.3"
    },
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-rapiq-0.9.0-0f427b1a459064a488ae86d2fb91f14524369240-integrity/node_modules/rapiq/package.json",
    "readmeFilename": "README.MD",
    "readme": "# rapiq ðŸŒˆ\n\n[![npm version](https://badge.fury.io/js/rapiq.svg)](https://badge.fury.io/js/rapiq)\n[![main](https://github.com/Tada5hi/rapiq/actions/workflows/main.yml/badge.svg)](https://github.com/Tada5hi/rapiq/actions/workflows/main.yml)\n[![codecov](https://codecov.io/gh/tada5hi/rapiq/branch/master/graph/badge.svg?token=QFGCsHRUax)](https://codecov.io/gh/tada5hi/rapiq)\n[![Known Vulnerabilities](https://snyk.io/test/github/Tada5hi/rapiq/badge.svg)](https://snyk.io/test/github/Tada5hi/rapiq)\n[![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)\n\nRapiq (**R**est **Api** **Q**uery) is a library to build an efficient interface between client- & server-side applications.\nIt defines a scheme for the request, but **not** for the response.\n\n**Table of Contents**\n\n- [Installation](#installation)\n- [Documentation](#documentation)\n- [Parameters](#parameters)\n- [Usage](#usage)\n- [License](#license)\n\n## Installation\n\n```bash\nnpm install rapiq --save\n```\n## Documentation\n\nTo read the docs, visit [https://rapiq.tada5hi.net](https://rapiq.tada5hi.net)\n\n## Parameters\n\n- `fields`\n    - Description: Return only specific resource fields or extend the default selection.\n    - URL-Parameter: **fields**\n- `filters`\n    - Description: Filter the resources, according to specific criteria.\n    - URL-Parameter: **filter**\n- `relations`\n    - Description: Include related resources of the primary resource.\n    - URL-Parameter: **include**\n- `pagination`\n    - Description: Limit the number of resources returned from the entire collection.\n    - URL-Parameter: **page**\n- `sort`\n    - Description: Sort the resources according to one or more keys in asc/desc direction.\n    - URL-Parameter: **sort**\n\nIt is based on the [JSON-API](https://jsonapi.org/format/) specification.\n\n## Usage\n\nThis is a small outlook on how to use the library. For detailed explanations and extended examples,\nread the [docs](https://rapiq.tada5hi.net).\n\n### Build ðŸ”§\n\nThe first step is to construct a [BuildInput](https://rapiq.tada5hi.net/guide/build-api-reference#buildinput) object for a generic Record `<T>`.\nPass the object to the [buildQuery](https://rapiq.tada5hi.net/guide/build-api-reference#buildquery) method to convert it to a transportable string.\n\nThe `BuildInput<T>` can contain a configuration for each\n[Parameter](https://rapiq.tada5hi.net/guide/parameter-api-reference.md#parameter)/\n[URLParameter](https://rapiq.tada5hi.net/guide/parameter-api-reference.md#urlparameter).\n- [Fields](https://rapiq.tada5hi.net/guide/fields-api-reference.md#fieldsbuildinput): `FieldsBuildInput<T>`\n- [Filter(s)](https://rapiq.tada5hi.net/guide/filters-api-reference.md#filtersbuildinput): `FiltersBuildInput<T>`\n- [Pagination](https://rapiq.tada5hi.net/guide/pagination-api-reference.md#paginationbuildinput): `PaginationBuildInput<T>`\n- [Relations](https://rapiq.tada5hi.net/guide/relations-api-reference.md#relationsbuildinput): `RelationsBuildInput<T>`\n- [Sort](https://rapiq.tada5hi.net/guide/sort-api-reference.md#sortbuildinput): `SortBuildInput<T>`\n\n> **NOTE**: Check out the API-Reference of each parameter for acceptable input formats and examples.\n\nAfter building, the string can be passed to a backend application as http query string argument.\nThe backend application can process the request, by [parsing](https://rapiq.tada5hi.net/guide/parse.md) the query string.\n\n#### Example\n\nThe following example is based on the assumption, that the following packages are installed:\n- [express](https://www.npmjs.com/package/express)\n- [typeorm](https://www.npmjs.com/package/typeorm)\n- [typeorm-extension](https://www.npmjs.com/package/typeorm-extension)\n\nIt should give an insight on how to use this library.\nTherefore, a type which will represent a `User` and a method `getAPIUsers` are defined.\nThe method should perform a request to the resource API to receive a collection of entities.\n\n```typescript\nimport axios from \"axios\";\nimport {\n    buildQuery,\n    BuildInput\n} from \"rapiq\";\n\nexport type Realm = {\n    id: string,\n    name: string,\n    description: string,\n}\n\nexport type Item = {\n    id: string,\n    realm: Realm,\n    user: User\n}\n\nexport type User = {\n    id: number,\n    name: string,\n    email: string,\n    age: number,\n    realm: Realm,\n    items: Item[]\n}\n\ntype ResponsePayload = {\n    data: User[],\n    meta: {\n        limit: number,\n        offset: number,\n        total: number\n    }\n}\n\nconst record: BuildInput<User> = {\n    pagination: {\n        limit: 20,\n        offset: 10\n    },\n    filters: {\n        id: 1\n    },\n    fields: ['id', 'name'],\n    sort: '-id',\n    relations: ['realm']\n};\n\nconst query = buildQuery(record);\n// console.log(query);\n// ?filter[id]=1&fields=id,name&page[limit]=20&page[offset]=10&sort=-id&include=realm\n\nasync function getAPIUsers(\n    record: BuildInput<User>\n): Promise<ResponsePayload> {\n    const response = await axios.get('users' + buildQuery(record));\n\n    return response.data;\n}\n\n(async () => {\n    let response = await getAPIUsers(record);\n\n    // do something with the response :)\n})();\n```\n\nThe next [section](#parse-) will describe, how to parse the query string on the backend side.\n\n### Parse ðŸ”Ž\n\nThe last step of the whole process is to parse the transpiled query string, to an efficient data structure.\nThe result object (`ParseOutput`) can contain an output for each\n[Parameter](https://rapiq.tada5hi.net/guide/parameter-api-reference.md#parameter)/\n[URLParameter](https://rapiq.tada5hi.net/guide/parameter-api-reference.md#urlparameter).\n- [Fields](https://rapiq.tada5hi.net/guide/fields-api-reference.md#fieldsparseoutput): `FieldsParseOutput<T>`\n- [Filter(s)](https://rapiq.tada5hi.net/guide/filters-api-reference.md#filtersparseoutput): `FiltersParseOutput<T>`\n- [Pagination](https://rapiq.tada5hi.net/guide/pagination-api-reference.md#paginationparseoutput): `PaginationParseOutput<T>`\n- [Relations](https://rapiq.tada5hi.net/guide/relations-api-reference.md#relationsparseoutput): `RelationsParseOutput<T>`\n- [Sort](https://rapiq.tada5hi.net/guide/sort-api-reference.md#sortparseoutput): `SortParseOutput<T>`\n\n> **NOTE**: Check out the API-Reference of each parameter for output formats and examples.\n\n#### Example\n\nThe following example is based on the assumption, that the following packages are installed:\n- [express](https://www.npmjs.com/package/express)\n- [typeorm](https://www.npmjs.com/package/typeorm)\n- [typeorm-extension](https://www.npmjs.com/package/typeorm-extension)\n\nFor explanation purposes, three simple entities with relations between them are declared to demonstrate\nthe usage on the backend side.\n\n**`entities.ts`**\n```typescript\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    OneToMany,\n    JoinColumn,\n    ManyToOne\n} from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn({unsigned: true})\n    id: number;\n\n    @Column({type: 'varchar', length: 30})\n    @Index({unique: true})\n    name: string;\n\n    @Column({type: 'varchar', length: 255, default: null, nullable: true})\n    email: string;\n\n    @Column({type: 'int', nullable: true})\n    age: number\n\n    @ManyToOne(() => Realm, { onDelete: 'CASCADE' })\n    realm: Realm;\n\n    @OneToMany(() => User, { onDelete: 'CASCADE' })\n    items: Item[];\n}\n\n@Entity()\nexport class Realm {\n    @PrimaryColumn({ type: 'varchar', length: 36 })\n    id: string;\n\n    @Column({ type: 'varchar', length: 128, unique: true })\n    name: string;\n\n    @Column({ type: 'text', nullable: true, default: null })\n    description: string | null;\n}\n\n@Entity()\nexport class Item {\n    @PrimaryGeneratedColumn({unsigned: true})\n    id: number;\n\n    @ManyToOne(() => Realm, { onDelete: 'CASCADE' })\n    realm: Realm;\n\n    @ManyToOne(() => User, { onDelete: 'CASCADE' })\n    user: User;\n}\n```\n\n```typescript\nimport { Request, Response } from 'express';\n\nimport {\n    applyQuery,\n    useDataSource\n} from 'typeorm-extension';\n\n/**\n * Get many users.\n *\n * Request example\n * - url: /users?page[limit]=10&page[offset]=0&include=realm&filter[id]=1&fields=id,name\n *\n * @param req\n * @param res\n */\nexport async function getUsers(req: Request, res: Response) {\n    const dataSource = await useDataSource();\n    const repository = dataSource.getRepository(User);\n    const query = repository.createQueryBuilder('user');\n\n    // -----------------------------------------------------\n\n    // parse and apply data on the db query.\n    const { pagination } = applyQuery(query, req.query, {\n        defaultPath: 'user',\n        fields: {\n            allowed: ['id', 'name', 'realm.id', 'realm.name'],\n        },\n        filters: {\n            allowed: ['id', 'name', 'realm.id'],\n        },\n        relations: {\n            allowed: ['items', 'realm']\n        },\n        pagination: {\n            maxLimit: 20\n        },\n        sort: {\n            allowed: ['id', 'name', 'realm.id'],\n        }\n    });\n\n    // -----------------------------------------------------\n\n    const [entities, total] = await query.getManyAndCount();\n\n    return res.json({\n        data: {\n            data: entities,\n            meta: {\n                total,\n                ...pagination\n            }\n        }\n    });\n}\n```\n\n## License\n\nMade with ðŸ’š\n\nPublished under [MIT License](./LICENSE).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021-2022 Peter Placzek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rapiq/-/rapiq-0.9.0.tgz#0f427b1a459064a488ae86d2fb91f14524369240",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rapiq/-/rapiq-0.9.0.tgz",
    "hash": "0f427b1a459064a488ae86d2fb91f14524369240",
    "integrity": "sha512-k4oT4RarFBrlLMJ49xUTeQpa/us0uU4I70D/UEnK3FWQ4GENzei01rEQAmvPKAIzACo4NMW+YcYJ7EVfSa7EFg==",
    "registry": "npm",
    "packageName": "rapiq",
    "cacheIntegrity": "sha512-k4oT4RarFBrlLMJ49xUTeQpa/us0uU4I70D/UEnK3FWQ4GENzei01rEQAmvPKAIzACo4NMW+YcYJ7EVfSa7EFg== sha1-D0J7GkWQZKSIrobS+5HxRSQ2kkA="
  },
  "registry": "npm",
  "hash": "0f427b1a459064a488ae86d2fb91f14524369240"
}