{
  "manifest": {
    "name": "queue",
    "version": "6.0.2",
    "description": "asynchronous function queue with adjustable concurrency",
    "keywords": [
      "queue",
      "async",
      "asynchronous",
      "synchronous",
      "job",
      "task",
      "concurrency",
      "concurrent"
    ],
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "dependencies": {
      "inherits": "~2.0.3"
    },
    "devDependencies": {
      "@types/node": "*",
      "browserify": "^16.2.3",
      "coveralls": "^3.0.3",
      "istanbul": "^0.4.5",
      "standard": "^12.0.1",
      "tape": "^4.10.1",
      "tsd-check": "*",
      "typescript": "^3.3.3333"
    },
    "scripts": {
      "test": "standard && node test && tsd-check",
      "test-browser": "standard && browserify test/index.js > test/bundle.js && echo \"open test/index.html in your browser\"",
      "travis": "standard && istanbul cover test --report lcovonly && cat coverage/lcov.info | coveralls",
      "travis-ts": "tsc test/typescript.ts --m System --out /dev/null && echo 'TypeScript compilation passed.'",
      "example": "node example",
      "lint": "standard"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jessetane/queue.git"
    },
    "author": {
      "name": "Jesse Tane",
      "email": "jesse.tane@gmail.com"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-queue-6.0.2-b91525283e2315c7553d2efa18d83e76432fed65-integrity/node_modules/queue/package.json",
    "readmeFilename": "readme.md",
    "readme": "```\n   ____  __  _____  __  _____\n  / __ `/ / / / _ \\/ / / / _ \\\n / /_/ / /_/ /  __/ /_/ /  __/\n \\__, /\\__,_/\\___/\\__,_/\\___/\n   /_/\n```\nAsynchronous function queue with adjustable concurrency.\n\n[![npm](http://img.shields.io/npm/v/queue.svg?style=flat-square)](http://www.npmjs.org/queue)\n[![tests](https://img.shields.io/travis/jessetane/queue.svg?style=flat-square&branch=master)](https://travis-ci.org/jessetane/queue)\n[![coverage](https://img.shields.io/coveralls/jessetane/queue.svg?style=flat-square&branch=master)](https://coveralls.io/r/jessetane/queue)\n\nThis module exports a class `Queue` that implements most of the `Array` API. Pass async functions (ones that accept a callback or return a promise) to an instance's additive array methods. Processing begins when you call `q.start()`.\n\n## Example\n`npm run example`\n``` javascript\nvar queue = require('../')\n\nvar q = queue({ results: [] })\n\n// add jobs using the familiar Array API\nq.push(function (cb) {\n  const result = 'two'\n  cb(null, result)\n})\n\nq.push(\n  function (cb) {\n    const result = 'four'\n    cb(null, result)\n  },\n  function (cb) {\n    const result = 'five'\n    cb(null, result)\n  }\n)\n\n// jobs can accept a callback or return a promise\nq.push(function () {\n  return new Promise(function (resolve, reject) {\n    const result = 'one'\n    resolve(result)\n  })\n})\n\nq.unshift(function (cb) {\n  const result = 'one'\n  cb(null, result)\n})\n\nq.splice(2, 0, function (cb) {\n  const result = 'three'\n  cb(null, result)\n})\n\n// use the timeout feature to deal with jobs that\n// take too long or forget to execute a callback\nq.timeout = 100\n\nq.on('timeout', function (next, job) {\n  console.log('job timed out:', job.toString().replace(/\\n/g, ''))\n  next()\n})\n\nq.push(function (cb) {\n  setTimeout(function () {\n    console.log('slow job finished')\n    cb()\n  }, 200)\n})\n\nq.push(function (cb) {\n  console.log('forgot to execute callback')\n})\n\n// jobs can also override the queue's timeout\n// on a per-job basis\nfunction extraSlowJob (cb) {\n  setTimeout(function () {\n    console.log('extra slow job finished')\n    cb()\n  }, 400)\n}\n\nextraSlowJob.timeout = 500\nq.push(extraSlowJob)\n\n// jobs can also opt-out of the timeout altogether\nfunction superSlowJob (cb) {\n  setTimeout(function () {\n    console.log('super slow job finished')\n    cb()\n  }, 1000)\n}\n\nsuperSlowJob.timeout = null\nq.push(superSlowJob)\n\n// get notified when jobs complete\nq.on('success', function (result, job) {\n  console.log('job finished processing:', job.toString().replace(/\\n/g, ''))\n  console.log('The result is:', result)\n})\n\n// begin processing, get notified on end / failure\nq.start(function (err) {\n  if (err) throw err\n  console.log('all done:', q.results)\n})\n\n```\n\n## Install\n`npm install queue`\n\n_Note_: You may need to install the [`events`](https://github.com/Gozala/events) dependency if \nyour environment does not have it by default (eg. browser, react-native). \n\n## Test\n`npm test`\n`npm run test-browser`\n\n## API\n\n### `var q = queue([opts])`\nConstructor. `opts` may contain inital values for:\n* `q.concurrency`\n* `q.timeout`\n* `q.autostart`\n* `q.results`\n\n## Instance methods\n### `q.start([cb])`\ncb, if passed, will be called when the queue empties or when an error occurs.\n\n### `q.stop()`\nStops the queue. can be resumed with `q.start()`.\n\n### `q.end([err])`\nStop and empty the queue immediately.\n\n## Instance methods mixed in from `Array`\nMozilla has docs on how these methods work [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). Note that `slice` does not copy the queue.\n### `q.push(element1, ..., elementN)`\n### `q.unshift(element1, ..., elementN)`\n### `q.splice(index , howMany[, element1[, ...[, elementN]]])`\n### `q.pop()`\n### `q.shift()`\n### `q.slice(begin[, end])`\n### `q.reverse()`\n### `q.indexOf(searchElement[, fromIndex])`\n### `q.lastIndexOf(searchElement[, fromIndex])`\n\n## Properties\n### `q.concurrency`\nMax number of jobs the queue should process concurrently, defaults to `Infinity`.\n\n### `q.timeout`\nMilliseconds to wait for a job to execute its callback. This can be overridden by specifying a `timeout` property on a per-job basis.\n\n### `q.autostart`\nEnsures the queue is always running if jobs are available. Useful in situations where you are using a queue only for concurrency control.\n\n### `q.results`\nAn array to set job callback arguments on.\n\n### `q.length`\nJobs pending + jobs to process (readonly).\n\n## Events\n\n### `q.emit('start', job)`\nImmediately before a job begins to execute.\n\n### `q.emit('success', result, job)`\nAfter a job executes its callback.\n\n### `q.emit('error', err, job)`\nAfter a job passes an error to its callback.\n\n### `q.emit('timeout', continue, job)`\nAfter `q.timeout` milliseconds have elapsed and a job has not executed its callback.\n\n### `q.emit('end'[, err])`\nAfter all jobs have been processed\n\n## Releases\nThe latest stable release is published to [npm](http://npmjs.org/queue). Abbreviated changelog below:\n* [6.0](https://github.com/jessetane/queue/archive/6.0.1.tar.gz)\n  * Add `start` event before job begins (@joelgriffith)\n  * Add `timeout` property on a job to override the queue's timeout (@joelgriffith)\n* [5.0](https://github.com/jessetane/queue/archive/5.0.0.tar.gz)\n  * Updated TypeScript bindings (@Codex-)\n* [4.4](https://github.com/jessetane/queue/archive/4.4.0.tar.gz)\n  * Add results feature\n* [4.3](https://github.com/jessetane/queue/archive/4.3.0.tar.gz)\n  * Add promise support (@kwolfy)\n* [4.2](https://github.com/jessetane/queue/archive/4.2.0.tar.gz)\n  * Unref timers on end\n* [4.1](https://github.com/jessetane/queue/archive/4.1.0.tar.gz)\n  * Add autostart feature\n* [4.0](https://github.com/jessetane/queue/archive/4.0.0.tar.gz)\n  * Change license to MIT\n* [3.1.x](https://github.com/jessetane/queue/archive/3.0.6.tar.gz)\n  * Add .npmignore\n* [3.0.x](https://github.com/jessetane/queue/archive/3.0.6.tar.gz)\n  * Change the default concurrency to `Infinity`\n  * Allow `q.start()` to accept an optional callback executed on `q.emit('end')`\n* [2.x](https://github.com/jessetane/queue/archive/2.2.0.tar.gz)\n  * Major api changes / not backwards compatible with 1.x\n* [1.x](https://github.com/jessetane/queue/archive/1.0.2.tar.gz)\n  * Early prototype\n\n## License\nCopyright Â© 2014 Jesse Tane <jesse.tane@gmail.com>\n\nThis work is free. You can redistribute it and/or modify it under the\nterms of the [MIT License](https://opensource.org/licenses/MIT).\nSee LICENSE for full details.\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2014 Jesse Tane <jesse.tane@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/queue/-/queue-6.0.2.tgz#b91525283e2315c7553d2efa18d83e76432fed65",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/queue/-/queue-6.0.2.tgz",
    "hash": "b91525283e2315c7553d2efa18d83e76432fed65",
    "integrity": "sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA==",
    "registry": "npm",
    "packageName": "queue",
    "cacheIntegrity": "sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA== sha1-uRUlKD4jFcdVPS76GNg+dkMv7WU="
  },
  "registry": "npm",
  "hash": "b91525283e2315c7553d2efa18d83e76432fed65"
}