{
  "manifest": {
    "name": "cloudconvert",
    "version": "2.3.7",
    "license": "MIT",
    "description": "Official Node.js SDK for the CloudConvert API",
    "homepage": "https://github.com/cloudconvert/cloudconvert-node",
    "author": {
      "name": "Josias Montag",
      "email": "josias@montag.info"
    },
    "main": "built/lib/index.js",
    "types": "built/lib/index.d.ts",
    "module": "built/lib/CloudConvert.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/cloudconvert/cloudconvert-node.git"
    },
    "bugs": {
      "url": "https://github.com/cloudconvert/cloudconvert-node/issues"
    },
    "dependencies": {
      "axios": "^0.28.1",
      "form-data": "^4.0.0",
      "socket.io-client": "^4.6.1"
    },
    "devDependencies": {
      "@types/node": "^18.14.0",
      "@types/socket.io-client": "^1.4.36",
      "@typescript-eslint/eslint-plugin": "^5.53.0",
      "@typescript-eslint/parser": "^5.53.0",
      "chai": "^4.3.7",
      "eslint": "^8.34.0",
      "eslint-config-prettier": "^8.6.0",
      "eslint-config-typescript": "^3.0.0",
      "eslint-plugin-prettier": "^4.2.1",
      "esm": "^3.2.25",
      "mocha": "^8.4.0",
      "nock": "^13.3.0",
      "prettier": "^2.8.4",
      "typescript": "^4.9.5"
    },
    "scripts": {
      "prepare": "npm run build",
      "build": "tsc",
      "test": "mocha --require esm tests/unit",
      "test-integration": "mocha --require esm tests/integration",
      "lint": "eslint --ext .ts --ext .js --ext .json ."
    },
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-cloudconvert-2.3.7-de57622b2ac590904dcdb10b4ceda61ac798e2ab-integrity/node_modules/cloudconvert/package.json",
    "readmeFilename": "README.md",
    "readme": "# cloudconvert-node\n\nThis is the official Node.js SDK v2 for the [CloudConvert](https://cloudconvert.com/api/v2) **API v2**.\n\n[![Node.js Run Tests](https://github.com/cloudconvert/cloudconvert-node/actions/workflows/run-tests.yml/badge.svg)](https://github.com/cloudconvert/cloudconvert-node/actions/workflows/run-tests.yml)\n[![npm](https://img.shields.io/npm/v/cloudconvert.svg)](https://www.npmjs.com/package/cloudconvert)\n[![npm](https://img.shields.io/npm/dt/cloudconvert.svg)](https://www.npmjs.com/package/cloudconvert)\n\n## Installation\n\n    npm install --save cloudconvert\n\nLoad as ESM module:\n\n```js\nimport CloudConvert from 'cloudconvert';\n```\n\n... or via require:\n\n```js\nconst CloudConvert = require('cloudconvert');\n```\n\n## Creating Jobs\n\n```js\nimport CloudConvert from 'cloudconvert';\n\nconst cloudConvert = new CloudConvert('api_key');\n\nlet job = await cloudConvert.jobs.create({\n    tasks: {\n        'import-my-file': {\n            operation: 'import/url',\n            url: 'https://my-url'\n        },\n        'convert-my-file': {\n            operation: 'convert',\n            input: 'import-my-file',\n            output_format: 'pdf',\n            some_other_option: 'value'\n        },\n        'export-my-file': {\n            operation: 'export/url',\n            input: 'convert-my-file'\n        }\n    }\n});\n```\n\nYou can use the [CloudConvert Job Builder](https://cloudconvert.com/api/v2/jobs/builder) to see the available options for the various task types.\n\n## Downloading Files\n\nCloudConvert can generate public URLs for using `export/url` tasks. You can use these URLs to download output files.\n\n```js\njob = await cloudConvert.jobs.wait(job.id); // Wait for job completion\n\nconst file = this.cloudConvert.jobs.getExportUrls(job)[0];\n\nconst writeStream = fs.createWriteStream('./out/' + file.filename);\n\nhttps.get(file.url, function (response) {\n    response.pipe(writeStream);\n});\n\nawait new Promise((resolve, reject) => {\n    writeStream.on('finish', resolve);\n    writeStream.on('error', reject);\n});\n```\n\n## Uploading Files\n\nUploads to CloudConvert are done via `import/upload` tasks (see the [docs](https://cloudconvert.com/api/v2/import#import-upload-tasks)). This SDK offers a convenient upload method:\n\n```js\nconst job = await cloudConvert.jobs.create({\n    tasks: {\n        'upload-my-file': {\n            operation: 'import/upload'\n        }\n        // ...\n    }\n});\n\nconst uploadTask = job.tasks.filter(task => task.name === 'upload-my-file')[0];\n\nconst inputFile = fs.createReadStream('./file.pdf');\n\nawait cloudConvert.tasks.upload(uploadTask, inputFile, 'file.pdf');\n```\n> **Note on custom streams**:\nThe length of the stream needs to be known prior to uploading. The SDK automatically detects the file size of file-based read streams. If you are using a custom stream, you need to pass a `filesize` as fourth parameter to the `upload()` method. \n\n\n## Websocket Events\n\nThe node SDK can subscribe to events of the [CloudConvert socket.io API](https://cloudconvert.com/api/v2/socket#socket).\n\n```js\nconst job = await cloudConvert.jobs.create({ ... });\n\n// Events for the job\n// Available events: created, updated, finished, failed\ncloudConvert.jobs.subscribeEvent(job.id, 'finished', event => {\n    // Job has finished\n    console.log(event.job);\n});\n\n// Events for all tasks of the job\n// Available events: created, updated, finished, failed\ncloudConvert.jobs.subscribeTaskEvent(job.id, 'finished', event => {\n    // Task has finished\n    console.log(event.task);\n});\n```\n\nWhen you don't want to receive any events any more you should close the socket:\n\n```js\ncloudConvert.closeSocket();\n```\n\n## Webhook Signing\n\nThe node SDK allows to verify webhook requests received from CloudConvert.\n\n```js\nconst payloadString = '...'; // The JSON string from the raw request body.\nconst signature = '...'; // The value of the \"CloudConvert-Signature\" header.\nconst signingSecret = '...'; // You can find it in your webhook settings.\n\nconst isValid = cloudConvert.webhooks.verify(\n    payloadString,\n    signature,\n    signingSecret\n); // returns true or false\n```\n\n## Signed URLs\n\nSigned URLs allow converting files on demand only using URL query parameters. The node.js SDK allows to generate such URLs. Therefore, you need to obtain a signed URL base and a signing secret on the [CloudConvert Dashboard](https://cloudconvert.com/dashboard/api/v2/signed-urls).\n\n```js\nconst signedUrlBase = 'https://s.cloudconvert.com/...'; // You can find it in your signed URL settings.\nconst signingSecret = '...'; // You can find it in your signed URL settings.\nconst cacheKey = 'cache-key'; // Allows caching of the result file for 24h\n\nconst job = {\n    tasks: {\n        'import-it': {\n            operation: 'import/url',\n            url: 'https://some.url',\n            filename: 'logo.png'\n        },\n        'export-it': {\n            operation: 'export/url',\n            input: 'import-it',\n            inline: true\n        }\n    }\n};\n\nconst url = cloudConvert.signedUrls.sign(\n    signedUrlBase,\n    signingSecret,\n    job,\n    cacheKey\n); // returns the generated URL\n```\n\n## Using the Sandbox\n\nYou can use the Sandbox to avoid consuming your quota while testing your application. The node SDK allows you to do that.\n\n```js\n// Pass `true` to the constructor\nconst cloudConvert = new CloudConvert('api_key', true);\n```\n\n> Don't forget to generate MD5 Hashes for the files you will use for testing.\n\n## Setting a Region\n\nBy default, the region in your [account settings](https://cloudconvert.com/dashboard/region) is used. Alternatively, you can set a fixed region:\n\n```js\n// Pass the region as third argument to the constructor\nconst cloudConvert = new CloudConvert('api_key', false, 'us-east');\n```\n\n## Contributing\n\nThis section is intended for people who want to contribute to the development of this library.\n\n### Getting started\n\nBegin with installing the necessary dependencies by running\n\n    npm install\n\nin the root directory of this repository.\n\n### Building\n\nThis project is written in TypeScript so it needs to be compiled first:\n\n    npm run build\n\nThis will compile the code in the `lib` directory and generate a `built` directory containing the JS files and the type declarations.\n\n### Unit Tests\n\nTests are based on mocha:\n\n    npm run test\n\n### Integration Tests\n\n    npm run test-integration\n\nBy default, this runs the integration tests against the Sandbox API with an official CloudConvert account. If you would like to use your own account, you can set your API key using the `CLOUDCONVERT_API_KEY` enviroment variable. In this case you need to whitelist the following MD5 hashes for Sandbox API (using the CloudConvert dashboard).\n\n    53d6fe6b688c31c565907c81de625046  input.pdf\n    99d4c165f77af02015aa647770286cf9  input.png\n\n### Linting\n\nThe project is linted by ESLint+Prettier.\n\nIf you're using VSCode, all files will be linted automatically upon saving.\nOtherwise, you can lint the project by running\n\n    npm run lint\n\nand even auto-fix as many things as possible by running\n\n    npm run lint -- --fix\n\n## Resources\n\n-   [API v2 Documentation](https://cloudconvert.com/api/v2)\n-   [CloudConvert Blog](https://cloudconvert.com/blog)\n",
    "licenseText": "The License (MIT)\n\nCopyright (c) 2017 Josias Montag <josias@montag.info>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cloudconvert/-/cloudconvert-2.3.7.tgz#de57622b2ac590904dcdb10b4ceda61ac798e2ab",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cloudconvert/-/cloudconvert-2.3.7.tgz",
    "hash": "de57622b2ac590904dcdb10b4ceda61ac798e2ab",
    "integrity": "sha512-dn7HfNanhJTIOPE+7WAQ48FZFNrgIyNq3kSZLda54VD2oidOHKnXFSjsJLPZ+dLWpkZ88xI3oMisDR3YgOf5HA==",
    "registry": "npm",
    "packageName": "cloudconvert",
    "cacheIntegrity": "sha512-dn7HfNanhJTIOPE+7WAQ48FZFNrgIyNq3kSZLda54VD2oidOHKnXFSjsJLPZ+dLWpkZ88xI3oMisDR3YgOf5HA== sha1-3ldiKyrFkJBNzbELTO2mGseY4qs="
  },
  "registry": "npm",
  "hash": "de57622b2ac590904dcdb10b4ceda61ac798e2ab"
}