{
  "manifest": {
    "name": "nestjs-typeorm-paginate",
    "author": {
      "name": "Ashleigh Simonelli",
      "email": "ashleighsimonelli@gmail.com",
      "url": "http://ashleighsimonelli.co.uk"
    },
    "main": "./dist/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/nestjsx/nestjs-typeorm-paginate"
    },
    "description": "A simple pagination function to build a pagination object with types",
    "keywords": [
      "nestjs",
      "typeorm",
      "pagination",
      "paginate"
    ],
    "devDependencies": {
      "@nestjs/common": "^7.5.5",
      "@nestjs/core": "^7.5.5",
      "@nestjs/testing": "^7.0.0",
      "@nestjs/typeorm": "^7.1.0",
      "@types/jest": "^27.0.0",
      "@types/node": "^18.11.13",
      "coveralls": "^3.0.5",
      "jest": "^26.6.3",
      "mysql": "^2.17.1",
      "prettier": "^2.1.2",
      "reflect-metadata": "^0.1.13",
      "rxjs": "^6.5.2",
      "ts-jest": "^26.4.4",
      "ts-node": "^10.0.0",
      "typeorm": "0.3.6",
      "typescript": "^4.0.5"
    },
    "scripts": {
      "format": "prettier --write \"**/*.ts\"",
      "setup:test": "node_modules/.bin/ts-node node_modules/.bin/typeorm schema:sync",
      "test": "jest --runInBand",
      "coveralls": "yarn run test:cov --coverageReporters=text-lcov | coveralls",
      "test:cov": "jest --coverage",
      "build": "rm -rf ./dist && tsc && npm run build:index",
      "build:index": "rm -rf ./index.js ./index.d.ts && tsc -d --skipLibCheck ./index.ts",
      "prepublish": "npm run format && npm run build"
    },
    "peerDependencies": {
      "@nestjs/common": "^6.1.1 || ^5.6.2 || ^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0",
      "typeorm": "^0.3.0"
    },
    "jest": {
      "coveragePathIgnorePatterns": [
        "src/__tests__"
      ],
      "moduleFileExtensions": [
        "js",
        "json",
        "ts"
      ],
      "rootDir": "src",
      "testRegex": ".spec.ts$",
      "transform": {
        "^.+\\.(t|j)s$": "ts-jest"
      },
      "coverageDirectory": "../coverage"
    },
    "version": "4.0.4",
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-nestjs-typeorm-paginate-4.0.4-cc705100dc19a1ed4014830930180d0ab650560a-integrity/node_modules/nestjs-typeorm-paginate/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\"><img src=\"https://avatars1.githubusercontent.com/u/43827489?s=400&u=45ac0ac47d40b6d8f277c96bdf00244c10508aef&v=4\"/></p>\n<p align=\"center\">\n  <img src=\"https://github.com/nestjsx/nestjs-typeorm-paginate/workflows/Tests/badge.svg\"/>\n  <a href=\"https://www.npmjs.com/package/nestjs-typeorm-paginate\"><img src=\"https://img.shields.io/npm/v/nestjs-typeorm-paginate.svg\"/></a>\n  <a href='https://coveralls.io/github/nestjsx/nestjs-typeorm-paginate?branch=master'><img src='https://coveralls.io/repos/github/nestjsx/nestjs-typeorm-paginate/badge.svg?branch=master' alt='Coverage Status' /></a>\n  <img src=\"https://camo.githubusercontent.com/a34cfbf37ba6848362bf2bee0f3915c2e38b1cc1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\" />\n  <a href=\"https://github.com/juliandavidmr/awesome-nestjs#components--libraries\"><img src=\"https://raw.githubusercontent.com/nestjsx/crud/master/img/awesome-nest.svg?sanitize=true\" alt=\"Awesome Nest\" /></a>\n  <a href=\"https://github.com/nestjs/nest\"><img src=\"https://raw.githubusercontent.com/nestjsx/crud/master/img/nest-powered.svg?sanitize=true\" alt=\"Nest Powered\" /></a>\n  <a href=\"https://packagequality.com/#?package=nestjs-typeorm-paginate\"><img src=\"https://packagequality.com/shield/nestjs-typeorm-paginate.svg\" /></a>\n  <a href=\"https://www.npmjs.com/org/nestjsx\">\n    <img src=\"https://img.shields.io/npm/dt/nestjs-typeorm-paginate.svg\" alt=\"npm downloads\" />\n  </a>\n</p>\n\n<h1 align=\"center\">Nestjs Typeorm paginate</h1>\n\nPagination helper method for TypeORM repositories or queryBuilders with strict typings\n\n## Install\n\n```bash\n$ yarn add nestjs-typeorm-paginate\n```\nor\n```bash\n$ npm i nestjs-typeorm-paginate\n```\n\n> If you're using typeorm^0.2.6 please use nestjs-typeorm-paginate^3.2.0\n> For typeorm^0.3.0 please use nestjs-typeorm-paginate^4.0.0\n\n## Usage\n\n##### Service\n\n###### Repository\n\n```ts\nimport { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CatEntity } from './entities';\nimport {\n  paginate,\n  Pagination,\n  IPaginationOptions,\n} from 'nestjs-typeorm-paginate';\n\n@Injectable()\nexport class CatService {\n  constructor(\n    @InjectRepository(CatEntity)\n    private readonly repository: Repository<CatEntity>,\n  ) {}\n\n  async paginate(options: IPaginationOptions): Promise<Pagination<CatEntity>> {\n    return paginate<CatEntity>(this.repository, options);\n  }\n}\n```\n\n###### QueryBuilder\n\n```ts\nimport { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CatEntity } from './entities';\nimport {\n  paginate,\n  Pagination,\n  IPaginationOptions,\n} from 'nestjs-typeorm-paginate';\n\n@Injectable()\nexport class CatService {\n  constructor(\n    @InjectRepository(CatEntity)\n    private readonly repository: Repository<CatEntity>,\n  ) {}\n\n  async paginate(options: IPaginationOptions): Promise<Pagination<CatEntity>> {\n    const queryBuilder = this.repository.createQueryBuilder('c');\n    queryBuilder.orderBy('c.name', 'DESC'); // Or whatever you need to do\n\n    return paginate<CatEntity>(queryBuilder, options);\n  }\n}\n```\n\n##### Controller\n\n```ts\nimport { Controller, DefaultValuePipe, Get, ParseIntPipe, Query } from '@nestjs/common';\nimport { CatService } from './cat.service';\nimport { CatEntity } from './cat.entity';\nimport { Pagination } from 'nestjs-typeorm-paginate';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catService: CatService) {}\n  @Get('')\n  async index(\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number = 1,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number = 10,\n  ): Promise<Pagination<CatEntity>> {\n    limit = limit > 100 ? 100 : limit;\n    return this.catService.paginate({\n      page,\n      limit,\n      route: 'http://cats.com/cats',\n    });\n  }\n}\n```\n\n> If you use `ParseIntPipe` on the query params (as in the example), don't forget to also add `DefaultValuePipe`. See [issue 517](https://github.com/nestjsx/nestjs-typeorm-paginate/issues/517) for more info.\n\n> the `route` property of the paginate options can also be the short version of an absolute path , In this case, it would be `/cats` instead of `http://cats.com/cats`\n\n### Example Response\n\n```json\n{\n  \"items\": [\n    {\n      \"lives\": 9,\n      \"type\": \"tabby\",\n      \"name\": \"Bobby\"\n    },\n    {\n      \"lives\": 2,\n      \"type\": \"Ginger\",\n      \"name\": \"Garfield\"\n    },\n    {\n      \"lives\": 6,\n      \"type\": \"Black\",\n      \"name\": \"Witch's mate\"\n    },\n    {\n      \"lives\": 7,\n      \"type\": \"Purssian Grey\",\n      \"name\": \"Alisdaya\"\n    },\n    {\n      \"lives\": 1,\n      \"type\": \"Alistair\",\n      \"name\": \"ali\"\n    },\n    ...\n  ],\n  \"meta\": {\n    \"itemCount\": 10,\n    \"totalItems\": 20,\n    \"itemsPerPage\": 10,\n    \"totalPages\": 5,\n    \"currentPage\": 2\n  },\n  \"links\" : {\n    \"first\": \"http://cats.com/cats?limit=10\",\n    \"previous\": \"http://cats.com/cats?page=1&limit=10\",\n    \"next\": \"http://cats.com/cats?page=3&limit=10\",\n    \"last\": \"http://cats.com/cats?page=5&limit=10\"\n  }\n}\n```\n\n`items`: An array of SomeEntity\n\n`meta.itemCount`: The length of items array (i.e., the amount of items on this page)\n`meta.totalItems`: The total amount of SomeEntity matching the filter conditions\n`meta.itemsPerPage`: The requested items per page (i.e., the `limit` parameter)\n\n`meta.totalPages`: The total amount of pages (based on the `limit`)\n`meta.currentPage`: The current page this paginator \"points\" to\n\n`links.first`: A URL for the first page to call | `\"\"` (blank) if no `route` is defined\n`links.previous`: A URL for the previous page to call | `\"\"` (blank) if no previous to call\n`links.next`: A URL for the next page to call | `\"\"` (blank) if no page to call\n`links.last`: A URL for the last page to call | `\"\"` (blank) if no `route` is defined\n\n\n> Do note that `links.first` may not have the 'page' query param defined\n\n## Find Parameters\n\n```ts\n@Injectable()\nexport class CatService {\n  constructor(\n    @InjectRepository(CatEntity)\n    private readonly repository: Repository<CatEntity>,\n  ) {}\n\n  async paginate(options: IPaginationOptions): Promise<Pagination<CatEntity>> {\n    return paginate<CatEntity>(this.repository, options, {\n      lives: 9,\n    });\n  }\n}\n```\n\n## Eager loading\n\nEager loading should work with typeorm's eager property out the box. Like so\n\n```typescript\nimport { Entity, OneToMany } from 'typeorm';\n\n@Entity()\nexport class CatEntity {\n  @OneToMany(t => TigerKingEntity, tigerKing.cats, {\n    eager: true,\n  })\n  tigerKings: TigerKingEntity[];\n}\n\n// service\nclass CatService {\n  constructor(private readonly repository: Repository<CatEntity>) {}\n\n  async paginate(page: number, limit: number): Promise<Pagination<CatEntity>> {\n    return paginate(this.repository, { page, limit });\n  }\n}\n```\n\n#### QueryBuilder\n\nHowever, when using the query builder you'll have to hydrate the entities yourself. Here is a crude example that I've used in the past. It's not great but this is partially what typeORM will do.\n\n```typescript\nconst results = paginate(queryBuilder, { page, limit });\n\nreturn new Pagination(\n  await Promise.all(\n    results.items.map(async (item: SomeEntity) => {\n      const hydrate = await this.someRepository.findByEntity(item);\n      item.hydrated = hydrate;\n\n      return item;\n    }),\n  ),\n  results.meta,\n  results.links,\n);\n```\n\n## Raw queries\n\n```typescript\nconst queryBuilder = this.repository\n  .createQueryBuilder<{ type: string; totalLives: string }>('c')\n  .select('c.type', 'type')\n  .addSelect('SUM(c.lives)', 'totalLives')\n  .groupBy('c.type')\n  .orderBy('c.type', 'DESC'); // Or whatever you need to do\n\nreturn paginateRaw(queryBuilder, options);\n```\n\n### Raw and Entities\n\nA similar approach is used for TypeORM's `getRawAndEntities`\n\nLet's assume there's a joined table that matches each cat with its cat toys.\nAnd we want to bring how many toys each cat has.\n\n```typescript\n\nconst queryBuilder = this.repository\n  .createQueryBuilder<{ type: string; totalLives: string }>('cat')\n    .leftJoinAndSelect('cat.toys', 'toys')\n    .addSelect('COUNT(toys)::INTEGER', 'toyCount')\n    .groupBy('cat.name');\n```\n\nThis will allow us to get the paginated cats information with the additional raw query to build our actual response value.\nThe return pagination object will be the same, but you're now able to handle or map the results and the raw objects as needed.\n\n```typescript\nconst [pagination, rawResults] = await paginateRawAndEntities(query, options);\npagination.items.map((item, index) => {\n  // we can do what we need with the items and raw results here\n  // change your items using rawResults.find(raw => raw.id === item.id)\n});\nreturn pagination;\n```\n\n#### Note about joined tables and raw values\n\nSince the values of the raw results will include all the joined table items as queried, you must make sure to handle the items as needed for your use case. Refer to TypeORM's [getRawAndEntities](https://github.com/typeorm/typeorm/blob/920e7812cd9d405df921f9ae9ce52ba0a9743bea/src/query-builder/SelectQueryBuilder.ts#L1047) implementation as needed.\n\nThe rawResults array will look something like this:\n\n```typescript\n[\n    { // Bobby appears 3 times due to the joined query\n      \"cat_lives\": 9,\n      \"cat_type\": \"tabby\",\n      \"cat_name\": \"Bobby\",\n      \"toyCount\": 3\n    },\n    {\n      \"cat_lives\": 9,\n      \"cat_type\": \"tabby\",\n      \"cat_name\": \"Bobby\",\n      \"toyCount\": 3\n    },\n    {\n      \"cat_lives\": 9,\n      \"cat_type\": \"tabby\",\n      \"cat_name\": \"Bobby\",\n      \"toyCount\": 3\n    },\n    {\n      \"cat_lives\": 2,\n      \"cat_type\": \"Ginger\",\n      \"cat_name\": \"Garfield\",\n      \"toyCount\": 1\n    },\n    ...\n]\n```\n\n## Custom meta data transformer\n\nIf you wanted to alter the meta data that is returned from the pagination object. Then use the `metaTransformer` in the options like so\n\n```ts\n\nclass CustomPaginationMeta {\n  constructor(\n    public readonly count: number,\n    public readonly total: number,\n  ) {}\n}\n\nreturn paginate<MyEntity, CustomPaginationMeta>(this.repository, { \n  page,\n  limit,\n  metaTransformer: (meta: IPaginationMeta): CustomPaginationMeta => new CustomPaginationMeta(\n    meta.itemCount,\n    meta.totalItems,\n  ),\n });\n```\n\nThis will result in the above returning `CustomPaginationMeta` in the `meta` property instead of the default `IPaginationMeta`.\n\n\n## Custom links query params labels\n\nIf you want to alter the `limit` and/or `page` labels in meta links, then use `routingLabels` in the options like so\n\n```ts\n\nreturn paginate<MyEntity>(this.repository, { \n  page,\n  limit,\n  routingLabels: {\n    limitLabel: 'page-size', // default: limit\n    pageLabel: 'current-page', //default: page\n  }\n });\n```\n\nThis will result links like `http://example.com/something?current-page=1&page-size=3`.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Ashleigh Simonelli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "license": "MIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/nestjs-typeorm-paginate/-/nestjs-typeorm-paginate-4.0.4.tgz#cc705100dc19a1ed4014830930180d0ab650560a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/nestjs-typeorm-paginate/-/nestjs-typeorm-paginate-4.0.4.tgz",
    "hash": "cc705100dc19a1ed4014830930180d0ab650560a",
    "integrity": "sha512-arinWDc78wPV/EYWMmLYyeMSE5Lae1FHWD/2QpOdTmHaOVqK4PYf19EqZBqT9gbbPugkNW9JAMz3G2WmvSgR/A==",
    "registry": "npm",
    "packageName": "nestjs-typeorm-paginate",
    "cacheIntegrity": "sha512-arinWDc78wPV/EYWMmLYyeMSE5Lae1FHWD/2QpOdTmHaOVqK4PYf19EqZBqT9gbbPugkNW9JAMz3G2WmvSgR/A== sha1-zHBRANwZoe1AFIMJMBgNCrZQVgo="
  },
  "registry": "npm",
  "hash": "cc705100dc19a1ed4014830930180d0ab650560a"
}