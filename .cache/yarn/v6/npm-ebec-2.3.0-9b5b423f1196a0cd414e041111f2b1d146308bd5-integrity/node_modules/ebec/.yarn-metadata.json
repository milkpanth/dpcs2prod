{
  "manifest": {
    "name": "ebec",
    "version": "2.3.0",
    "files": [
      "dist/"
    ],
    "description": "A library that provides a basic ES6 error class.",
    "author": {
      "name": "Peter Placzek",
      "email": "contact@tada5hi.net",
      "url": "https://github.com/tada5hi"
    },
    "license": "MIT",
    "keywords": [
      "error",
      "typescript",
      "class",
      "abstraction",
      "exception",
      "debug",
      "error-handling",
      "error",
      "options",
      "merge",
      "build",
      "options"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Tada5hi/ebec.git"
    },
    "bugs": {
      "url": "https://github.com/Tada5hi/ebec/issues"
    },
    "homepage": "https://github.com/Tada5hi/ebec#readme",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "scripts": {
      "build:types": "tsc  -p tsconfig.build.json --emitDeclarationOnly",
      "build:js": "rollup -c",
      "build": "rimraf dist && npm run build:types && npm run build:js",
      "test": "cross-env NODE_ENV=test jest --config ./test/jest.config.js",
      "test:coverage": "cross-env NODE_ENV=test jest --config ./test/jest.config.js --coverage",
      "prepublishOnly": "npm run build"
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "c8cfe853ca33a77d7488867f31e9016b10e51a74",
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-ebec-2.3.0-9b5b423f1196a0cd414e041111f2b1d146308bd5-integrity/node_modules/ebec/package.json",
    "readmeFilename": "README.md",
    "readme": "# ebec ðŸ¥‹\n\n[![npm version](https://badge.fury.io/js/ebec.svg)](https://badge.fury.io/js/ebec)\n[![main](https://github.com/Tada5hi/ebec/actions/workflows/main.yml/badge.svg)](https://github.com/Tada5hi/ebec/actions/workflows/main.yml)\n[![codecov](https://codecov.io/gh/tada5hi/ebec/branch/master/graph/badge.svg?token=HLHCWI3VO1)](https://codecov.io/gh/tada5hi/ebec)\n[![codecov](https://codecov.io/gh/tada5hi/ebec/branch/master/graph/badge.svg?token=HLHCWI3VO1)](https://codecov.io/gh/tada5hi/ebec)\n\nA library that simplifies error handling by providing an ES6 error class and utility functions.\nThis library facilitates the extraction of options and error messages from constructor arguments.\n\n**Table of Contents**\n\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Simple](#simple)\n    - [Inheritance](#inheritance)\n- [Types](#types)\n- [Utils](#utils)\n- [License](#license)\n\n## Installation\n\n```bash\nnpm install ebec --save\n```\n\n## Usage\n\nThe **BaseError** class accepts various constructor arguments of type [Input](#input) and any\n[Options](#options) specified during initialization are automatically assigned as attributes.\n\n### Simple\n\nCreate error instances in different ways, as demonstrated in the following examples:\n\n**Example #1**\n\n```typescript\nimport { BaseError } from 'ebec';\n\nconst error = new BaseError('An error occurred.');\n\nconsole.log(error.message);\n// An error occurred.\n```\n\n**Example #2**\n\nIn this example, only error options are passed as a single argument to the error constructor.\n\n```typescript\nimport { BaseError } from 'ebec';\n\nconst error = new BaseError({\n    message: 'The entity could not be found',\n    code: 'BAD_REQUEST'\n});\n\nconsole.log(error.message);\n// The entity could not be found\n\nconsole.log(error.code);\n// BAD_REQUEST\n```\n\n**Example #3**\n\nIn this example, multiple arguments are passed to the error constructor.\n\n```typescript\nimport { BaseError } from 'ebec';\n\nconst cause = new Error('foo');\n\nconst error = new BaseError(\n    'The entity could not be found',\n    {\n        code: 'BAD_REQUEST'\n    },\n    cause\n);\n\nconsole.log(error.message);\n// The entity could not be found\n\nconsole.log(error.code);\n// BAD_REQUEST\n\nconsole.log(error.cause);\n// { message: 'foo', ... }\n```\n\n### Inheritance\n\nCustom error classes that inherit from BaseError allow for more specific error handling.\n\n```typescript\nimport {\n    BaseError, \n    Options\n} from 'ebec';\n\nexport class NotFoundError extends BaseError {\n    constructor(message?: string) {\n        super({\n            message,\n            logMessage: true,\n            logLevel: 'warning',\n            code: 'NOT_FOUND'\n        });\n    }\n\n}\n```\n\n## Types\n\n### Input\n\n```typescript\ntype Input = Options | Error | string;\n```\n\n### Options\n\n```typescript\ntype Options = {\n    /**\n     * The actual error message, if not provided on another way.\n     */\n    message?: string,\n\n    /**\n     * Trace of which functions were called.\n     */\n    stack?: string\n\n    /**\n     * A unique identifier for the error,\n     * which can be a short uppercase string or a numeric code.\n     */\n    code?: string | number | null,\n\n    /**\n     * Additional data associated with the error. This property can hold\n     * unstructured information or supplementary details that provide context\n     * to the error.\n     */\n    data?: unknown,\n\n    /**\n     * Determines whether the error message can be safely exposed externally.\n     */\n    expose?: boolean;\n\n    /**\n     * Indicates whether the error should be logged in the application's logs.\n     */\n    logMessage?: boolean,\n\n    /**\n     * Specifies the log level at which this error should be recorded.\n     */\n    logLevel?: string | number,\n\n    /**\n     * Represents the underlying cause or source of the error.\n     */\n    cause?: unknown\n};\n```\n\n## Utils\n\n### isBaseError\n\nThis method is used to determine if the error is a basic error or if the error extends this class.\n\n```typescript\nimport { isBaseError, BaseError } from \"ebec\";\n\nconst error = new BaseError();\n\nconsole.log(isBaseError(error));\n// true\n```\n\n## License\n\nMade with ðŸ’š\n\nPublished under [MIT License](./LICENSE).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Peter Placzek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ebec/-/ebec-2.3.0.tgz#9b5b423f1196a0cd414e041111f2b1d146308bd5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ebec/-/ebec-2.3.0.tgz",
    "hash": "9b5b423f1196a0cd414e041111f2b1d146308bd5",
    "integrity": "sha512-bt+0tSL7223VU3PSVi0vtNLZ8pO1AfWolcPPMk2a/a5H+o/ZU9ky0n3A0zhrR4qzJTN61uPsGIO4ShhOukdzxA==",
    "registry": "npm",
    "packageName": "ebec",
    "cacheIntegrity": "sha512-bt+0tSL7223VU3PSVi0vtNLZ8pO1AfWolcPPMk2a/a5H+o/ZU9ky0n3A0zhrR4qzJTN61uPsGIO4ShhOukdzxA== sha1-m1tCPxGWoM1BTgQREfKx0UYwi9U="
  },
  "registry": "npm",
  "hash": "9b5b423f1196a0cd414e041111f2b1d146308bd5"
}