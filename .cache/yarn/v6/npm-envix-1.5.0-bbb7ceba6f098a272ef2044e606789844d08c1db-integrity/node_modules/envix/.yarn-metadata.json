{
  "manifest": {
    "name": "envix",
    "version": "1.5.0",
    "description": "[![npm version][npm-version-src]][npm-version-href] [![npm version][codecov-src]][codecov-href] [![Master Workflow][workflow-src]][workflow-href] [![Known Vulnerabilities][snyk-src]][snyk-href] [![Conventional Commits][conventional-src]][conventional-href]",
    "author": {
      "name": "Peter Placzek",
      "email": "contact@tada5hi.net",
      "url": "https://github.com/tada5hi"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/tada5hi/envix.git"
    },
    "main": "dist/index.cjs",
    "module": "dist/index.mjs",
    "types": "dist/index.d.ts",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      }
    },
    "files": [
      "dist"
    ],
    "engines": {
      "node": ">=18.0.0"
    },
    "scripts": {
      "build:types": "tsc --emitDeclarationOnly",
      "build:js": "rollup -c",
      "build": "rimraf dist && rimraf bin && npm run build:types && npm run build:js",
      "build:watch": "npm run build -- --watch",
      "test": "jest --config ./test/jest.config.js",
      "test:coverage": "cross-env NODE_ENV=test jest --config ./test/jest.config.js --coverage",
      "lint": "eslint",
      "lint:fix": "npm run lint -- --fix",
      "prepare": "husky install"
    },
    "keywords": [],
    "license": "MIT",
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^15.2.3",
      "@rollup/plugin-swc": "^0.3.0",
      "@swc/jest": "^0.2.36",
      "@tada5hi/commitlint-config": "^1.1.7",
      "@tada5hi/eslint-config-typescript": "^1.2.9",
      "@tada5hi/semantic-release": "^0.3.1",
      "@tada5hi/tsconfig": "^0.5.0",
      "@types/jest": "^29.5.12",
      "cross-env": "^7.0.3",
      "eslint": "^8.56.0",
      "husky": "^9.0.10",
      "jest": "^29.7.0",
      "lint-staged": "^15.2.2",
      "rollup": "^4.9.6",
      "semantic-release": "^22.0.12",
      "typescript": "^5.3.3"
    },
    "lint-staged": {
      ".js": "npm run lint:fix",
      "*.ts": "npm run lint:fix"
    },
    "dependencies": {
      "std-env": "^3.7.0"
    },
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-envix-1.5.0-bbb7ceba6f098a272ef2044e606789844d08c1db-integrity/node_modules/envix/package.json",
    "readmeFilename": "README.MD",
    "readme": "# envix ‚öôÔ∏è\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm version][codecov-src]][codecov-href]\n[![Master Workflow][workflow-src]][workflow-href]\n[![Known Vulnerabilities][snyk-src]][snyk-href]\n[![Conventional Commits][conventional-src]][conventional-href]\n\n\nThis library simplifies reading, transforming, and requiring environment variables across runtimes like Node.js, Deno, Bun.js, Browser, and more.\n\n**Table of Contents**\n- [Installation](#installation)\n- [Usage](#usage)\n  - [write](#write)\n  - [read](#read)\n  - [readArray](#read-array)\n  - [readBool](#read-bool)\n  - [readFloat](#read-float)\n  - [readInt](#read-int)\n  - [readNumber](#read-number)\n  - [readNumberArray](#read-number-array)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n```bash\nnpm install envix --save\n```\n\n## Usage\n\n### Write\nThe write method makes it possible to set an environment variable retrospectively for later accesses.\n\n```typescript\nimport { write } from 'envix';\n\nwrite('foo', 'bar');\n```\n\n### Read\nThe read method accepts the key of the environment variable as the first argument and an\nalternative value as the second argument, which is returned if the variable does not exist.\nIf no argument is passed, an object with all environment variables is returned.\n\n```typescript\nimport { read, write } from 'envix';\n\nwrite('foo', 'bar');\n\nread('foo'); // string | undefined\n// bar\n\nread('bar', 'baz'); // string\n// baz\n```\n\n### Read Array\nThe readArray method makes it possible to read an environment variable as a string array.\nA fallback value can be defined as the second argument.\n```typescript\nimport { readArray, write } from 'envix';\n\nwrite('foo', 'bar,baz');\n\nreadArray('foo'); // string[] | undefined\n// ['bar', 'baz']\n\nreadArray('bar', ['foo']); // string[]\n// ['foo']\n```\n\n### Read Bool\nThe readBool method makes it possible to read an environment variable as a boolean.\nA fallback value can be defined as the second argument.\n\n```typescript\nimport { readBool, write } from 'envix';\n\nwrite('foo', 'true');\n\nreadBool('foo'); // boolean | undefined\n// true\n\nreadBool('bar', false); // boolean\n// false\n```\n\n### Read Float\nThe readFloat method makes it possible to read an environment variable as a float.\nA fallback value can be defined as the second argument.\n\n```typescript\nimport { readFloat, write } from 'envix';\n\nwrite('foo', '1');\n\nreadFloat('foo'); // number | undefined\n// 1.0\n\nreadFloat('bar', 2.0); // number\n// 2.0\n```\n\n### Read Int\nThe readInt method makes it possible to read an environment variable as a integer.\nA fallback value can be defined as the second argument.\n\n```typescript\nimport { readInt, write } from 'envix';\n\nwrite('foo', '1.0');\n\nreadInt('foo'); // number | undefined\n// 1\n\nreadInt('bar', 2); // number\n// 2\n```\n\n### Read Number\nThe readNumber method makes it possible to read an environment variable as a number.\nA fallback value can be defined as the second argument.\n\n```typescript\nimport { readNumber, write } from 'envix';\n\nwrite('foo', '1.0');\n\nreadNumber('foo'); // number | undefined\n// 1.0\n\nreadNumber('bar', 2.0); // number\n// 2.0\n```\n\n### Read Number Array\nThe readNumberArray method makes it possible to read an environment variable as a number array.\nA fallback value can be defined as the second argument.\n\n```typescript\nimport { readNumberArray, write } from 'envix';\n\nwrite('foo', '1.0,2.1');\n\nreadNumberArray('foo'); // number[] | undefined\n// [1.0,2.1]\n\nreadNumberArray('bar', [2,3]); // number[]\n// [2,3]\n```\n\n## Contributing\n\nBefore starting to work on a pull request, it is important to review the guidelines for\n[contributing](./CONTRIBUTING.md) and the [code of conduct](./CODE_OF_CONDUCT.md).\nThese guidelines will help to ensure that contributions are made effectively and are accepted.\n\n## License\n\nMade with üíö\n\nPublished under [MIT License](./LICENSE).\n\n[npm-version-src]: https://badge.fury.io/js/envix.svg\n[npm-version-href]: https://npmjs.com/package/envix\n[codecov-src]: https://codecov.io/gh/Tada5hi/envix/branch/master/graph/badge.svg?token=4KNSG8L13V\n[codecov-href]: https://codecov.io/gh/Tada5hi/envix\n[workflow-src]: https://github.com/Tada5hi/envix/workflows/CI/badge.svg\n[workflow-href]: https://github.com/Tada5hi/envix\n[snyk-src]: https://snyk.io/test/github/Tada5hi/envix/badge.svg?targetFile=package.json\n[snyk-href]: https://snyk.io/test/github/Tada5hi/envix?targetFile=package.json\n[conventional-src]: https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&logoColor=white\n[conventional-href]: https://conventionalcommits.org\n",
    "licenseText": "MIT License\n\nCopyright (c) 2023 Peter Placzek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/envix/-/envix-1.5.0.tgz#bbb7ceba6f098a272ef2044e606789844d08c1db",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/envix/-/envix-1.5.0.tgz",
    "hash": "bbb7ceba6f098a272ef2044e606789844d08c1db",
    "integrity": "sha512-IOxTKT+tffjxgvX2O5nq6enbkv6kBQ/QdMy18bZWo0P0rKPvsRp2/EypIPwTvJfnmk3VdOlq/KcRSZCswefM/w==",
    "registry": "npm",
    "packageName": "envix",
    "cacheIntegrity": "sha512-IOxTKT+tffjxgvX2O5nq6enbkv6kBQ/QdMy18bZWo0P0rKPvsRp2/EypIPwTvJfnmk3VdOlq/KcRSZCswefM/w== sha1-u7fOum8Jiicu8gROYGeJhE0Iwds="
  },
  "registry": "npm",
  "hash": "bbb7ceba6f098a272ef2044e606789844d08c1db"
}