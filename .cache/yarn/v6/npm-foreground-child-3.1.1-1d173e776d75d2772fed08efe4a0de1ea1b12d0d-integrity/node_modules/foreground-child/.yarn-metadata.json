{
  "manifest": {
    "name": "foreground-child",
    "version": "3.1.1",
    "description": "Run a child as if it's the foreground process. Give it stdio. Exit when it exits.",
    "main": "./dist/cjs/index.js",
    "module": "./dist/mjs/index.js",
    "types": "./dist/mjs/index.d.ts",
    "exports": {
      ".": {
        "import": {
          "types": "./dist/mjs/index.d.ts",
          "default": "./dist/mjs/index.js"
        },
        "require": {
          "types": "./dist/cjs/index.d.ts",
          "default": "./dist/cjs/index.js"
        }
      }
    },
    "files": [
      "dist"
    ],
    "engines": {
      "node": ">=14"
    },
    "dependencies": {
      "cross-spawn": "^7.0.0",
      "signal-exit": "^4.0.1"
    },
    "scripts": {
      "preversion": "npm test",
      "postversion": "npm publish",
      "prepublishOnly": "git push origin --follow-tags",
      "prepare": "tsc -p tsconfig.json && tsc -p tsconfig-esm.json && bash ./scripts/fixup.sh",
      "pretest": "npm run prepare",
      "presnap": "npm run prepare",
      "test": "c8 tap",
      "snap": "c8 tap",
      "format": "prettier --write . --loglevel warn",
      "typedoc": "typedoc --tsconfig tsconfig-esm.json ./src/*.ts"
    },
    "prettier": {
      "semi": false,
      "printWidth": 75,
      "tabWidth": 2,
      "useTabs": false,
      "singleQuote": true,
      "jsxSingleQuote": false,
      "bracketSameLine": true,
      "arrowParens": "avoid",
      "endOfLine": "lf"
    },
    "tap": {
      "coverage": false,
      "jobs": 1,
      "node-arg": [
        "--no-warnings",
        "--loader",
        "ts-node/esm"
      ],
      "ts": false
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/tapjs/foreground-child.git"
    },
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "http://blog.izs.me/"
    },
    "license": "ISC",
    "devDependencies": {
      "@types/cross-spawn": "^6.0.2",
      "@types/node": "^18.15.11",
      "@types/tap": "^15.0.8",
      "c8": "^7.13.0",
      "prettier": "^2.8.6",
      "tap": "^16.3.4",
      "ts-node": "^10.9.1",
      "typedoc": "^0.24.2",
      "typescript": "^5.0.2"
    },
    "funding": {
      "url": "https://github.com/sponsors/isaacs"
    },
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-foreground-child-3.1.1-1d173e776d75d2772fed08efe4a0de1ea1b12d0d-integrity/node_modules/foreground-child/package.json",
    "readmeFilename": "README.md",
    "readme": "# foreground-child\n\nRun a child as if it's the foreground process. Give it stdio. Exit\nwhen it exits.\n\nMostly this module is here to support some use cases around\nwrapping child processes for test coverage and such. But it's\nalso generally useful any time you want one program to execute\nanother as if it's the \"main\" process, for example, if a program\ntakes a `--cmd` argument to execute in some way.\n\n## USAGE\n\n```js\nimport { foregroundChild } from 'foreground-child'\n// hybrid module, this also works:\n// const { foregroundChild } = require('foreground-child')\n\n// cats out this file\nconst child = foregroundChild('cat', [__filename])\n\n// At this point, it's best to just do nothing else.\n// return or whatever.\n// If the child gets a signal, or just exits, then this\n// parent process will exit in the same way.\n```\n\nYou can provide custom spawn options by passing an object after\nthe program and arguments:\n\n```js\nconst child = foregroundChild(`cat ${__filename}`, { shell: true })\n```\n\nA callback can optionally be provided, if you want to perform an\naction before your foreground-child exits:\n\n```js\nconst child = foregroundChild('cat', [__filename], spawnOptions, () => {\n  doSomeActions()\n})\n```\n\nThe callback can return a Promise in order to perform\nasynchronous actions. If the callback does not return a promise,\nthen it must complete its actions within a single JavaScript\ntick.\n\n```js\nconst child = foregroundChild('cat', [__filename], async () => {\n  await doSomeAsyncActions()\n})\n```\n\nIf the callback throws or rejects, then it will be unhandled, and\nnode will exit in error.\n\nIf the callback returns a string value, then that will be used as\nthe signal to exit the parent process. If it returns a number,\nthen that number will be used as the parent exit status code. If\nit returns boolean `false`, then the parent process will not be\nterminated. If it returns `undefined`, then it will exit with the\nsame signal/code as the child process.\n\n## Caveats\n\nThe \"normal\" standard IO file descriptors (0, 1, and 2 for stdin,\nstdout, and stderr respectively) are shared with the child process.\nAdditionally, if there is an IPC channel set up in the parent, then\nmessages are proxied to the child on file descriptor 3.\n\nIn Node, it's possible to also map arbitrary file descriptors\ninto a child process. In these cases, foreground-child will not\nmap the file descriptors into the child. If file descriptors 0,\n1, or 2 are used for the IPC channel, then strange behavior may\nhappen (like printing IPC messages to stderr, for example).\n\nNote that a SIGKILL will always kill the parent process, but\nwill not proxy the signal to the child process, because SIGKILL\ncannot be caught. In order to address this, a special \"watchdog\"\nchild process is spawned which will send a SIGKILL to the child\nprocess if it does not terminate within half a second after the\nwatchdog receives a SIGHUP due to its parent terminating.\n\nOn Windows, issuing a `process.kill(process.pid, signal)` with a\nfatal termination signal may cause the process to exit with a `1`\nstatus code rather than reporting the signal properly. This\nmodule tries to do the right thing, but on Windows systems, you\nmay see that incorrect result. There is as far as I'm aware no\nworkaround for this.\n",
    "licenseText": "The ISC License\n\nCopyright (c) 2015-2023 Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/foreground-child/-/foreground-child-3.1.1.tgz#1d173e776d75d2772fed08efe4a0de1ea1b12d0d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/foreground-child/-/foreground-child-3.1.1.tgz",
    "hash": "1d173e776d75d2772fed08efe4a0de1ea1b12d0d",
    "integrity": "sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==",
    "registry": "npm",
    "packageName": "foreground-child",
    "cacheIntegrity": "sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg== sha1-HRc+d2110ncv7Qjv5KDeHqGxLQ0="
  },
  "registry": "npm",
  "hash": "1d173e776d75d2772fed08efe4a0de1ea1b12d0d"
}