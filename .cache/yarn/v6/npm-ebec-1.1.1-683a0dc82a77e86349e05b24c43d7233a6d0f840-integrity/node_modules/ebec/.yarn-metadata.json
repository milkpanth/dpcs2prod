{
  "manifest": {
    "name": "ebec",
    "version": "1.1.1",
    "files": [
      "dist/"
    ],
    "description": "[![npm version](https://badge.fury.io/js/ebec.svg)](https://badge.fury.io/js/ebec) [![main](https://github.com/Tada5hi/ebec/actions/workflows/main.yml/badge.svg)](https://github.com/Tada5hi/ebec/actions/workflows/main.yml) [![codecov](https://codecov.io/gh/tada5hi/ebec/branch/master/graph/badge.svg?token=HLHCWI3VO1)](https://codecov.io/gh/tada5hi/ebec) [![codecov](https://codecov.io/gh/tada5hi/ebec/branch/master/graph/badge.svg?token=HLHCWI3VO1)](https://codecov.io/gh/tada5hi/ebec)",
    "author": {
      "name": "Peter Placzek",
      "email": "contact@tada5hi.net",
      "url": "https://github.com/tada5hi"
    },
    "license": "MIT",
    "keywords": [
      "error",
      "typescript",
      "class",
      "abstraction",
      "exception",
      "debug",
      "error-handling",
      "error",
      "options",
      "merge",
      "build",
      "options"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Tada5hi/ebec.git"
    },
    "bugs": {
      "url": "https://github.com/Tada5hi/ebec/issues"
    },
    "homepage": "https://github.com/Tada5hi/ebec#readme",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "scripts": {
      "build:types": "tsc  -p tsconfig.build.json --emitDeclarationOnly",
      "build:js": "rollup -c",
      "build": "rimraf dist && npm run build:types && npm run build:js",
      "test": "cross-env NODE_ENV=test jest --config ./test/jest.config.js",
      "test:coverage": "cross-env NODE_ENV=test jest --config ./test/jest.config.js --coverage",
      "prepublishOnly": "npm run build"
    },
    "dependencies": {
      "smob": "^1.4.0"
    },
    "devDependencies": {
      "@types/jest": "^29.5.4",
      "jest": "^29.6.4",
      "ts-jest": "^29.1.1"
    },
    "publishConfig": {
      "access": "public"
    },
    "gitHead": "a9c9492e6e86d806a76161a875066bb8b55f00b5",
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-ebec-1.1.1-683a0dc82a77e86349e05b24c43d7233a6d0f840-integrity/node_modules/ebec/package.json",
    "readmeFilename": "README.md",
    "readme": "# ebec ðŸ¥‹\n\n[![npm version](https://badge.fury.io/js/ebec.svg)](https://badge.fury.io/js/ebec)\n[![main](https://github.com/Tada5hi/ebec/actions/workflows/main.yml/badge.svg)](https://github.com/Tada5hi/ebec/actions/workflows/main.yml)\n[![codecov](https://codecov.io/gh/tada5hi/ebec/branch/master/graph/badge.svg?token=HLHCWI3VO1)](https://codecov.io/gh/tada5hi/ebec)\n[![codecov](https://codecov.io/gh/tada5hi/ebec/branch/master/graph/badge.svg?token=HLHCWI3VO1)](https://codecov.io/gh/tada5hi/ebec)\n\nThis is a library, which provides a base error class, which can simply be extended âš¡.\nIt also provides some utility functions to `build` & `merge` options. \n\n**Table of Contents**\n\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Simple](#simple)\n    - [Inheritance](#inheritance)\n    - [Utils](#utils)\n- [Types](#types)\n- [License](#license)\n\n## Installation\n\n```bash\nnpm install ebec --save\n```\n\n## Usage\n\n### Simple\nThe `BaseError` class can be initialized on different ways, like demonstrated by the following examples:\n\n**Example #1**\n\nIn this example no options are specified on class instantiation, but afterwards.\n```typescript\nimport { BaseError } from 'ebec';\n\nconst error = new BaseError('An error occurred.');\n\nconsole.log(error.message);\n// An error is occurred.\n\nconsole.log(error.getOptions());\n// {}\n\nerror.setOption('statusCode', 404);\n\nconsole.log(error.getOptions());\n// {statusCode: 404}\n\nconsole.log(error.getOption('statusCode'));\n// 404\n```\n\n**Example #2**\n\nIn the following example the error options are specified on instantiation.\n\n```typescript\nimport { BaseError, Options } from 'ebec';\n\nconst options : Options = {\n    statusCode: 404,\n    //... define some own options\n    foo: 'bar'\n}\nconst error = new BaseError('The entity could not be found', options);\n\nconst statusCode = error.getOption('statusCode');\nconsole.log(statusCode);\n// 404\n\nconst foo = error.getOption('foo');\nconsole.log(foo);\n// bar\n```\nLike demonstrated in the example above, self defined options can be provided in addition to \nthe existing options keys âš¡.\n\n**Example #3**\n\nIn the following example only the error options are passed as single argument to the error constructor.\n\n```typescript\nimport { BaseError, Options } from 'ebec';\n\nconst options : Options = {\n    message: 'The entity could not be found',\n    statusCode: 404,\n    //... define some own options\n    foo: 'bar'\n}\nconst error = new BaseError(options);\n\nconsole.log(error.message);\n// The entity could not be found\n\n// access the option values\nconst statusCode = error.getOption('statusCode');\nconsole.log(statusCode);\n// 404\n```\n\n\n### Inheritance\n\nBesides, using only the BaseError class, own classes which inherit the BaseError class,\ncan simply be created and provide a better way to handle errors more differentiated.\n\n```typescript\nimport {\n    BaseError, \n    Options,\n    mergeOptions\n} from 'ebec';\n\nexport class NotFoundError extends BaseError {\n    constructor(message?: Options) {\n        super(mergeOptions(\n            {\n                logMessage: true,\n                logLevel: 'warning',\n                statusCode: 404,   \n            },\n            ...(options ? options : {})\n        ));\n    }\n\n}\n```\n\n### Utils\n\nThe library is like already mentioned also shipped with some utility functions, to make life easier.\n\n#### buildOptions\nThe `buildOptions` method requires two arguments. The first one can either be a `string`, `Error` or a\nvalue of type `Options`. The second argument one, on the other hand must be of type `Options`.\n\n```typescript\nimport { buildOptions } from 'ebec';\n\nlet options = buildOptions({\n    statusCode: 404\n}, {\n    error: 'ERROR'\n});\nconsole.log(options);\n// {statusCode: 404, code: 'ERROR'}\n\noptions = buildOptions('An error occurred.', {code: 'ERROR'});\nconsole.log(options);\n// {code: 'ERROR'}\n```\n\n#### mergeOptions\n\nThe `mergeOptions` accepts 1-n arguments of type `Options` and merge them to one option set,\nwhich is then provided as return value.\n\n```typescript\nimport { mergeOptions } from 'ebec';\n\nlet options = mergeOptions({\n    statusCode: 404\n}, {\n    error: 'ERROR'\n});\nconsole.log(options);\n// {statusCode: 404, code: 'ERROR'}\n\noptions = mergeOptions('An error occurred.', {code: 'ERROR'});\nconsole.log(options);\n// {code: 'ERROR'}\n```\n\n## Types\n\n### Options\n```typescript\nexport type Options = {\n    /**\n     * The error code is either a short uppercase string identifier \n     * for the error or a numeric error code. For example: SERVER_ERROR\n     */\n    code?: string | number,\n\n    /**\n     * The actual error message, if not provided on another way.\n     */\n    message?: string,\n\n    /**\n     * Mark this error as error which need to be logged.\n     */\n    logMessage?: boolean,\n\n    /**\n     * Set the log level for this error.\n     */\n    logLevel?: string | number,\n\n    /**\n     * Specify if the error message should be decorated for public view\n     * or already provide a decoration message.\n     */\n    decorateMessage?: boolean | string,\n\n    /**\n     * Specify a previous error.\n     */\n    previous?: Error,\n\n    /**\n     * In case of a http error provide a numeric Status Code between 400-599.\n     */\n    statusCode?: number,\n\n    /**\n     * Specify a redirect URL in case of a http error.\n     */\n    redirectURL?: string,\n\n    /**\n     * Additional options.\n     */\n    [key: string]: any\n}\n```\n\n## License\n\nMade with ðŸ’š\n\nPublished under [MIT License](./LICENSE).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Peter Placzek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ebec/-/ebec-1.1.1.tgz#683a0dc82a77e86349e05b24c43d7233a6d0f840",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ebec/-/ebec-1.1.1.tgz",
    "hash": "683a0dc82a77e86349e05b24c43d7233a6d0f840",
    "integrity": "sha512-JZ1vcvPQtR+8LGbZmbjG21IxLQq/v47iheJqn2F6yB2CgnGfn8ZVg3myHrf3buIZS8UCwQK0jOSIb3oHX7aH8g==",
    "registry": "npm",
    "packageName": "ebec",
    "cacheIntegrity": "sha512-JZ1vcvPQtR+8LGbZmbjG21IxLQq/v47iheJqn2F6yB2CgnGfn8ZVg3myHrf3buIZS8UCwQK0jOSIb3oHX7aH8g== sha1-aDoNyCp36GNJ4FskxD1yM6bQ+EA="
  },
  "registry": "npm",
  "hash": "683a0dc82a77e86349e05b24c43d7233a6d0f840"
}