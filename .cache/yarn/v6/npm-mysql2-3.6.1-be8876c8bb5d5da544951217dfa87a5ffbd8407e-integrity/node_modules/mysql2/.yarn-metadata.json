{
  "manifest": {
    "name": "mysql2",
    "version": "3.6.1",
    "description": "fast mysql driver. Implements core protocol, prepared statements, ssl and compression in native JS",
    "main": "index.js",
    "typings": "typings/mysql/index",
    "scripts": {
      "lint": "npm run lint:docs && npm run lint:code",
      "lint:code": "eslint index.js promise.js index.d.ts promise.d.ts \"typings/**/*.ts\" \"lib/**/*.js\" \"test/**/*.{js,ts}\" \"benchmarks/**/*.js\"",
      "lint:docs": "eslint Contributing.md README.md \"documentation/**/*.md\" \"examples/*.js\"",
      "test": "node ./test/run.js",
      "test:builtin-node-runner": "NODE_V8_COVERAGE=./coverage node --test --experimental-test-coverage test/builtin-runner",
      "test:tsc-build": "cd \"test/tsc-build\" && npx tsc -p \"tsconfig.json\"",
      "coverage-test": "c8 -r cobertura -r lcov -r text node ./test/run.js",
      "benchmark": "node ./benchmarks/benchmark.js",
      "prettier": "prettier --single-quote --trailing-comma none --write \"{lib,examples,test}/**/*.js\"",
      "prettier:docs": "prettier --single-quote --trailing-comma none --write README.md documentation/*",
      "precommit": "lint-staged",
      "eslint-check": "eslint --print-config .eslintrc | eslint-config-prettier-check",
      "wait-port": "wait-on"
    },
    "lint-staged": {
      "*.js": [
        "prettier --single-quote --trailing-comma none --write",
        "git add"
      ]
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/sidorares/node-mysql2"
    },
    "keywords": [
      "mysql",
      "client",
      "server"
    ],
    "files": [
      "lib",
      "typings/mysql",
      "index.js",
      "index.d.ts",
      "promise.js",
      "promise.d.ts"
    ],
    "exports": {
      ".": "./index.js",
      "./package.json": "./package.json",
      "./promise": "./promise.js",
      "./promise.js": "./promise.js"
    },
    "engines": {
      "node": ">= 8.0"
    },
    "author": {
      "name": "Andrey Sidorov",
      "email": "andrey.sidorov@gmail.com"
    },
    "license": "MIT",
    "dependencies": {
      "denque": "^2.1.0",
      "generate-function": "^2.3.1",
      "iconv-lite": "^0.6.3",
      "long": "^5.2.1",
      "lru-cache": "^8.0.0",
      "named-placeholders": "^1.1.3",
      "seq-queue": "^0.0.5",
      "sqlstring": "^2.3.2"
    },
    "devDependencies": {
      "@types/node": "^20.0.0",
      "@typescript-eslint/eslint-plugin": "^5.42.1",
      "@typescript-eslint/parser": "^5.42.1",
      "assert-diff": "^3.0.2",
      "benchmark": "^2.1.4",
      "c8": "^8.0.0",
      "error-stack-parser": "^2.0.3",
      "eslint": "^8.27.0",
      "eslint-config-prettier": "^9.0.0",
      "eslint-plugin-async-await": "0.0.0",
      "eslint-plugin-markdown": "^3.0.0",
      "husky": "^8.0.2",
      "lint-staged": "^13.0.3",
      "portfinder": "^1.0.28",
      "prettier": "^3.0.0",
      "progress": "^2.0.3",
      "typescript": "^5.0.2",
      "urun": "0.0.8",
      "utest": "0.0.8"
    },
    "_registry": "npm",
    "_loc": "/home/dpcsdev/.cache/yarn/v6/npm-mysql2-3.6.1-be8876c8bb5d5da544951217dfa87a5ffbd8407e-integrity/node_modules/mysql2/package.json",
    "readmeFilename": "README.md",
    "readme": "## MySQL 2\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/sidorares/node-mysql2.svg)](https://greenkeeper.io/)\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![License][license-image]][license-url]  \n\nEnglish | [简体中文](./documentation/zh-cn/) | [Português (BR)](./documentation/pt-br/)\n\n> MySQL client for Node.js with focus on performance. Supports prepared statements, non-utf8 encodings, binary log protocol, compression, ssl [much more](./documentation/en).\n\n__Table of contents__\n\n  - [History and Why MySQL2](#history-and-why-mysql2)\n  - [Installation](#installation)\n  - [First Query](#first-query)\n  - [Using Prepared Statements](#using-prepared-statements)\n  - [Using connection pools](#using-connection-pools)\n  - [Using Promise Wrapper](#using-promise-wrapper)\n  - [Array Results](#array-results)\n    - [Connection Level](#connection-level)\n    - [Query Level](#query-level)\n  - [API and Configuration](#api-and-configuration)\n  - [Documentation](#documentation)\n  - [Acknowledgements](#acknowledgements)\n  - [Contributing](#contributing)\n\n## History and Why MySQL2\n\nMySQL2 project is a continuation of [MySQL-Native][mysql-native]. Protocol parser code was rewritten from scratch and api changed to match popular [mysqljs/mysql][node-mysql]. MySQL2 team is working together with [mysqljs/mysql][node-mysql] team to factor out shared code and move it under [mysqljs][node-mysql] organisation.\n\nMySQL2 is mostly API compatible with [mysqljs][node-mysql] and supports majority of features. MySQL2 also offers these additional features:\n\n - Faster / Better Performance\n - [Prepared Statements](./documentation/en/Prepared-Statements.md)\n - MySQL Binary Log Protocol\n - [MySQL Server](./documentation/en/MySQL-Server.md)\n - Extended support for Encoding and Collation\n - [Promise Wrapper](./documentation/en/Promise-Wrapper.md)\n - Compression\n - SSL and [Authentication Switch](./documentation/en/Authentication-Switch.md)\n - [Custom Streams](./documentation/en/Extras.md)\n - [Pooling](#using-connection-pools)\n\n## Installation\n\nMySQL2 is free from native bindings and can be installed on Linux, Mac OS or Windows without any issues.\n\n```bash\nnpm install --save mysql2\n```\n\nIf you are using TypeScript, you will need to install `@types/node`.\n\n```bash\nnpm install --save-dev @types/node\n```\n\n> For TypeScript documentation and examples, see [here](./documentation/en/TypeScript-Examples.md).\n\n## First Query\n```js\n// get the client\nconst mysql = require('mysql2');\n\n// create the connection to database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test'\n});\n\n// simple query\nconnection.query(\n  'SELECT * FROM `table` WHERE `name` = \"Page\" AND `age` > 45',\n  function(err, results, fields) {\n    console.log(results); // results contains rows returned by server\n    console.log(fields); // fields contains extra meta data about results, if available\n  }\n);\n\n// with placeholder\nconnection.query(\n  'SELECT * FROM `table` WHERE `name` = ? AND `age` > ?',\n  ['Page', 45],\n  function(err, results) {\n    console.log(results);\n  }\n);\n```\n\n## Using Prepared Statements\n\nWith MySQL2 you also get the prepared statements. With prepared statements MySQL doesn't have to prepare plan for same query every time, this results in better performance. If you don't know why they are important, please check these discussions:\n\n- [How prepared statements can protect from SQL Injection attacks](http://stackoverflow.com/questions/8263371/how-can-prepared-statements-protect-from-sql-injection-attacks)\n\nMySQL2 provides `execute` helper which will prepare and query the statement. You can also manually prepare / unprepare statement with `prepare` / `unprepare` methods.\n\n```js\n// get the client\nconst mysql = require('mysql2');\n\n// create the connection to database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test'\n});\n\n// execute will internally call prepare and query\nconnection.execute(\n  'SELECT * FROM `table` WHERE `name` = ? AND `age` > ?',\n  ['Rick C-137', 53],\n  function(err, results, fields) {\n    console.log(results); // results contains rows returned by server\n    console.log(fields); // fields contains extra meta data about results, if available\n\n    // If you execute same statement again, it will be picked from a LRU cache\n    // which will save query preparation time and give better performance\n  }\n);\n```\n\n## Using connection pools\n\nConnection pools help reduce the time spent connecting to the MySQL server by reusing a previous connection, leaving them open instead of closing when you are done with them.\n\nThis improves the latency of queries as you avoid all of the overhead that comes with establishing a new connection.\n\n```js\n// get the client\nconst mysql = require('mysql2');\n\n// Create the connection pool. The pool-specific settings are the defaults\nconst pool = mysql.createPool({\n  host: 'localhost',\n  user: 'root',\n  database: 'test',\n  waitForConnections: true,\n  connectionLimit: 10,\n  maxIdle: 10, // max idle connections, the default value is the same as `connectionLimit`\n  idleTimeout: 60000, // idle connections timeout, in milliseconds, the default value 60000\n  queueLimit: 0,\n  enableKeepAlive: true,\n  keepAliveInitialDelay: 0\n});\n```\nThe pool does not create all connections upfront but creates them on demand until the connection limit is reached.\n\nYou can use the pool in the same way as connections (using `pool.query()` and `pool.execute()`):\n```js\n// For pool initialization, see above\npool.query(\"SELECT `field` FROM `table`\", function(err, rows, fields) {\n  // Connection is automatically released when query resolves\n});\n```\n\nAlternatively, there is also the possibility of manually acquiring a connection from the pool and returning it later:\n```js\n// For pool initialization, see above\npool.getConnection(function(err, conn) {\n  // Do something with the connection\n  conn.query(/* ... */);\n  // Don't forget to release the connection when finished!\n  pool.releaseConnection(conn);\n});\n```\n\n## Using Promise Wrapper\n\nMySQL2 also support Promise API. Which works very well with ES7 async await.\n```js\nasync function main() {\n  // get the client\n  const mysql = require('mysql2/promise');\n  // create the connection\n  const connection = await mysql.createConnection({host:'localhost', user: 'root', database: 'test'});\n  // query database\n  const [rows, fields] = await connection.execute('SELECT * FROM `table` WHERE `name` = ? AND `age` > ?', ['Morty', 14]);\n}\n```\n\nMySQL2 use default `Promise` object available in scope. But you can choose which `Promise` implementation you want to use.\n```js\n// get the client\nconst mysql = require('mysql2/promise');\n\n// get the promise implementation, we will use bluebird\nconst bluebird = require('bluebird');\n\n// create the connection, specify bluebird as Promise\nconst connection = await mysql.createConnection({host:'localhost', user: 'root', database: 'test', Promise: bluebird});\n\n// query database\nconst [rows, fields] = await connection.execute('SELECT * FROM `table` WHERE `name` = ? AND `age` > ?', ['Morty', 14]);\n```\n\nMySQL2 also exposes a .promise() function on Pools, so you can create a promise/non-promise connections from the same pool.\n```js\nasync function main() {\n  // get the client\n  const mysql = require('mysql2');\n  // create the pool\n  const pool = mysql.createPool({host:'localhost', user: 'root', database: 'test'});\n  // now get a Promise wrapped instance of that pool\n  const promisePool = pool.promise();\n  // query database using promises\n  const [rows,fields] = await promisePool.query(\"SELECT 1\");\n}\n```\n\nMySQL2 exposes a .promise() function on Connections, to \"upgrade\" an existing non-promise connection to use promise.\n```js\n// get the client\nconst mysql = require('mysql2');\n// create the connection\nconst con = mysql.createConnection(\n  {host:'localhost', user: 'root', database: 'test'}\n);\ncon.promise().query(\"SELECT 1\")\n  .then( ([rows,fields]) => {\n    console.log(rows);\n  })\n  .catch(console.log)\n  .then( () => con.end());\n```\n\n## Array Results\n\nIf you have two columns with the same name, you might want to get results as an array rather than an object to prevent them from clashing. This is a deviation from the [Node MySQL][node-mysql] library.\n\nFor example: `select 1 as foo, 2 as foo`.\n\nYou can enable this setting at either the connection level (applies to all queries), or at the query level (applies only to that specific query).\n\n### Connection Level\n```js\nconst con = mysql.createConnection(\n  { host: 'localhost', database: 'test', user: 'root', rowsAsArray: true }\n);\n```\n\n### Query Level\n```js\ncon.query({ sql: 'select 1 as foo, 2 as foo', rowsAsArray: true }, function(err, results, fields) {\n  console.log(results); // in this query, results will be an array of arrays rather than an array of objects\n  console.log(fields); // fields are unchanged\n});\n```\n\n## API and Configuration\n\nMySQL2 is mostly API compatible with [Node MySQL][node-mysql]. You should check their API documentation to see all available API options.\n\nOne known incompatibility is that `DECIMAL` values are returned as strings whereas in [Node MySQL][node-mysql] they are returned as numbers. This includes the result of `SUM()` and `AVG()` functions when applied to `INTEGER` arguments. This is done deliberately to avoid loss of precision - see https://github.com/sidorares/node-mysql2/issues/935.\n\nIf you find any other incompatibility with [Node MySQL][node-mysql], Please report via Issue tracker. We will fix reported incompatibility on priority basis.\n\n## Documentation\n\nYou can find more detailed documentation [here](./documentation/en). You should also check various code [examples](./examples) to understand advanced concepts.\n\n## Acknowledgements\n\n  - Internal protocol is written by @sidorares [MySQL-Native](https://github.com/sidorares/nodejs-mysql-native)\n  - Constants, SQL parameters interpolation, Pooling, `ConnectionConfig` class taken from [node-mysql](https://github.com/mysqljs/mysql)\n  - SSL upgrade code based on @TooTallNate [code](https://gist.github.com/TooTallNate/848444)\n  - Secure connection / compressed connection api flags compatible to [MariaSQL](https://github.com/mscdex/node-mariasql/) client.\n  - [Contributors](https://github.com/sidorares/node-mysql2/graphs/contributors)\n\n## Contributing\n\nWant to improve something in `node-mysql2`. Please check [Contributing.md](https://github.com/sidorares/node-mysql2/blob/master/Contributing.md) for detailed instruction on how to get started.\n\n\n[npm-image]: https://img.shields.io/npm/v/mysql2.svg\n[npm-url]: https://npmjs.org/package/mysql2\n[node-version-image]: http://img.shields.io/node/v/mysql2.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/sidorares/node-mysql2/master.svg?label=linux\n[travis-url]: https://travis-ci.org/sidorares/node-mysql2\n[appveyor-image]: https://img.shields.io/appveyor/ci/sidorares/node-mysql2/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/sidorares/node-mysql2\n[downloads-image]: https://img.shields.io/npm/dm/mysql2.svg\n[downloads-url]: https://npmjs.org/package/mysql2\n[license-url]: https://github.com/sidorares/node-mysql2/blob/master/License\n[license-image]: https://img.shields.io/npm/l/mysql2.svg?maxAge=2592000\n[node-mysql]: https://github.com/mysqljs/mysql\n[mysql-native]: https://github.com/sidorares/nodejs-mysql-native\n",
    "licenseText": "Copyright (c) 2016 Andrey Sidorov (sidorares@yandex.ru) and contributors\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mysql2/-/mysql2-3.6.1.tgz#be8876c8bb5d5da544951217dfa87a5ffbd8407e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mysql2/-/mysql2-3.6.1.tgz",
    "hash": "be8876c8bb5d5da544951217dfa87a5ffbd8407e",
    "integrity": "sha512-O7FXjLtNkjcMBpLURwkXIhyVbX9i4lq4nNRCykPNOXfceq94kJ0miagmTEGCZieuO8JtwtXaZ41U6KT4eF9y3g==",
    "registry": "npm",
    "packageName": "mysql2",
    "cacheIntegrity": "sha512-O7FXjLtNkjcMBpLURwkXIhyVbX9i4lq4nNRCykPNOXfceq94kJ0miagmTEGCZieuO8JtwtXaZ41U6KT4eF9y3g== sha1-voh2yLtdXaVElRIX36h6X/vYQH4="
  },
  "registry": "npm",
  "hash": "be8876c8bb5d5da544951217dfa87a5ffbd8407e"
}