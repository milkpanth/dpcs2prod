"use strict";
/*
* MIT License

* Copyright (c) 2018 Aspose Pty Ltd

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:

* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartWall = exports.ChartTitle = exports.ChartSeriesGroup = exports.ChartLinesFormat = exports.ChartCategory = exports.Chart = exports.Camera = exports.BubbleSeries = exports.XYSeries = exports.Series = exports.BubbleChartDataPoint = exports.ScatterChartDataPoint = exports.DataPoint = exports.BoxElement = exports.BorderBoxElement = exports.BlurImageEffect = exports.BlurEffect = exports.BlockElement = exports.BiLevelEffect = exports.Base64InputFile = exports.InputFile = exports.BarElement = exports.AxisType = exports.Axis = exports.Axes = exports.AudioFrame = exports.GeometryShape = exports.ShapeBase = exports.ResourceBase = exports.ArrowHeadProperties = exports.ArrayElement = exports.ArcToPathSegment = exports.PathSegment = exports.ApiInfo = exports.AlphaReplaceEffect = exports.AlphaModulateFixedEffect = exports.AlphaModulateEffect = exports.AlphaInverseEffect = exports.AlphaFloorEffect = exports.AlphaCeilingEffect = exports.AlphaBiLevelEffect = exports.ImageTransformEffect = exports.AddSlide = exports.AddShape = exports.AddMasterSlide = exports.AddLayoutSlide = exports.Task = exports.AccessPermissions = exports.AccentElement = exports.MathElement = void 0;
exports.GraphicalObject = exports.GradientFillStop = exports.GradientFill = exports.GlowEffect = exports.GifExportOptions = exports.ImageExportOptionsBase = exports.GeometryPaths = exports.GeometryPath = exports.FunctionElement = exports.FractionElement = exports.FormatScheme = exports.FontsData = exports.FontSubstRule = exports.FontSet = exports.FontScheme = exports.FontFallbackRule = exports.FontData = exports.FillOverlayImageEffect = exports.FillOverlayEffect = exports.FillFormat = exports.FilesUploadResult = exports.FilesList = exports.FileVersions = exports.FileVersion = exports.StorageFile = exports.ExportOptions = exports.ExportFormat = exports.ErrorDetails = exports.EntityExists = exports.EffectFormat = exports.Effect = exports.DuotoneEffect = exports.DocumentReplaceResult = exports.DocumentProperty = exports.DocumentProperties = exports.Document = exports.DiscUsage = exports.DelimiterElement = exports.DataSource = exports.CustomDashPattern = exports.CubicBezierToPathSegment = exports.Connector = exports.CommonSlideViewProperties = exports.CommentAuthors = exports.CommentAuthor = exports.ColorScheme = exports.ColorReplaceEffect = exports.ColorChangeEffect = exports.ClosePathSegment = exports.ChartWallType = void 0;
exports.Operation = exports.OneValueSeries = exports.OneValueChartDataPoint = exports.OleObjectFrame = exports.ObjectExist = exports.NotesSlideHeaderFooter = exports.NotesSlideExportFormat = exports.NotesSlide = exports.NotesCommentsLayoutingOptions = exports.NormalViewRestoredProperties = exports.NoFill = exports.NaryOperatorElement = exports.MoveToPathSegment = exports.ModelError = exports.MergingSource = exports.Merge = exports.MatrixElement = exports.MathParagraph = exports.MathFormat = exports.MasterSlides = exports.MasterSlide = exports.MarkdownExportOptions = exports.LuminanceEffect = exports.Literals = exports.LineToPathSegment = exports.LineFormat = exports.LimitElement = exports.LightRig = exports.Legend = exports.LeftSubSuperscriptElement = exports.LayoutSlides = exports.LayoutSlide = exports.InteractiveSequence = exports.Input = exports.InnerShadowEffect = exports.Images = exports.ImageExportOptions = exports.ImageExportFormat = exports.Image = exports.IShapeExportOptions = exports.Hyperlink = exports.HtmlExportOptions = exports.Html5ExportOptions = exports.HslEffect = exports.HeaderFooter = exports.HandoutLayoutingOptions = exports.SlidesLayoutOptions = exports.GroupingCharacterElement = exports.GroupShape = exports.GrayScaleEffect = void 0;
exports.ShapeBevel = exports.Shape = exports.SeriesMarker = exports.Sections = exports.SectionZoomFrame = exports.ZoomObject = exports.Section = exports.ScatterSeries = exports.SaveSlide = exports.SaveShape = exports.Save = exports.RightSubSuperscriptElement = exports.ResponseOutputFile = exports.ResourceUri = exports.ResetSlide = exports.RequestInputFile = exports.ReplaceText = exports.ReorderSlide = exports.RemoveSlide = exports.RemoveShape = exports.ReflectionEffect = exports.RadicalElement = exports.QuadraticBezierToPathSegment = exports.ProtectionProperties = exports.PresetShadowEffect = exports.PresentationsMergeRequest = exports.PresentationToMerge = exports.PptxExportOptions = exports.Portions = exports.PortionFormat = exports.Portion = exports.PlotArea = exports.Placeholders = exports.Placeholder = exports.Pipeline = exports.PictureFrame = exports.PictureFill = exports.PdfImportOptions = exports.PdfExportOptions = exports.PatternFill = exports.PathOutputFile = exports.PathInputFile = exports.Paragraphs = exports.ParagraphFormat = exports.Paragraph = exports.OutputFile = exports.OuterShadowEffect = exports.OrderedMergeRequest = exports.OperationProgress = exports.OperationError = void 0;
exports.UpdateShape = exports.UpdateBackground = exports.TintEffect = exports.TiffExportOptions = exports.ThreeDFormat = exports.Theme = exports.TextItems = exports.TextItem = exports.TextFrameFormat = exports.TextElement = exports.TextBounds = exports.TableRow = exports.TableColumn = exports.TableCellSplitType = exports.TableCellMergeOptions = exports.TableCell = exports.Table = exports.SwfExportOptions = exports.SvgExportOptions = exports.SuperscriptElement = exports.SummaryZoomSection = exports.SummaryZoomFrame = exports.SubscriptElement = exports.StorageExist = exports.SplitDocumentResult = exports.SpecialSlideType = exports.SolidFill = exports.SoftEdgeEffect = exports.SmartArtShape = exports.SmartArtNode = exports.SmartArt = exports.Slides = exports.SlideShowTransition = exports.SlideShowProperties = exports.SlideReplaceResult = exports.SlideProperties = exports.SlideModernComment = exports.SlideExportFormat = exports.SlideComments = exports.SlideComment = exports.SlideCommentBase = exports.SlideBackground = exports.SlideAnimation = exports.Slide = exports.ShapesAlignmentType = exports.Shapes = exports.ShapeType = exports.ShapeThumbnailBounds = exports.ShapeImageExportOptions = exports.ShapeExportFormat = void 0;
exports.ZoomFrame = exports.XpsExportOptions = exports.XamlExportOptions = exports.Workbook = exports.ViewProperties = exports.VideoFrame = exports.VideoExportOptions = exports.VbaReference = exports.VbaProject = exports.VbaModule = void 0;
/**
 * Math element.
 */
class MathElement {
}
exports.MathElement = MathElement;
(function (MathElement) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Accent"] = 'Accent'] = "Accent";
        TypeEnum[TypeEnum["Array"] = 'Array'] = "Array";
        TypeEnum[TypeEnum["Bar"] = 'Bar'] = "Bar";
        TypeEnum[TypeEnum["Block"] = 'Block'] = "Block";
        TypeEnum[TypeEnum["BorderBox"] = 'BorderBox'] = "BorderBox";
        TypeEnum[TypeEnum["Box"] = 'Box'] = "Box";
        TypeEnum[TypeEnum["Delimiter"] = 'Delimiter'] = "Delimiter";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Fraction"] = 'Fraction'] = "Fraction";
        TypeEnum[TypeEnum["Function"] = 'Function'] = "Function";
        TypeEnum[TypeEnum["GroupingCharacter"] = 'GroupingCharacter'] = "GroupingCharacter";
        TypeEnum[TypeEnum["LeftSubSuperscriptElement"] = 'LeftSubSuperscriptElement'] = "LeftSubSuperscriptElement";
        TypeEnum[TypeEnum["Limit"] = 'Limit'] = "Limit";
        TypeEnum[TypeEnum["Matrix"] = 'Matrix'] = "Matrix";
        TypeEnum[TypeEnum["NaryOperator"] = 'NaryOperator'] = "NaryOperator";
        TypeEnum[TypeEnum["Radical"] = 'Radical'] = "Radical";
        TypeEnum[TypeEnum["RightSubSuperscriptElement"] = 'RightSubSuperscriptElement'] = "RightSubSuperscriptElement";
        TypeEnum[TypeEnum["SubscriptElement"] = 'SubscriptElement'] = "SubscriptElement";
        TypeEnum[TypeEnum["SuperscriptElement"] = 'SuperscriptElement'] = "SuperscriptElement";
    })(TypeEnum = MathElement.TypeEnum || (MathElement.TypeEnum = {}));
})(MathElement = exports.MathElement || (exports.MathElement = {}));
/**
 * Specifies the accent function, consisting of a base and a combining diacritical mark
 */
class AccentElement extends MathElement {
    constructor() {
        super();
        this.type = AccentElement.TypeEnum.Accent;
    }
}
exports.AccentElement = AccentElement;
/**
 * A set of properties specifying which access permissions should be granted when the document is opened with user access.
 */
class AccessPermissions {
}
exports.AccessPermissions = AccessPermissions;
/**
 * Represents task for pipeline.
 */
class Task {
}
exports.Task = Task;
(function (Task) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Save"] = 'Save'] = "Save";
        TypeEnum[TypeEnum["SaveSlide"] = 'SaveSlide'] = "SaveSlide";
        TypeEnum[TypeEnum["SaveShape"] = 'SaveShape'] = "SaveShape";
        TypeEnum[TypeEnum["AddSlide"] = 'AddSlide'] = "AddSlide";
        TypeEnum[TypeEnum["AddMasterSlide"] = 'AddMasterSlide'] = "AddMasterSlide";
        TypeEnum[TypeEnum["AddLayoutSlide"] = 'AddLayoutSlide'] = "AddLayoutSlide";
        TypeEnum[TypeEnum["RemoveSlide"] = 'RemoveSlide'] = "RemoveSlide";
        TypeEnum[TypeEnum["ReoderSlide"] = 'ReoderSlide'] = "ReoderSlide";
        TypeEnum[TypeEnum["Merge"] = 'Merge'] = "Merge";
        TypeEnum[TypeEnum["UpdateBackground"] = 'UpdateBackground'] = "UpdateBackground";
        TypeEnum[TypeEnum["ResetSlide"] = 'ResetSlide'] = "ResetSlide";
        TypeEnum[TypeEnum["AddShape"] = 'AddShape'] = "AddShape";
        TypeEnum[TypeEnum["RemoveShape"] = 'RemoveShape'] = "RemoveShape";
        TypeEnum[TypeEnum["UpdateShape"] = 'UpdateShape'] = "UpdateShape";
        TypeEnum[TypeEnum["ReplaceText"] = 'ReplaceText'] = "ReplaceText";
    })(TypeEnum = Task.TypeEnum || (Task.TypeEnum = {}));
})(Task = exports.Task || (exports.Task = {}));
/**
 * Add layout slide task.
 */
class AddLayoutSlide extends Task {
    constructor() {
        super();
        this.type = AddLayoutSlide.TypeEnum.AddLayoutSlide;
    }
}
exports.AddLayoutSlide = AddLayoutSlide;
/**
 * Add master slide task.
 */
class AddMasterSlide extends Task {
    constructor() {
        super();
        this.type = AddMasterSlide.TypeEnum.AddMasterSlide;
    }
}
exports.AddMasterSlide = AddMasterSlide;
/**
 * Add shape task.
 */
class AddShape extends Task {
    constructor() {
        super();
        this.type = AddShape.TypeEnum.AddShape;
    }
}
exports.AddShape = AddShape;
/**
 * Add slide task.
 */
class AddSlide extends Task {
    constructor() {
        super();
        this.type = AddSlide.TypeEnum.AddSlide;
    }
}
exports.AddSlide = AddSlide;
/**
 * Image transform effect
 */
class ImageTransformEffect {
}
exports.ImageTransformEffect = ImageTransformEffect;
(function (ImageTransformEffect) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["AlphaBiLevel"] = 'AlphaBiLevel'] = "AlphaBiLevel";
        TypeEnum[TypeEnum["AlphaCeiling"] = 'AlphaCeiling'] = "AlphaCeiling";
        TypeEnum[TypeEnum["AlphaFloor"] = 'AlphaFloor'] = "AlphaFloor";
        TypeEnum[TypeEnum["AlphaInverse"] = 'AlphaInverse'] = "AlphaInverse";
        TypeEnum[TypeEnum["AlphaModulate"] = 'AlphaModulate'] = "AlphaModulate";
        TypeEnum[TypeEnum["AlphaModulateFixed"] = 'AlphaModulateFixed'] = "AlphaModulateFixed";
        TypeEnum[TypeEnum["AlphaReplace"] = 'AlphaReplace'] = "AlphaReplace";
        TypeEnum[TypeEnum["BiLevel"] = 'BiLevel'] = "BiLevel";
        TypeEnum[TypeEnum["Blur"] = 'Blur'] = "Blur";
        TypeEnum[TypeEnum["ColorChange"] = 'ColorChange'] = "ColorChange";
        TypeEnum[TypeEnum["ColorReplace"] = 'ColorReplace'] = "ColorReplace";
        TypeEnum[TypeEnum["Duotone"] = 'Duotone'] = "Duotone";
        TypeEnum[TypeEnum["FillOverlay"] = 'FillOverlay'] = "FillOverlay";
        TypeEnum[TypeEnum["GrayScale"] = 'GrayScale'] = "GrayScale";
        TypeEnum[TypeEnum["Hsl"] = 'Hsl'] = "Hsl";
        TypeEnum[TypeEnum["Luminance"] = 'Luminance'] = "Luminance";
        TypeEnum[TypeEnum["Tint"] = 'Tint'] = "Tint";
    })(TypeEnum = ImageTransformEffect.TypeEnum || (ImageTransformEffect.TypeEnum = {}));
})(ImageTransformEffect = exports.ImageTransformEffect || (exports.ImageTransformEffect = {}));
/**
 * Represents an Alpha Bi-Level effect.
 */
class AlphaBiLevelEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaBiLevelEffect.TypeEnum.AlphaBiLevel;
    }
}
exports.AlphaBiLevelEffect = AlphaBiLevelEffect;
/**
 * Represents an Alpha Ceiling effect.
 */
class AlphaCeilingEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaCeilingEffect.TypeEnum.AlphaCeiling;
    }
}
exports.AlphaCeilingEffect = AlphaCeilingEffect;
/**
 * /// Represents an Alpha Floor effect.
 */
class AlphaFloorEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaFloorEffect.TypeEnum.AlphaFloor;
    }
}
exports.AlphaFloorEffect = AlphaFloorEffect;
/**
 * Represents an Alpha Inverse effect.
 */
class AlphaInverseEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaInverseEffect.TypeEnum.AlphaInverse;
    }
}
exports.AlphaInverseEffect = AlphaInverseEffect;
/**
 * Represents an Alpha Modulate effect.
 */
class AlphaModulateEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaModulateEffect.TypeEnum.AlphaModulate;
    }
}
exports.AlphaModulateEffect = AlphaModulateEffect;
/**
 * Represents an Alpha Modulate Fixed effect.
 */
class AlphaModulateFixedEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaModulateFixedEffect.TypeEnum.AlphaModulateFixed;
    }
}
exports.AlphaModulateFixedEffect = AlphaModulateFixedEffect;
/**
 * Represents an Alpha Replace Effect effect.
 */
class AlphaReplaceEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = AlphaReplaceEffect.TypeEnum.AlphaReplace;
    }
}
exports.AlphaReplaceEffect = AlphaReplaceEffect;
/**
 * Represents response for ApiInfo  DTO
 */
class ApiInfo {
}
exports.ApiInfo = ApiInfo;
/**
 * Represents segment of geometry path
 */
class PathSegment {
}
exports.PathSegment = PathSegment;
(function (PathSegment) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Close"] = 'Close'] = "Close";
        TypeEnum[TypeEnum["MoveTo"] = 'MoveTo'] = "MoveTo";
        TypeEnum[TypeEnum["LineTo"] = 'LineTo'] = "LineTo";
        TypeEnum[TypeEnum["ArcTo"] = 'ArcTo'] = "ArcTo";
        TypeEnum[TypeEnum["QuadBezierTo"] = 'QuadBezierTo'] = "QuadBezierTo";
        TypeEnum[TypeEnum["CubicBezierTo"] = 'CubicBezierTo'] = "CubicBezierTo";
    })(TypeEnum = PathSegment.TypeEnum || (PathSegment.TypeEnum = {}));
})(PathSegment = exports.PathSegment || (exports.PathSegment = {}));
/**
 * Arc segment of the geometry path
 */
class ArcToPathSegment extends PathSegment {
    constructor() {
        super();
        this.type = ArcToPathSegment.TypeEnum.ArcTo;
    }
}
exports.ArcToPathSegment = ArcToPathSegment;
/**
 * An array of elements.
 */
class ArrayElement extends MathElement {
    constructor() {
        super();
        this.type = ArrayElement.TypeEnum.Array;
    }
}
exports.ArrayElement = ArrayElement;
(function (ArrayElement) {
    let BaseJustificationEnum;
    (function (BaseJustificationEnum) {
        BaseJustificationEnum[BaseJustificationEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        BaseJustificationEnum[BaseJustificationEnum["Top"] = 'Top'] = "Top";
        BaseJustificationEnum[BaseJustificationEnum["Center"] = 'Center'] = "Center";
        BaseJustificationEnum[BaseJustificationEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(BaseJustificationEnum = ArrayElement.BaseJustificationEnum || (ArrayElement.BaseJustificationEnum = {}));
    let RowSpacingRuleEnum;
    (function (RowSpacingRuleEnum) {
        RowSpacingRuleEnum[RowSpacingRuleEnum["SingleLineGap"] = 'SingleLineGap'] = "SingleLineGap";
        RowSpacingRuleEnum[RowSpacingRuleEnum["OneAndAHalfLineGap"] = 'OneAndAHalfLineGap'] = "OneAndAHalfLineGap";
        RowSpacingRuleEnum[RowSpacingRuleEnum["TwoLineGap"] = 'TwoLineGap'] = "TwoLineGap";
        RowSpacingRuleEnum[RowSpacingRuleEnum["Exactly"] = 'Exactly'] = "Exactly";
        RowSpacingRuleEnum[RowSpacingRuleEnum["Multiple"] = 'Multiple'] = "Multiple";
    })(RowSpacingRuleEnum = ArrayElement.RowSpacingRuleEnum || (ArrayElement.RowSpacingRuleEnum = {}));
})(ArrayElement = exports.ArrayElement || (exports.ArrayElement = {}));
/**
 * Arrow head properties.
 */
class ArrowHeadProperties {
}
exports.ArrowHeadProperties = ArrowHeadProperties;
(function (ArrowHeadProperties) {
    let LengthEnum;
    (function (LengthEnum) {
        LengthEnum[LengthEnum["Short"] = 'Short'] = "Short";
        LengthEnum[LengthEnum["Medium"] = 'Medium'] = "Medium";
        LengthEnum[LengthEnum["Long"] = 'Long'] = "Long";
        LengthEnum[LengthEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(LengthEnum = ArrowHeadProperties.LengthEnum || (ArrowHeadProperties.LengthEnum = {}));
    let StyleEnum;
    (function (StyleEnum) {
        StyleEnum[StyleEnum["None"] = 'None'] = "None";
        StyleEnum[StyleEnum["Triangle"] = 'Triangle'] = "Triangle";
        StyleEnum[StyleEnum["Stealth"] = 'Stealth'] = "Stealth";
        StyleEnum[StyleEnum["Diamond"] = 'Diamond'] = "Diamond";
        StyleEnum[StyleEnum["Oval"] = 'Oval'] = "Oval";
        StyleEnum[StyleEnum["Open"] = 'Open'] = "Open";
        StyleEnum[StyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(StyleEnum = ArrowHeadProperties.StyleEnum || (ArrowHeadProperties.StyleEnum = {}));
    let WidthEnum;
    (function (WidthEnum) {
        WidthEnum[WidthEnum["Narrow"] = 'Narrow'] = "Narrow";
        WidthEnum[WidthEnum["Medium"] = 'Medium'] = "Medium";
        WidthEnum[WidthEnum["Wide"] = 'Wide'] = "Wide";
        WidthEnum[WidthEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(WidthEnum = ArrowHeadProperties.WidthEnum || (ArrowHeadProperties.WidthEnum = {}));
})(ArrowHeadProperties = exports.ArrowHeadProperties || (exports.ArrowHeadProperties = {}));
/**
 * Base class for all Slide's DTO objects
 */
class ResourceBase {
}
exports.ResourceBase = ResourceBase;
/**
 * Slide shape.
 */
class ShapeBase extends ResourceBase {
    constructor() {
        super();
    }
}
exports.ShapeBase = ShapeBase;
(function (ShapeBase) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Shape"] = 'Shape'] = "Shape";
        TypeEnum[TypeEnum["Chart"] = 'Chart'] = "Chart";
        TypeEnum[TypeEnum["Table"] = 'Table'] = "Table";
        TypeEnum[TypeEnum["PictureFrame"] = 'PictureFrame'] = "PictureFrame";
        TypeEnum[TypeEnum["VideoFrame"] = 'VideoFrame'] = "VideoFrame";
        TypeEnum[TypeEnum["AudioFrame"] = 'AudioFrame'] = "AudioFrame";
        TypeEnum[TypeEnum["SmartArt"] = 'SmartArt'] = "SmartArt";
        TypeEnum[TypeEnum["OleObjectFrame"] = 'OleObjectFrame'] = "OleObjectFrame";
        TypeEnum[TypeEnum["GroupShape"] = 'GroupShape'] = "GroupShape";
        TypeEnum[TypeEnum["GraphicalObject"] = 'GraphicalObject'] = "GraphicalObject";
        TypeEnum[TypeEnum["Connector"] = 'Connector'] = "Connector";
        TypeEnum[TypeEnum["SmartArtShape"] = 'SmartArtShape'] = "SmartArtShape";
        TypeEnum[TypeEnum["ZoomFrame"] = 'ZoomFrame'] = "ZoomFrame";
        TypeEnum[TypeEnum["SectionZoomFrame"] = 'SectionZoomFrame'] = "SectionZoomFrame";
        TypeEnum[TypeEnum["SummaryZoomFrame"] = 'SummaryZoomFrame'] = "SummaryZoomFrame";
        TypeEnum[TypeEnum["SummaryZoomSection"] = 'SummaryZoomSection'] = "SummaryZoomSection";
    })(TypeEnum = ShapeBase.TypeEnum || (ShapeBase.TypeEnum = {}));
})(ShapeBase = exports.ShapeBase || (exports.ShapeBase = {}));
/**
 * Represents GeometryShape resource.
 */
class GeometryShape extends ShapeBase {
    constructor() {
        super();
    }
}
exports.GeometryShape = GeometryShape;
(function (GeometryShape) {
    let ShapeTypeEnum;
    (function (ShapeTypeEnum) {
        ShapeTypeEnum[ShapeTypeEnum["Custom"] = 'Custom'] = "Custom";
        ShapeTypeEnum[ShapeTypeEnum["Line"] = 'Line'] = "Line";
        ShapeTypeEnum[ShapeTypeEnum["LineInverse"] = 'LineInverse'] = "LineInverse";
        ShapeTypeEnum[ShapeTypeEnum["Triangle"] = 'Triangle'] = "Triangle";
        ShapeTypeEnum[ShapeTypeEnum["RightTriangle"] = 'RightTriangle'] = "RightTriangle";
        ShapeTypeEnum[ShapeTypeEnum["Rectangle"] = 'Rectangle'] = "Rectangle";
        ShapeTypeEnum[ShapeTypeEnum["Diamond"] = 'Diamond'] = "Diamond";
        ShapeTypeEnum[ShapeTypeEnum["Parallelogram"] = 'Parallelogram'] = "Parallelogram";
        ShapeTypeEnum[ShapeTypeEnum["Trapezoid"] = 'Trapezoid'] = "Trapezoid";
        ShapeTypeEnum[ShapeTypeEnum["NonIsoscelesTrapezoid"] = 'NonIsoscelesTrapezoid'] = "NonIsoscelesTrapezoid";
        ShapeTypeEnum[ShapeTypeEnum["Pentagon"] = 'Pentagon'] = "Pentagon";
        ShapeTypeEnum[ShapeTypeEnum["Hexagon"] = 'Hexagon'] = "Hexagon";
        ShapeTypeEnum[ShapeTypeEnum["Heptagon"] = 'Heptagon'] = "Heptagon";
        ShapeTypeEnum[ShapeTypeEnum["Octagon"] = 'Octagon'] = "Octagon";
        ShapeTypeEnum[ShapeTypeEnum["Decagon"] = 'Decagon'] = "Decagon";
        ShapeTypeEnum[ShapeTypeEnum["Dodecagon"] = 'Dodecagon'] = "Dodecagon";
        ShapeTypeEnum[ShapeTypeEnum["FourPointedStar"] = 'FourPointedStar'] = "FourPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["FivePointedStar"] = 'FivePointedStar'] = "FivePointedStar";
        ShapeTypeEnum[ShapeTypeEnum["SixPointedStar"] = 'SixPointedStar'] = "SixPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["SevenPointedStar"] = 'SevenPointedStar'] = "SevenPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["EightPointedStar"] = 'EightPointedStar'] = "EightPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["TenPointedStar"] = 'TenPointedStar'] = "TenPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["TwelvePointedStar"] = 'TwelvePointedStar'] = "TwelvePointedStar";
        ShapeTypeEnum[ShapeTypeEnum["SixteenPointedStar"] = 'SixteenPointedStar'] = "SixteenPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["TwentyFourPointedStar"] = 'TwentyFourPointedStar'] = "TwentyFourPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["ThirtyTwoPointedStar"] = 'ThirtyTwoPointedStar'] = "ThirtyTwoPointedStar";
        ShapeTypeEnum[ShapeTypeEnum["RoundCornerRectangle"] = 'RoundCornerRectangle'] = "RoundCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["OneRoundCornerRectangle"] = 'OneRoundCornerRectangle'] = "OneRoundCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["TwoSamesideRoundCornerRectangle"] = 'TwoSamesideRoundCornerRectangle'] = "TwoSamesideRoundCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["TwoDiagonalRoundCornerRectangle"] = 'TwoDiagonalRoundCornerRectangle'] = "TwoDiagonalRoundCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["OneSnipOneRoundCornerRectangle"] = 'OneSnipOneRoundCornerRectangle'] = "OneSnipOneRoundCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["OneSnipCornerRectangle"] = 'OneSnipCornerRectangle'] = "OneSnipCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["TwoSamesideSnipCornerRectangle"] = 'TwoSamesideSnipCornerRectangle'] = "TwoSamesideSnipCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["TwoDiagonalSnipCornerRectangle"] = 'TwoDiagonalSnipCornerRectangle'] = "TwoDiagonalSnipCornerRectangle";
        ShapeTypeEnum[ShapeTypeEnum["Plaque"] = 'Plaque'] = "Plaque";
        ShapeTypeEnum[ShapeTypeEnum["Ellipse"] = 'Ellipse'] = "Ellipse";
        ShapeTypeEnum[ShapeTypeEnum["Teardrop"] = 'Teardrop'] = "Teardrop";
        ShapeTypeEnum[ShapeTypeEnum["HomePlate"] = 'HomePlate'] = "HomePlate";
        ShapeTypeEnum[ShapeTypeEnum["Chevron"] = 'Chevron'] = "Chevron";
        ShapeTypeEnum[ShapeTypeEnum["PieWedge"] = 'PieWedge'] = "PieWedge";
        ShapeTypeEnum[ShapeTypeEnum["Pie"] = 'Pie'] = "Pie";
        ShapeTypeEnum[ShapeTypeEnum["BlockArc"] = 'BlockArc'] = "BlockArc";
        ShapeTypeEnum[ShapeTypeEnum["Donut"] = 'Donut'] = "Donut";
        ShapeTypeEnum[ShapeTypeEnum["NoSmoking"] = 'NoSmoking'] = "NoSmoking";
        ShapeTypeEnum[ShapeTypeEnum["RightArrow"] = 'RightArrow'] = "RightArrow";
        ShapeTypeEnum[ShapeTypeEnum["LeftArrow"] = 'LeftArrow'] = "LeftArrow";
        ShapeTypeEnum[ShapeTypeEnum["UpArrow"] = 'UpArrow'] = "UpArrow";
        ShapeTypeEnum[ShapeTypeEnum["DownArrow"] = 'DownArrow'] = "DownArrow";
        ShapeTypeEnum[ShapeTypeEnum["StripedRightArrow"] = 'StripedRightArrow'] = "StripedRightArrow";
        ShapeTypeEnum[ShapeTypeEnum["NotchedRightArrow"] = 'NotchedRightArrow'] = "NotchedRightArrow";
        ShapeTypeEnum[ShapeTypeEnum["BentUpArrow"] = 'BentUpArrow'] = "BentUpArrow";
        ShapeTypeEnum[ShapeTypeEnum["LeftRightArrow"] = 'LeftRightArrow'] = "LeftRightArrow";
        ShapeTypeEnum[ShapeTypeEnum["UpDownArrow"] = 'UpDownArrow'] = "UpDownArrow";
        ShapeTypeEnum[ShapeTypeEnum["LeftUpArrow"] = 'LeftUpArrow'] = "LeftUpArrow";
        ShapeTypeEnum[ShapeTypeEnum["LeftRightUpArrow"] = 'LeftRightUpArrow'] = "LeftRightUpArrow";
        ShapeTypeEnum[ShapeTypeEnum["QuadArrow"] = 'QuadArrow'] = "QuadArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutLeftArrow"] = 'CalloutLeftArrow'] = "CalloutLeftArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutRightArrow"] = 'CalloutRightArrow'] = "CalloutRightArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutUpArrow"] = 'CalloutUpArrow'] = "CalloutUpArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutDownArrow"] = 'CalloutDownArrow'] = "CalloutDownArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutLeftRightArrow"] = 'CalloutLeftRightArrow'] = "CalloutLeftRightArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutUpDownArrow"] = 'CalloutUpDownArrow'] = "CalloutUpDownArrow";
        ShapeTypeEnum[ShapeTypeEnum["CalloutQuadArrow"] = 'CalloutQuadArrow'] = "CalloutQuadArrow";
        ShapeTypeEnum[ShapeTypeEnum["BentArrow"] = 'BentArrow'] = "BentArrow";
        ShapeTypeEnum[ShapeTypeEnum["UTurnArrow"] = 'UTurnArrow'] = "UTurnArrow";
        ShapeTypeEnum[ShapeTypeEnum["CircularArrow"] = 'CircularArrow'] = "CircularArrow";
        ShapeTypeEnum[ShapeTypeEnum["LeftCircularArrow"] = 'LeftCircularArrow'] = "LeftCircularArrow";
        ShapeTypeEnum[ShapeTypeEnum["LeftRightCircularArrow"] = 'LeftRightCircularArrow'] = "LeftRightCircularArrow";
        ShapeTypeEnum[ShapeTypeEnum["CurvedRightArrow"] = 'CurvedRightArrow'] = "CurvedRightArrow";
        ShapeTypeEnum[ShapeTypeEnum["CurvedLeftArrow"] = 'CurvedLeftArrow'] = "CurvedLeftArrow";
        ShapeTypeEnum[ShapeTypeEnum["CurvedUpArrow"] = 'CurvedUpArrow'] = "CurvedUpArrow";
        ShapeTypeEnum[ShapeTypeEnum["CurvedDownArrow"] = 'CurvedDownArrow'] = "CurvedDownArrow";
        ShapeTypeEnum[ShapeTypeEnum["SwooshArrow"] = 'SwooshArrow'] = "SwooshArrow";
        ShapeTypeEnum[ShapeTypeEnum["Cube"] = 'Cube'] = "Cube";
        ShapeTypeEnum[ShapeTypeEnum["Can"] = 'Can'] = "Can";
        ShapeTypeEnum[ShapeTypeEnum["LightningBolt"] = 'LightningBolt'] = "LightningBolt";
        ShapeTypeEnum[ShapeTypeEnum["Heart"] = 'Heart'] = "Heart";
        ShapeTypeEnum[ShapeTypeEnum["Sun"] = 'Sun'] = "Sun";
        ShapeTypeEnum[ShapeTypeEnum["Moon"] = 'Moon'] = "Moon";
        ShapeTypeEnum[ShapeTypeEnum["SmileyFace"] = 'SmileyFace'] = "SmileyFace";
        ShapeTypeEnum[ShapeTypeEnum["IrregularSeal1"] = 'IrregularSeal1'] = "IrregularSeal1";
        ShapeTypeEnum[ShapeTypeEnum["IrregularSeal2"] = 'IrregularSeal2'] = "IrregularSeal2";
        ShapeTypeEnum[ShapeTypeEnum["FoldedCorner"] = 'FoldedCorner'] = "FoldedCorner";
        ShapeTypeEnum[ShapeTypeEnum["Bevel"] = 'Bevel'] = "Bevel";
        ShapeTypeEnum[ShapeTypeEnum["Frame"] = 'Frame'] = "Frame";
        ShapeTypeEnum[ShapeTypeEnum["HalfFrame"] = 'HalfFrame'] = "HalfFrame";
        ShapeTypeEnum[ShapeTypeEnum["Corner"] = 'Corner'] = "Corner";
        ShapeTypeEnum[ShapeTypeEnum["DiagonalStripe"] = 'DiagonalStripe'] = "DiagonalStripe";
        ShapeTypeEnum[ShapeTypeEnum["Chord"] = 'Chord'] = "Chord";
        ShapeTypeEnum[ShapeTypeEnum["CurvedArc"] = 'CurvedArc'] = "CurvedArc";
        ShapeTypeEnum[ShapeTypeEnum["LeftBracket"] = 'LeftBracket'] = "LeftBracket";
        ShapeTypeEnum[ShapeTypeEnum["RightBracket"] = 'RightBracket'] = "RightBracket";
        ShapeTypeEnum[ShapeTypeEnum["LeftBrace"] = 'LeftBrace'] = "LeftBrace";
        ShapeTypeEnum[ShapeTypeEnum["RightBrace"] = 'RightBrace'] = "RightBrace";
        ShapeTypeEnum[ShapeTypeEnum["BracketPair"] = 'BracketPair'] = "BracketPair";
        ShapeTypeEnum[ShapeTypeEnum["BracePair"] = 'BracePair'] = "BracePair";
        ShapeTypeEnum[ShapeTypeEnum["StraightConnector1"] = 'StraightConnector1'] = "StraightConnector1";
        ShapeTypeEnum[ShapeTypeEnum["BentConnector2"] = 'BentConnector2'] = "BentConnector2";
        ShapeTypeEnum[ShapeTypeEnum["BentConnector3"] = 'BentConnector3'] = "BentConnector3";
        ShapeTypeEnum[ShapeTypeEnum["BentConnector4"] = 'BentConnector4'] = "BentConnector4";
        ShapeTypeEnum[ShapeTypeEnum["BentConnector5"] = 'BentConnector5'] = "BentConnector5";
        ShapeTypeEnum[ShapeTypeEnum["CurvedConnector2"] = 'CurvedConnector2'] = "CurvedConnector2";
        ShapeTypeEnum[ShapeTypeEnum["CurvedConnector3"] = 'CurvedConnector3'] = "CurvedConnector3";
        ShapeTypeEnum[ShapeTypeEnum["CurvedConnector4"] = 'CurvedConnector4'] = "CurvedConnector4";
        ShapeTypeEnum[ShapeTypeEnum["CurvedConnector5"] = 'CurvedConnector5'] = "CurvedConnector5";
        ShapeTypeEnum[ShapeTypeEnum["Callout1"] = 'Callout1'] = "Callout1";
        ShapeTypeEnum[ShapeTypeEnum["Callout2"] = 'Callout2'] = "Callout2";
        ShapeTypeEnum[ShapeTypeEnum["Callout3"] = 'Callout3'] = "Callout3";
        ShapeTypeEnum[ShapeTypeEnum["Callout1WithAccent"] = 'Callout1WithAccent'] = "Callout1WithAccent";
        ShapeTypeEnum[ShapeTypeEnum["Callout2WithAccent"] = 'Callout2WithAccent'] = "Callout2WithAccent";
        ShapeTypeEnum[ShapeTypeEnum["Callout3WithAccent"] = 'Callout3WithAccent'] = "Callout3WithAccent";
        ShapeTypeEnum[ShapeTypeEnum["Callout1WithBorder"] = 'Callout1WithBorder'] = "Callout1WithBorder";
        ShapeTypeEnum[ShapeTypeEnum["Callout2WithBorder"] = 'Callout2WithBorder'] = "Callout2WithBorder";
        ShapeTypeEnum[ShapeTypeEnum["Callout3WithBorder"] = 'Callout3WithBorder'] = "Callout3WithBorder";
        ShapeTypeEnum[ShapeTypeEnum["Callout1WithBorderAndAccent"] = 'Callout1WithBorderAndAccent'] = "Callout1WithBorderAndAccent";
        ShapeTypeEnum[ShapeTypeEnum["Callout2WithBorderAndAccent"] = 'Callout2WithBorderAndAccent'] = "Callout2WithBorderAndAccent";
        ShapeTypeEnum[ShapeTypeEnum["Callout3WithBorderAndAccent"] = 'Callout3WithBorderAndAccent'] = "Callout3WithBorderAndAccent";
        ShapeTypeEnum[ShapeTypeEnum["CalloutWedgeRectangle"] = 'CalloutWedgeRectangle'] = "CalloutWedgeRectangle";
        ShapeTypeEnum[ShapeTypeEnum["CalloutWedgeRoundRectangle"] = 'CalloutWedgeRoundRectangle'] = "CalloutWedgeRoundRectangle";
        ShapeTypeEnum[ShapeTypeEnum["CalloutWedgeEllipse"] = 'CalloutWedgeEllipse'] = "CalloutWedgeEllipse";
        ShapeTypeEnum[ShapeTypeEnum["CalloutCloud"] = 'CalloutCloud'] = "CalloutCloud";
        ShapeTypeEnum[ShapeTypeEnum["Cloud"] = 'Cloud'] = "Cloud";
        ShapeTypeEnum[ShapeTypeEnum["Ribbon"] = 'Ribbon'] = "Ribbon";
        ShapeTypeEnum[ShapeTypeEnum["Ribbon2"] = 'Ribbon2'] = "Ribbon2";
        ShapeTypeEnum[ShapeTypeEnum["EllipseRibbon"] = 'EllipseRibbon'] = "EllipseRibbon";
        ShapeTypeEnum[ShapeTypeEnum["EllipseRibbon2"] = 'EllipseRibbon2'] = "EllipseRibbon2";
        ShapeTypeEnum[ShapeTypeEnum["LeftRightRibbon"] = 'LeftRightRibbon'] = "LeftRightRibbon";
        ShapeTypeEnum[ShapeTypeEnum["VerticalScroll"] = 'VerticalScroll'] = "VerticalScroll";
        ShapeTypeEnum[ShapeTypeEnum["HorizontalScroll"] = 'HorizontalScroll'] = "HorizontalScroll";
        ShapeTypeEnum[ShapeTypeEnum["Wave"] = 'Wave'] = "Wave";
        ShapeTypeEnum[ShapeTypeEnum["DoubleWave"] = 'DoubleWave'] = "DoubleWave";
        ShapeTypeEnum[ShapeTypeEnum["Plus"] = 'Plus'] = "Plus";
        ShapeTypeEnum[ShapeTypeEnum["ProcessFlow"] = 'ProcessFlow'] = "ProcessFlow";
        ShapeTypeEnum[ShapeTypeEnum["DecisionFlow"] = 'DecisionFlow'] = "DecisionFlow";
        ShapeTypeEnum[ShapeTypeEnum["InputOutputFlow"] = 'InputOutputFlow'] = "InputOutputFlow";
        ShapeTypeEnum[ShapeTypeEnum["PredefinedProcessFlow"] = 'PredefinedProcessFlow'] = "PredefinedProcessFlow";
        ShapeTypeEnum[ShapeTypeEnum["InternalStorageFlow"] = 'InternalStorageFlow'] = "InternalStorageFlow";
        ShapeTypeEnum[ShapeTypeEnum["DocumentFlow"] = 'DocumentFlow'] = "DocumentFlow";
        ShapeTypeEnum[ShapeTypeEnum["MultiDocumentFlow"] = 'MultiDocumentFlow'] = "MultiDocumentFlow";
        ShapeTypeEnum[ShapeTypeEnum["TerminatorFlow"] = 'TerminatorFlow'] = "TerminatorFlow";
        ShapeTypeEnum[ShapeTypeEnum["PreparationFlow"] = 'PreparationFlow'] = "PreparationFlow";
        ShapeTypeEnum[ShapeTypeEnum["ManualInputFlow"] = 'ManualInputFlow'] = "ManualInputFlow";
        ShapeTypeEnum[ShapeTypeEnum["ManualOperationFlow"] = 'ManualOperationFlow'] = "ManualOperationFlow";
        ShapeTypeEnum[ShapeTypeEnum["ConnectorFlow"] = 'ConnectorFlow'] = "ConnectorFlow";
        ShapeTypeEnum[ShapeTypeEnum["PunchedCardFlow"] = 'PunchedCardFlow'] = "PunchedCardFlow";
        ShapeTypeEnum[ShapeTypeEnum["PunchedTapeFlow"] = 'PunchedTapeFlow'] = "PunchedTapeFlow";
        ShapeTypeEnum[ShapeTypeEnum["SummingJunctionFlow"] = 'SummingJunctionFlow'] = "SummingJunctionFlow";
        ShapeTypeEnum[ShapeTypeEnum["OrFlow"] = 'OrFlow'] = "OrFlow";
        ShapeTypeEnum[ShapeTypeEnum["CollateFlow"] = 'CollateFlow'] = "CollateFlow";
        ShapeTypeEnum[ShapeTypeEnum["SortFlow"] = 'SortFlow'] = "SortFlow";
        ShapeTypeEnum[ShapeTypeEnum["ExtractFlow"] = 'ExtractFlow'] = "ExtractFlow";
        ShapeTypeEnum[ShapeTypeEnum["MergeFlow"] = 'MergeFlow'] = "MergeFlow";
        ShapeTypeEnum[ShapeTypeEnum["OfflineStorageFlow"] = 'OfflineStorageFlow'] = "OfflineStorageFlow";
        ShapeTypeEnum[ShapeTypeEnum["OnlineStorageFlow"] = 'OnlineStorageFlow'] = "OnlineStorageFlow";
        ShapeTypeEnum[ShapeTypeEnum["MagneticTapeFlow"] = 'MagneticTapeFlow'] = "MagneticTapeFlow";
        ShapeTypeEnum[ShapeTypeEnum["MagneticDiskFlow"] = 'MagneticDiskFlow'] = "MagneticDiskFlow";
        ShapeTypeEnum[ShapeTypeEnum["MagneticDrumFlow"] = 'MagneticDrumFlow'] = "MagneticDrumFlow";
        ShapeTypeEnum[ShapeTypeEnum["DisplayFlow"] = 'DisplayFlow'] = "DisplayFlow";
        ShapeTypeEnum[ShapeTypeEnum["DelayFlow"] = 'DelayFlow'] = "DelayFlow";
        ShapeTypeEnum[ShapeTypeEnum["AlternateProcessFlow"] = 'AlternateProcessFlow'] = "AlternateProcessFlow";
        ShapeTypeEnum[ShapeTypeEnum["OffPageConnectorFlow"] = 'OffPageConnectorFlow'] = "OffPageConnectorFlow";
        ShapeTypeEnum[ShapeTypeEnum["BlankButton"] = 'BlankButton'] = "BlankButton";
        ShapeTypeEnum[ShapeTypeEnum["HomeButton"] = 'HomeButton'] = "HomeButton";
        ShapeTypeEnum[ShapeTypeEnum["HelpButton"] = 'HelpButton'] = "HelpButton";
        ShapeTypeEnum[ShapeTypeEnum["InformationButton"] = 'InformationButton'] = "InformationButton";
        ShapeTypeEnum[ShapeTypeEnum["ForwardOrNextButton"] = 'ForwardOrNextButton'] = "ForwardOrNextButton";
        ShapeTypeEnum[ShapeTypeEnum["BackOrPreviousButton"] = 'BackOrPreviousButton'] = "BackOrPreviousButton";
        ShapeTypeEnum[ShapeTypeEnum["EndButton"] = 'EndButton'] = "EndButton";
        ShapeTypeEnum[ShapeTypeEnum["BeginningButton"] = 'BeginningButton'] = "BeginningButton";
        ShapeTypeEnum[ShapeTypeEnum["ReturnButton"] = 'ReturnButton'] = "ReturnButton";
        ShapeTypeEnum[ShapeTypeEnum["DocumentButton"] = 'DocumentButton'] = "DocumentButton";
        ShapeTypeEnum[ShapeTypeEnum["SoundButton"] = 'SoundButton'] = "SoundButton";
        ShapeTypeEnum[ShapeTypeEnum["MovieButton"] = 'MovieButton'] = "MovieButton";
        ShapeTypeEnum[ShapeTypeEnum["Gear6"] = 'Gear6'] = "Gear6";
        ShapeTypeEnum[ShapeTypeEnum["Gear9"] = 'Gear9'] = "Gear9";
        ShapeTypeEnum[ShapeTypeEnum["Funnel"] = 'Funnel'] = "Funnel";
        ShapeTypeEnum[ShapeTypeEnum["PlusMath"] = 'PlusMath'] = "PlusMath";
        ShapeTypeEnum[ShapeTypeEnum["MinusMath"] = 'MinusMath'] = "MinusMath";
        ShapeTypeEnum[ShapeTypeEnum["MultiplyMath"] = 'MultiplyMath'] = "MultiplyMath";
        ShapeTypeEnum[ShapeTypeEnum["DivideMath"] = 'DivideMath'] = "DivideMath";
        ShapeTypeEnum[ShapeTypeEnum["EqualMath"] = 'EqualMath'] = "EqualMath";
        ShapeTypeEnum[ShapeTypeEnum["NotEqualMath"] = 'NotEqualMath'] = "NotEqualMath";
        ShapeTypeEnum[ShapeTypeEnum["CornerTabs"] = 'CornerTabs'] = "CornerTabs";
        ShapeTypeEnum[ShapeTypeEnum["SquareTabs"] = 'SquareTabs'] = "SquareTabs";
        ShapeTypeEnum[ShapeTypeEnum["PlaqueTabs"] = 'PlaqueTabs'] = "PlaqueTabs";
        ShapeTypeEnum[ShapeTypeEnum["ChartX"] = 'ChartX'] = "ChartX";
        ShapeTypeEnum[ShapeTypeEnum["ChartStar"] = 'ChartStar'] = "ChartStar";
        ShapeTypeEnum[ShapeTypeEnum["ChartPlus"] = 'ChartPlus'] = "ChartPlus";
        ShapeTypeEnum[ShapeTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(ShapeTypeEnum = GeometryShape.ShapeTypeEnum || (GeometryShape.ShapeTypeEnum = {}));
})(GeometryShape = exports.GeometryShape || (exports.GeometryShape = {}));
/**
 * Represents AudioFrame resource.
 */
class AudioFrame extends GeometryShape {
    constructor() {
        super();
        this.type = AudioFrame.TypeEnum.AudioFrame;
    }
}
exports.AudioFrame = AudioFrame;
(function (AudioFrame) {
    let PlayModeEnum;
    (function (PlayModeEnum) {
        PlayModeEnum[PlayModeEnum["Auto"] = 'Auto'] = "Auto";
        PlayModeEnum[PlayModeEnum["OnClick"] = 'OnClick'] = "OnClick";
        PlayModeEnum[PlayModeEnum["AllSlides"] = 'AllSlides'] = "AllSlides";
        PlayModeEnum[PlayModeEnum["InClickSequence"] = 'InClickSequence'] = "InClickSequence";
        PlayModeEnum[PlayModeEnum["Mixed"] = 'Mixed'] = "Mixed";
    })(PlayModeEnum = AudioFrame.PlayModeEnum || (AudioFrame.PlayModeEnum = {}));
    let VolumeEnum;
    (function (VolumeEnum) {
        VolumeEnum[VolumeEnum["Mute"] = 'Mute'] = "Mute";
        VolumeEnum[VolumeEnum["Low"] = 'Low'] = "Low";
        VolumeEnum[VolumeEnum["Medium"] = 'Medium'] = "Medium";
        VolumeEnum[VolumeEnum["Loud"] = 'Loud'] = "Loud";
        VolumeEnum[VolumeEnum["Mixed"] = 'Mixed'] = "Mixed";
    })(VolumeEnum = AudioFrame.VolumeEnum || (AudioFrame.VolumeEnum = {}));
})(AudioFrame = exports.AudioFrame || (exports.AudioFrame = {}));
/**
 * Represents chart axes
 */
class Axes {
}
exports.Axes = Axes;
/**
 * Represents a chart axis
 */
class Axis {
}
exports.Axis = Axis;
(function (Axis) {
    let PositionEnum;
    (function (PositionEnum) {
        PositionEnum[PositionEnum["Bottom"] = 'Bottom'] = "Bottom";
        PositionEnum[PositionEnum["Left"] = 'Left'] = "Left";
        PositionEnum[PositionEnum["Right"] = 'Right'] = "Right";
        PositionEnum[PositionEnum["Top"] = 'Top'] = "Top";
    })(PositionEnum = Axis.PositionEnum || (Axis.PositionEnum = {}));
    let DisplayUnitEnum;
    (function (DisplayUnitEnum) {
        DisplayUnitEnum[DisplayUnitEnum["None"] = 'None'] = "None";
        DisplayUnitEnum[DisplayUnitEnum["Hundreds"] = 'Hundreds'] = "Hundreds";
        DisplayUnitEnum[DisplayUnitEnum["Thousands"] = 'Thousands'] = "Thousands";
        DisplayUnitEnum[DisplayUnitEnum["TenThousands"] = 'TenThousands'] = "TenThousands";
        DisplayUnitEnum[DisplayUnitEnum["HundredThousands"] = 'HundredThousands'] = "HundredThousands";
        DisplayUnitEnum[DisplayUnitEnum["Millions"] = 'Millions'] = "Millions";
        DisplayUnitEnum[DisplayUnitEnum["TenMillions"] = 'TenMillions'] = "TenMillions";
        DisplayUnitEnum[DisplayUnitEnum["HundredMillions"] = 'HundredMillions'] = "HundredMillions";
        DisplayUnitEnum[DisplayUnitEnum["Billions"] = 'Billions'] = "Billions";
        DisplayUnitEnum[DisplayUnitEnum["Trillions"] = 'Trillions'] = "Trillions";
        DisplayUnitEnum[DisplayUnitEnum["CustomValue"] = 'CustomValue'] = "CustomValue";
    })(DisplayUnitEnum = Axis.DisplayUnitEnum || (Axis.DisplayUnitEnum = {}));
    let BaseUnitScaleEnum;
    (function (BaseUnitScaleEnum) {
        BaseUnitScaleEnum[BaseUnitScaleEnum["None"] = 'None'] = "None";
        BaseUnitScaleEnum[BaseUnitScaleEnum["Days"] = 'Days'] = "Days";
        BaseUnitScaleEnum[BaseUnitScaleEnum["Months"] = 'Months'] = "Months";
        BaseUnitScaleEnum[BaseUnitScaleEnum["Years"] = 'Years'] = "Years";
    })(BaseUnitScaleEnum = Axis.BaseUnitScaleEnum || (Axis.BaseUnitScaleEnum = {}));
    let MajorUnitScaleEnum;
    (function (MajorUnitScaleEnum) {
        MajorUnitScaleEnum[MajorUnitScaleEnum["None"] = 'None'] = "None";
        MajorUnitScaleEnum[MajorUnitScaleEnum["Days"] = 'Days'] = "Days";
        MajorUnitScaleEnum[MajorUnitScaleEnum["Months"] = 'Months'] = "Months";
        MajorUnitScaleEnum[MajorUnitScaleEnum["Years"] = 'Years'] = "Years";
    })(MajorUnitScaleEnum = Axis.MajorUnitScaleEnum || (Axis.MajorUnitScaleEnum = {}));
    let MajorTickMarkEnum;
    (function (MajorTickMarkEnum) {
        MajorTickMarkEnum[MajorTickMarkEnum["Cross"] = 'Cross'] = "Cross";
        MajorTickMarkEnum[MajorTickMarkEnum["Inside"] = 'Inside'] = "Inside";
        MajorTickMarkEnum[MajorTickMarkEnum["None"] = 'None'] = "None";
        MajorTickMarkEnum[MajorTickMarkEnum["Outside"] = 'Outside'] = "Outside";
    })(MajorTickMarkEnum = Axis.MajorTickMarkEnum || (Axis.MajorTickMarkEnum = {}));
    let MinorUnitScaleEnum;
    (function (MinorUnitScaleEnum) {
        MinorUnitScaleEnum[MinorUnitScaleEnum["None"] = 'None'] = "None";
        MinorUnitScaleEnum[MinorUnitScaleEnum["Days"] = 'Days'] = "Days";
        MinorUnitScaleEnum[MinorUnitScaleEnum["Months"] = 'Months'] = "Months";
        MinorUnitScaleEnum[MinorUnitScaleEnum["Years"] = 'Years'] = "Years";
    })(MinorUnitScaleEnum = Axis.MinorUnitScaleEnum || (Axis.MinorUnitScaleEnum = {}));
    let MinorTickMarkEnum;
    (function (MinorTickMarkEnum) {
        MinorTickMarkEnum[MinorTickMarkEnum["Cross"] = 'Cross'] = "Cross";
        MinorTickMarkEnum[MinorTickMarkEnum["Inside"] = 'Inside'] = "Inside";
        MinorTickMarkEnum[MinorTickMarkEnum["None"] = 'None'] = "None";
        MinorTickMarkEnum[MinorTickMarkEnum["Outside"] = 'Outside'] = "Outside";
    })(MinorTickMarkEnum = Axis.MinorTickMarkEnum || (Axis.MinorTickMarkEnum = {}));
    let CategoryAxisTypeEnum;
    (function (CategoryAxisTypeEnum) {
        CategoryAxisTypeEnum[CategoryAxisTypeEnum["Text"] = 'Text'] = "Text";
        CategoryAxisTypeEnum[CategoryAxisTypeEnum["Date"] = 'Date'] = "Date";
    })(CategoryAxisTypeEnum = Axis.CategoryAxisTypeEnum || (Axis.CategoryAxisTypeEnum = {}));
    let CrossTypeEnum;
    (function (CrossTypeEnum) {
        CrossTypeEnum[CrossTypeEnum["AxisCrossesAtZero"] = 'AxisCrossesAtZero'] = "AxisCrossesAtZero";
        CrossTypeEnum[CrossTypeEnum["Maximum"] = 'Maximum'] = "Maximum";
        CrossTypeEnum[CrossTypeEnum["Custom"] = 'Custom'] = "Custom";
    })(CrossTypeEnum = Axis.CrossTypeEnum || (Axis.CrossTypeEnum = {}));
    let TickLabelPositionEnum;
    (function (TickLabelPositionEnum) {
        TickLabelPositionEnum[TickLabelPositionEnum["High"] = 'High'] = "High";
        TickLabelPositionEnum[TickLabelPositionEnum["Low"] = 'Low'] = "Low";
        TickLabelPositionEnum[TickLabelPositionEnum["NextTo"] = 'NextTo'] = "NextTo";
        TickLabelPositionEnum[TickLabelPositionEnum["None"] = 'None'] = "None";
    })(TickLabelPositionEnum = Axis.TickLabelPositionEnum || (Axis.TickLabelPositionEnum = {}));
})(Axis = exports.Axis || (exports.Axis = {}));
/**
 * Defines axis type.
 */
/**
* Defines axis type.
*/
var AxisType;
(function (AxisType) {
    AxisType[AxisType["HorizontalAxis"] = 'HorizontalAxis'] = "HorizontalAxis";
    AxisType[AxisType["VerticalAxis"] = 'VerticalAxis'] = "VerticalAxis";
    AxisType[AxisType["SecondaryHorizontalAxis"] = 'SecondaryHorizontalAxis'] = "SecondaryHorizontalAxis";
    AxisType[AxisType["SecondaryVerticalAxis"] = 'SecondaryVerticalAxis'] = "SecondaryVerticalAxis";
})(AxisType = exports.AxisType || (exports.AxisType = {}));
/**
 * Specifies the bar function, consisting of a base argument and an overbar or underbar
 */
class BarElement extends MathElement {
    constructor() {
        super();
        this.type = BarElement.TypeEnum.Bar;
    }
}
exports.BarElement = BarElement;
(function (BarElement) {
    let PositionEnum;
    (function (PositionEnum) {
        PositionEnum[PositionEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        PositionEnum[PositionEnum["Top"] = 'Top'] = "Top";
        PositionEnum[PositionEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(PositionEnum = BarElement.PositionEnum || (BarElement.PositionEnum = {}));
})(BarElement = exports.BarElement || (exports.BarElement = {}));
/**
 * Represents abstract input file source for pipeline.
 */
class InputFile {
}
exports.InputFile = InputFile;
(function (InputFile) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Path"] = 'Path'] = "Path";
        TypeEnum[TypeEnum["Request"] = 'Request'] = "Request";
        TypeEnum[TypeEnum["Base64"] = 'Base64'] = "Base64";
    })(TypeEnum = InputFile.TypeEnum || (InputFile.TypeEnum = {}));
})(InputFile = exports.InputFile || (exports.InputFile = {}));
/**
 * Represents base64 inline encoded file.
 */
class Base64InputFile extends InputFile {
    constructor() {
        super();
        this.type = Base64InputFile.TypeEnum.Base64;
    }
}
exports.Base64InputFile = Base64InputFile;
/**
 * Represents an BiLevel effect.
 */
class BiLevelEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = BiLevelEffect.TypeEnum.BiLevel;
    }
}
exports.BiLevelEffect = BiLevelEffect;
/**
 * Specifies an instance of mathematical text that contained within a MathParagraph and starts on its own line.
 */
class BlockElement extends MathElement {
    constructor() {
        super();
        this.type = BlockElement.TypeEnum.Block;
    }
}
exports.BlockElement = BlockElement;
/**
 * Represents blur effect
 */
class BlurEffect {
}
exports.BlurEffect = BlurEffect;
/**
 * Represents a Blur effect that is applied to the entire shape, including its fill. All color channels, including alpha, are affected.
 */
class BlurImageEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = BlurImageEffect.TypeEnum.Blur;
    }
}
exports.BlurImageEffect = BlurImageEffect;
/**
 * Rectangular or some other border around the MathElement.
 */
class BorderBoxElement extends MathElement {
    constructor() {
        super();
        this.type = BorderBoxElement.TypeEnum.BorderBox;
    }
}
exports.BorderBoxElement = BorderBoxElement;
/**
 * Box element.
 */
class BoxElement extends MathElement {
    constructor() {
        super();
        this.type = BoxElement.TypeEnum.Box;
    }
}
exports.BoxElement = BoxElement;
/**
 * Data point.
 */
class DataPoint {
}
exports.DataPoint = DataPoint;
(function (DataPoint) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["OneValue"] = 'OneValue'] = "OneValue";
        TypeEnum[TypeEnum["Scatter"] = 'Scatter'] = "Scatter";
        TypeEnum[TypeEnum["Bubble"] = 'Bubble'] = "Bubble";
    })(TypeEnum = DataPoint.TypeEnum || (DataPoint.TypeEnum = {}));
})(DataPoint = exports.DataPoint || (exports.DataPoint = {}));
/**
 * Scatter chart (two-dimensional) data point
 */
class ScatterChartDataPoint extends DataPoint {
    constructor() {
        super();
        this.type = ScatterChartDataPoint.TypeEnum.Scatter;
    }
}
exports.ScatterChartDataPoint = ScatterChartDataPoint;
/**
 * Bubble chart data point.
 */
class BubbleChartDataPoint extends ScatterChartDataPoint {
    constructor() {
        super();
        this.type = BubbleChartDataPoint.TypeEnum.Bubble;
    }
}
exports.BubbleChartDataPoint = BubbleChartDataPoint;
/**
 * A chart series.
 */
class Series {
}
exports.Series = Series;
(function (Series) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["ClusteredColumn"] = 'ClusteredColumn'] = "ClusteredColumn";
        TypeEnum[TypeEnum["StackedColumn"] = 'StackedColumn'] = "StackedColumn";
        TypeEnum[TypeEnum["PercentsStackedColumn"] = 'PercentsStackedColumn'] = "PercentsStackedColumn";
        TypeEnum[TypeEnum["ClusteredColumn3D"] = 'ClusteredColumn3D'] = "ClusteredColumn3D";
        TypeEnum[TypeEnum["StackedColumn3D"] = 'StackedColumn3D'] = "StackedColumn3D";
        TypeEnum[TypeEnum["PercentsStackedColumn3D"] = 'PercentsStackedColumn3D'] = "PercentsStackedColumn3D";
        TypeEnum[TypeEnum["Column3D"] = 'Column3D'] = "Column3D";
        TypeEnum[TypeEnum["ClusteredCylinder"] = 'ClusteredCylinder'] = "ClusteredCylinder";
        TypeEnum[TypeEnum["StackedCylinder"] = 'StackedCylinder'] = "StackedCylinder";
        TypeEnum[TypeEnum["PercentsStackedCylinder"] = 'PercentsStackedCylinder'] = "PercentsStackedCylinder";
        TypeEnum[TypeEnum["Cylinder3D"] = 'Cylinder3D'] = "Cylinder3D";
        TypeEnum[TypeEnum["ClusteredCone"] = 'ClusteredCone'] = "ClusteredCone";
        TypeEnum[TypeEnum["StackedCone"] = 'StackedCone'] = "StackedCone";
        TypeEnum[TypeEnum["PercentsStackedCone"] = 'PercentsStackedCone'] = "PercentsStackedCone";
        TypeEnum[TypeEnum["Cone3D"] = 'Cone3D'] = "Cone3D";
        TypeEnum[TypeEnum["ClusteredPyramid"] = 'ClusteredPyramid'] = "ClusteredPyramid";
        TypeEnum[TypeEnum["StackedPyramid"] = 'StackedPyramid'] = "StackedPyramid";
        TypeEnum[TypeEnum["PercentsStackedPyramid"] = 'PercentsStackedPyramid'] = "PercentsStackedPyramid";
        TypeEnum[TypeEnum["Pyramid3D"] = 'Pyramid3D'] = "Pyramid3D";
        TypeEnum[TypeEnum["Line"] = 'Line'] = "Line";
        TypeEnum[TypeEnum["StackedLine"] = 'StackedLine'] = "StackedLine";
        TypeEnum[TypeEnum["PercentsStackedLine"] = 'PercentsStackedLine'] = "PercentsStackedLine";
        TypeEnum[TypeEnum["LineWithMarkers"] = 'LineWithMarkers'] = "LineWithMarkers";
        TypeEnum[TypeEnum["StackedLineWithMarkers"] = 'StackedLineWithMarkers'] = "StackedLineWithMarkers";
        TypeEnum[TypeEnum["PercentsStackedLineWithMarkers"] = 'PercentsStackedLineWithMarkers'] = "PercentsStackedLineWithMarkers";
        TypeEnum[TypeEnum["Line3D"] = 'Line3D'] = "Line3D";
        TypeEnum[TypeEnum["Pie"] = 'Pie'] = "Pie";
        TypeEnum[TypeEnum["Pie3D"] = 'Pie3D'] = "Pie3D";
        TypeEnum[TypeEnum["PieOfPie"] = 'PieOfPie'] = "PieOfPie";
        TypeEnum[TypeEnum["ExplodedPie"] = 'ExplodedPie'] = "ExplodedPie";
        TypeEnum[TypeEnum["ExplodedPie3D"] = 'ExplodedPie3D'] = "ExplodedPie3D";
        TypeEnum[TypeEnum["BarOfPie"] = 'BarOfPie'] = "BarOfPie";
        TypeEnum[TypeEnum["PercentsStackedBar"] = 'PercentsStackedBar'] = "PercentsStackedBar";
        TypeEnum[TypeEnum["ClusteredBar3D"] = 'ClusteredBar3D'] = "ClusteredBar3D";
        TypeEnum[TypeEnum["ClusteredBar"] = 'ClusteredBar'] = "ClusteredBar";
        TypeEnum[TypeEnum["StackedBar"] = 'StackedBar'] = "StackedBar";
        TypeEnum[TypeEnum["StackedBar3D"] = 'StackedBar3D'] = "StackedBar3D";
        TypeEnum[TypeEnum["PercentsStackedBar3D"] = 'PercentsStackedBar3D'] = "PercentsStackedBar3D";
        TypeEnum[TypeEnum["ClusteredHorizontalCylinder"] = 'ClusteredHorizontalCylinder'] = "ClusteredHorizontalCylinder";
        TypeEnum[TypeEnum["StackedHorizontalCylinder"] = 'StackedHorizontalCylinder'] = "StackedHorizontalCylinder";
        TypeEnum[TypeEnum["PercentsStackedHorizontalCylinder"] = 'PercentsStackedHorizontalCylinder'] = "PercentsStackedHorizontalCylinder";
        TypeEnum[TypeEnum["ClusteredHorizontalCone"] = 'ClusteredHorizontalCone'] = "ClusteredHorizontalCone";
        TypeEnum[TypeEnum["StackedHorizontalCone"] = 'StackedHorizontalCone'] = "StackedHorizontalCone";
        TypeEnum[TypeEnum["PercentsStackedHorizontalCone"] = 'PercentsStackedHorizontalCone'] = "PercentsStackedHorizontalCone";
        TypeEnum[TypeEnum["ClusteredHorizontalPyramid"] = 'ClusteredHorizontalPyramid'] = "ClusteredHorizontalPyramid";
        TypeEnum[TypeEnum["StackedHorizontalPyramid"] = 'StackedHorizontalPyramid'] = "StackedHorizontalPyramid";
        TypeEnum[TypeEnum["PercentsStackedHorizontalPyramid"] = 'PercentsStackedHorizontalPyramid'] = "PercentsStackedHorizontalPyramid";
        TypeEnum[TypeEnum["Area"] = 'Area'] = "Area";
        TypeEnum[TypeEnum["StackedArea"] = 'StackedArea'] = "StackedArea";
        TypeEnum[TypeEnum["PercentsStackedArea"] = 'PercentsStackedArea'] = "PercentsStackedArea";
        TypeEnum[TypeEnum["Area3D"] = 'Area3D'] = "Area3D";
        TypeEnum[TypeEnum["StackedArea3D"] = 'StackedArea3D'] = "StackedArea3D";
        TypeEnum[TypeEnum["PercentsStackedArea3D"] = 'PercentsStackedArea3D'] = "PercentsStackedArea3D";
        TypeEnum[TypeEnum["ScatterWithMarkers"] = 'ScatterWithMarkers'] = "ScatterWithMarkers";
        TypeEnum[TypeEnum["ScatterWithSmoothLinesAndMarkers"] = 'ScatterWithSmoothLinesAndMarkers'] = "ScatterWithSmoothLinesAndMarkers";
        TypeEnum[TypeEnum["ScatterWithSmoothLines"] = 'ScatterWithSmoothLines'] = "ScatterWithSmoothLines";
        TypeEnum[TypeEnum["ScatterWithStraightLinesAndMarkers"] = 'ScatterWithStraightLinesAndMarkers'] = "ScatterWithStraightLinesAndMarkers";
        TypeEnum[TypeEnum["ScatterWithStraightLines"] = 'ScatterWithStraightLines'] = "ScatterWithStraightLines";
        TypeEnum[TypeEnum["HighLowClose"] = 'HighLowClose'] = "HighLowClose";
        TypeEnum[TypeEnum["OpenHighLowClose"] = 'OpenHighLowClose'] = "OpenHighLowClose";
        TypeEnum[TypeEnum["VolumeHighLowClose"] = 'VolumeHighLowClose'] = "VolumeHighLowClose";
        TypeEnum[TypeEnum["VolumeOpenHighLowClose"] = 'VolumeOpenHighLowClose'] = "VolumeOpenHighLowClose";
        TypeEnum[TypeEnum["Surface3D"] = 'Surface3D'] = "Surface3D";
        TypeEnum[TypeEnum["WireframeSurface3D"] = 'WireframeSurface3D'] = "WireframeSurface3D";
        TypeEnum[TypeEnum["Contour"] = 'Contour'] = "Contour";
        TypeEnum[TypeEnum["WireframeContour"] = 'WireframeContour'] = "WireframeContour";
        TypeEnum[TypeEnum["Doughnut"] = 'Doughnut'] = "Doughnut";
        TypeEnum[TypeEnum["ExplodedDoughnut"] = 'ExplodedDoughnut'] = "ExplodedDoughnut";
        TypeEnum[TypeEnum["Bubble"] = 'Bubble'] = "Bubble";
        TypeEnum[TypeEnum["BubbleWith3D"] = 'BubbleWith3D'] = "BubbleWith3D";
        TypeEnum[TypeEnum["Radar"] = 'Radar'] = "Radar";
        TypeEnum[TypeEnum["RadarWithMarkers"] = 'RadarWithMarkers'] = "RadarWithMarkers";
        TypeEnum[TypeEnum["FilledRadar"] = 'FilledRadar'] = "FilledRadar";
        TypeEnum[TypeEnum["SeriesOfMixedTypes"] = 'SeriesOfMixedTypes'] = "SeriesOfMixedTypes";
        TypeEnum[TypeEnum["Treemap"] = 'Treemap'] = "Treemap";
        TypeEnum[TypeEnum["Sunburst"] = 'Sunburst'] = "Sunburst";
        TypeEnum[TypeEnum["Histogram"] = 'Histogram'] = "Histogram";
        TypeEnum[TypeEnum["ParetoLine"] = 'ParetoLine'] = "ParetoLine";
        TypeEnum[TypeEnum["BoxAndWhisker"] = 'BoxAndWhisker'] = "BoxAndWhisker";
        TypeEnum[TypeEnum["Waterfall"] = 'Waterfall'] = "Waterfall";
        TypeEnum[TypeEnum["Funnel"] = 'Funnel'] = "Funnel";
        TypeEnum[TypeEnum["Map"] = 'Map'] = "Map";
    })(TypeEnum = Series.TypeEnum || (Series.TypeEnum = {}));
    let DataPointTypeEnum;
    (function (DataPointTypeEnum) {
        DataPointTypeEnum[DataPointTypeEnum["OneValue"] = 'OneValue'] = "OneValue";
        DataPointTypeEnum[DataPointTypeEnum["Scatter"] = 'Scatter'] = "Scatter";
        DataPointTypeEnum[DataPointTypeEnum["Bubble"] = 'Bubble'] = "Bubble";
    })(DataPointTypeEnum = Series.DataPointTypeEnum || (Series.DataPointTypeEnum = {}));
})(Series = exports.Series || (exports.Series = {}));
/**
 * Common properties for Bubble and Scatter series.
 */
class XYSeries extends Series {
    constructor() {
        super();
    }
}
exports.XYSeries = XYSeries;
/**
 * A bubble series.
 */
class BubbleSeries extends XYSeries {
    constructor() {
        super();
        this.dataPointType = BubbleSeries.DataPointTypeEnum.Bubble;
    }
}
exports.BubbleSeries = BubbleSeries;
/**
 * Camera
 */
class Camera {
}
exports.Camera = Camera;
(function (Camera) {
    let CameraTypeEnum;
    (function (CameraTypeEnum) {
        CameraTypeEnum[CameraTypeEnum["IsometricBottomDown"] = 'IsometricBottomDown'] = "IsometricBottomDown";
        CameraTypeEnum[CameraTypeEnum["IsometricBottomUp"] = 'IsometricBottomUp'] = "IsometricBottomUp";
        CameraTypeEnum[CameraTypeEnum["IsometricLeftDown"] = 'IsometricLeftDown'] = "IsometricLeftDown";
        CameraTypeEnum[CameraTypeEnum["IsometricLeftUp"] = 'IsometricLeftUp'] = "IsometricLeftUp";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis1Left"] = 'IsometricOffAxis1Left'] = "IsometricOffAxis1Left";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis1Right"] = 'IsometricOffAxis1Right'] = "IsometricOffAxis1Right";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis1Top"] = 'IsometricOffAxis1Top'] = "IsometricOffAxis1Top";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis2Left"] = 'IsometricOffAxis2Left'] = "IsometricOffAxis2Left";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis2Right"] = 'IsometricOffAxis2Right'] = "IsometricOffAxis2Right";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis2Top"] = 'IsometricOffAxis2Top'] = "IsometricOffAxis2Top";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis3Bottom"] = 'IsometricOffAxis3Bottom'] = "IsometricOffAxis3Bottom";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis3Left"] = 'IsometricOffAxis3Left'] = "IsometricOffAxis3Left";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis3Right"] = 'IsometricOffAxis3Right'] = "IsometricOffAxis3Right";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis4Bottom"] = 'IsometricOffAxis4Bottom'] = "IsometricOffAxis4Bottom";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis4Left"] = 'IsometricOffAxis4Left'] = "IsometricOffAxis4Left";
        CameraTypeEnum[CameraTypeEnum["IsometricOffAxis4Right"] = 'IsometricOffAxis4Right'] = "IsometricOffAxis4Right";
        CameraTypeEnum[CameraTypeEnum["IsometricRightDown"] = 'IsometricRightDown'] = "IsometricRightDown";
        CameraTypeEnum[CameraTypeEnum["IsometricRightUp"] = 'IsometricRightUp'] = "IsometricRightUp";
        CameraTypeEnum[CameraTypeEnum["IsometricTopDown"] = 'IsometricTopDown'] = "IsometricTopDown";
        CameraTypeEnum[CameraTypeEnum["IsometricTopUp"] = 'IsometricTopUp'] = "IsometricTopUp";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueBottom"] = 'LegacyObliqueBottom'] = "LegacyObliqueBottom";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueBottomLeft"] = 'LegacyObliqueBottomLeft'] = "LegacyObliqueBottomLeft";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueBottomRight"] = 'LegacyObliqueBottomRight'] = "LegacyObliqueBottomRight";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueFront"] = 'LegacyObliqueFront'] = "LegacyObliqueFront";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueLeft"] = 'LegacyObliqueLeft'] = "LegacyObliqueLeft";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueRight"] = 'LegacyObliqueRight'] = "LegacyObliqueRight";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueTop"] = 'LegacyObliqueTop'] = "LegacyObliqueTop";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueTopLeft"] = 'LegacyObliqueTopLeft'] = "LegacyObliqueTopLeft";
        CameraTypeEnum[CameraTypeEnum["LegacyObliqueTopRight"] = 'LegacyObliqueTopRight'] = "LegacyObliqueTopRight";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveBottom"] = 'LegacyPerspectiveBottom'] = "LegacyPerspectiveBottom";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveBottomLeft"] = 'LegacyPerspectiveBottomLeft'] = "LegacyPerspectiveBottomLeft";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveBottomRight"] = 'LegacyPerspectiveBottomRight'] = "LegacyPerspectiveBottomRight";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveFront"] = 'LegacyPerspectiveFront'] = "LegacyPerspectiveFront";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveLeft"] = 'LegacyPerspectiveLeft'] = "LegacyPerspectiveLeft";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveRight"] = 'LegacyPerspectiveRight'] = "LegacyPerspectiveRight";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveTop"] = 'LegacyPerspectiveTop'] = "LegacyPerspectiveTop";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveTopLeft"] = 'LegacyPerspectiveTopLeft'] = "LegacyPerspectiveTopLeft";
        CameraTypeEnum[CameraTypeEnum["LegacyPerspectiveTopRight"] = 'LegacyPerspectiveTopRight'] = "LegacyPerspectiveTopRight";
        CameraTypeEnum[CameraTypeEnum["ObliqueBottom"] = 'ObliqueBottom'] = "ObliqueBottom";
        CameraTypeEnum[CameraTypeEnum["ObliqueBottomLeft"] = 'ObliqueBottomLeft'] = "ObliqueBottomLeft";
        CameraTypeEnum[CameraTypeEnum["ObliqueBottomRight"] = 'ObliqueBottomRight'] = "ObliqueBottomRight";
        CameraTypeEnum[CameraTypeEnum["ObliqueLeft"] = 'ObliqueLeft'] = "ObliqueLeft";
        CameraTypeEnum[CameraTypeEnum["ObliqueRight"] = 'ObliqueRight'] = "ObliqueRight";
        CameraTypeEnum[CameraTypeEnum["ObliqueTop"] = 'ObliqueTop'] = "ObliqueTop";
        CameraTypeEnum[CameraTypeEnum["ObliqueTopLeft"] = 'ObliqueTopLeft'] = "ObliqueTopLeft";
        CameraTypeEnum[CameraTypeEnum["ObliqueTopRight"] = 'ObliqueTopRight'] = "ObliqueTopRight";
        CameraTypeEnum[CameraTypeEnum["OrthographicFront"] = 'OrthographicFront'] = "OrthographicFront";
        CameraTypeEnum[CameraTypeEnum["PerspectiveAbove"] = 'PerspectiveAbove'] = "PerspectiveAbove";
        CameraTypeEnum[CameraTypeEnum["PerspectiveAboveLeftFacing"] = 'PerspectiveAboveLeftFacing'] = "PerspectiveAboveLeftFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveAboveRightFacing"] = 'PerspectiveAboveRightFacing'] = "PerspectiveAboveRightFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveBelow"] = 'PerspectiveBelow'] = "PerspectiveBelow";
        CameraTypeEnum[CameraTypeEnum["PerspectiveContrastingLeftFacing"] = 'PerspectiveContrastingLeftFacing'] = "PerspectiveContrastingLeftFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveContrastingRightFacing"] = 'PerspectiveContrastingRightFacing'] = "PerspectiveContrastingRightFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveFront"] = 'PerspectiveFront'] = "PerspectiveFront";
        CameraTypeEnum[CameraTypeEnum["PerspectiveHeroicExtremeLeftFacing"] = 'PerspectiveHeroicExtremeLeftFacing'] = "PerspectiveHeroicExtremeLeftFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveHeroicExtremeRightFacing"] = 'PerspectiveHeroicExtremeRightFacing'] = "PerspectiveHeroicExtremeRightFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveHeroicLeftFacing"] = 'PerspectiveHeroicLeftFacing'] = "PerspectiveHeroicLeftFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveHeroicRightFacing"] = 'PerspectiveHeroicRightFacing'] = "PerspectiveHeroicRightFacing";
        CameraTypeEnum[CameraTypeEnum["PerspectiveLeft"] = 'PerspectiveLeft'] = "PerspectiveLeft";
        CameraTypeEnum[CameraTypeEnum["PerspectiveRelaxed"] = 'PerspectiveRelaxed'] = "PerspectiveRelaxed";
        CameraTypeEnum[CameraTypeEnum["PerspectiveRelaxedModerately"] = 'PerspectiveRelaxedModerately'] = "PerspectiveRelaxedModerately";
        CameraTypeEnum[CameraTypeEnum["PerspectiveRight"] = 'PerspectiveRight'] = "PerspectiveRight";
        CameraTypeEnum[CameraTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(CameraTypeEnum = Camera.CameraTypeEnum || (Camera.CameraTypeEnum = {}));
})(Camera = exports.Camera || (exports.Camera = {}));
/**
 * Represents chart resource
 */
class Chart extends ShapeBase {
    constructor() {
        super();
        this.type = Chart.TypeEnum.Chart;
    }
}
exports.Chart = Chart;
(function (Chart) {
    let ChartTypeEnum;
    (function (ChartTypeEnum) {
        ChartTypeEnum[ChartTypeEnum["ClusteredColumn"] = 'ClusteredColumn'] = "ClusteredColumn";
        ChartTypeEnum[ChartTypeEnum["StackedColumn"] = 'StackedColumn'] = "StackedColumn";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedColumn"] = 'PercentsStackedColumn'] = "PercentsStackedColumn";
        ChartTypeEnum[ChartTypeEnum["ClusteredColumn3D"] = 'ClusteredColumn3D'] = "ClusteredColumn3D";
        ChartTypeEnum[ChartTypeEnum["StackedColumn3D"] = 'StackedColumn3D'] = "StackedColumn3D";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedColumn3D"] = 'PercentsStackedColumn3D'] = "PercentsStackedColumn3D";
        ChartTypeEnum[ChartTypeEnum["Column3D"] = 'Column3D'] = "Column3D";
        ChartTypeEnum[ChartTypeEnum["ClusteredCylinder"] = 'ClusteredCylinder'] = "ClusteredCylinder";
        ChartTypeEnum[ChartTypeEnum["StackedCylinder"] = 'StackedCylinder'] = "StackedCylinder";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedCylinder"] = 'PercentsStackedCylinder'] = "PercentsStackedCylinder";
        ChartTypeEnum[ChartTypeEnum["Cylinder3D"] = 'Cylinder3D'] = "Cylinder3D";
        ChartTypeEnum[ChartTypeEnum["ClusteredCone"] = 'ClusteredCone'] = "ClusteredCone";
        ChartTypeEnum[ChartTypeEnum["StackedCone"] = 'StackedCone'] = "StackedCone";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedCone"] = 'PercentsStackedCone'] = "PercentsStackedCone";
        ChartTypeEnum[ChartTypeEnum["Cone3D"] = 'Cone3D'] = "Cone3D";
        ChartTypeEnum[ChartTypeEnum["ClusteredPyramid"] = 'ClusteredPyramid'] = "ClusteredPyramid";
        ChartTypeEnum[ChartTypeEnum["StackedPyramid"] = 'StackedPyramid'] = "StackedPyramid";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedPyramid"] = 'PercentsStackedPyramid'] = "PercentsStackedPyramid";
        ChartTypeEnum[ChartTypeEnum["Pyramid3D"] = 'Pyramid3D'] = "Pyramid3D";
        ChartTypeEnum[ChartTypeEnum["Line"] = 'Line'] = "Line";
        ChartTypeEnum[ChartTypeEnum["StackedLine"] = 'StackedLine'] = "StackedLine";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedLine"] = 'PercentsStackedLine'] = "PercentsStackedLine";
        ChartTypeEnum[ChartTypeEnum["LineWithMarkers"] = 'LineWithMarkers'] = "LineWithMarkers";
        ChartTypeEnum[ChartTypeEnum["StackedLineWithMarkers"] = 'StackedLineWithMarkers'] = "StackedLineWithMarkers";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedLineWithMarkers"] = 'PercentsStackedLineWithMarkers'] = "PercentsStackedLineWithMarkers";
        ChartTypeEnum[ChartTypeEnum["Line3D"] = 'Line3D'] = "Line3D";
        ChartTypeEnum[ChartTypeEnum["Pie"] = 'Pie'] = "Pie";
        ChartTypeEnum[ChartTypeEnum["Pie3D"] = 'Pie3D'] = "Pie3D";
        ChartTypeEnum[ChartTypeEnum["PieOfPie"] = 'PieOfPie'] = "PieOfPie";
        ChartTypeEnum[ChartTypeEnum["ExplodedPie"] = 'ExplodedPie'] = "ExplodedPie";
        ChartTypeEnum[ChartTypeEnum["ExplodedPie3D"] = 'ExplodedPie3D'] = "ExplodedPie3D";
        ChartTypeEnum[ChartTypeEnum["BarOfPie"] = 'BarOfPie'] = "BarOfPie";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedBar"] = 'PercentsStackedBar'] = "PercentsStackedBar";
        ChartTypeEnum[ChartTypeEnum["ClusteredBar3D"] = 'ClusteredBar3D'] = "ClusteredBar3D";
        ChartTypeEnum[ChartTypeEnum["ClusteredBar"] = 'ClusteredBar'] = "ClusteredBar";
        ChartTypeEnum[ChartTypeEnum["StackedBar"] = 'StackedBar'] = "StackedBar";
        ChartTypeEnum[ChartTypeEnum["StackedBar3D"] = 'StackedBar3D'] = "StackedBar3D";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedBar3D"] = 'PercentsStackedBar3D'] = "PercentsStackedBar3D";
        ChartTypeEnum[ChartTypeEnum["ClusteredHorizontalCylinder"] = 'ClusteredHorizontalCylinder'] = "ClusteredHorizontalCylinder";
        ChartTypeEnum[ChartTypeEnum["StackedHorizontalCylinder"] = 'StackedHorizontalCylinder'] = "StackedHorizontalCylinder";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedHorizontalCylinder"] = 'PercentsStackedHorizontalCylinder'] = "PercentsStackedHorizontalCylinder";
        ChartTypeEnum[ChartTypeEnum["ClusteredHorizontalCone"] = 'ClusteredHorizontalCone'] = "ClusteredHorizontalCone";
        ChartTypeEnum[ChartTypeEnum["StackedHorizontalCone"] = 'StackedHorizontalCone'] = "StackedHorizontalCone";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedHorizontalCone"] = 'PercentsStackedHorizontalCone'] = "PercentsStackedHorizontalCone";
        ChartTypeEnum[ChartTypeEnum["ClusteredHorizontalPyramid"] = 'ClusteredHorizontalPyramid'] = "ClusteredHorizontalPyramid";
        ChartTypeEnum[ChartTypeEnum["StackedHorizontalPyramid"] = 'StackedHorizontalPyramid'] = "StackedHorizontalPyramid";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedHorizontalPyramid"] = 'PercentsStackedHorizontalPyramid'] = "PercentsStackedHorizontalPyramid";
        ChartTypeEnum[ChartTypeEnum["Area"] = 'Area'] = "Area";
        ChartTypeEnum[ChartTypeEnum["StackedArea"] = 'StackedArea'] = "StackedArea";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedArea"] = 'PercentsStackedArea'] = "PercentsStackedArea";
        ChartTypeEnum[ChartTypeEnum["Area3D"] = 'Area3D'] = "Area3D";
        ChartTypeEnum[ChartTypeEnum["StackedArea3D"] = 'StackedArea3D'] = "StackedArea3D";
        ChartTypeEnum[ChartTypeEnum["PercentsStackedArea3D"] = 'PercentsStackedArea3D'] = "PercentsStackedArea3D";
        ChartTypeEnum[ChartTypeEnum["ScatterWithMarkers"] = 'ScatterWithMarkers'] = "ScatterWithMarkers";
        ChartTypeEnum[ChartTypeEnum["ScatterWithSmoothLinesAndMarkers"] = 'ScatterWithSmoothLinesAndMarkers'] = "ScatterWithSmoothLinesAndMarkers";
        ChartTypeEnum[ChartTypeEnum["ScatterWithSmoothLines"] = 'ScatterWithSmoothLines'] = "ScatterWithSmoothLines";
        ChartTypeEnum[ChartTypeEnum["ScatterWithStraightLinesAndMarkers"] = 'ScatterWithStraightLinesAndMarkers'] = "ScatterWithStraightLinesAndMarkers";
        ChartTypeEnum[ChartTypeEnum["ScatterWithStraightLines"] = 'ScatterWithStraightLines'] = "ScatterWithStraightLines";
        ChartTypeEnum[ChartTypeEnum["HighLowClose"] = 'HighLowClose'] = "HighLowClose";
        ChartTypeEnum[ChartTypeEnum["OpenHighLowClose"] = 'OpenHighLowClose'] = "OpenHighLowClose";
        ChartTypeEnum[ChartTypeEnum["VolumeHighLowClose"] = 'VolumeHighLowClose'] = "VolumeHighLowClose";
        ChartTypeEnum[ChartTypeEnum["VolumeOpenHighLowClose"] = 'VolumeOpenHighLowClose'] = "VolumeOpenHighLowClose";
        ChartTypeEnum[ChartTypeEnum["Surface3D"] = 'Surface3D'] = "Surface3D";
        ChartTypeEnum[ChartTypeEnum["WireframeSurface3D"] = 'WireframeSurface3D'] = "WireframeSurface3D";
        ChartTypeEnum[ChartTypeEnum["Contour"] = 'Contour'] = "Contour";
        ChartTypeEnum[ChartTypeEnum["WireframeContour"] = 'WireframeContour'] = "WireframeContour";
        ChartTypeEnum[ChartTypeEnum["Doughnut"] = 'Doughnut'] = "Doughnut";
        ChartTypeEnum[ChartTypeEnum["ExplodedDoughnut"] = 'ExplodedDoughnut'] = "ExplodedDoughnut";
        ChartTypeEnum[ChartTypeEnum["Bubble"] = 'Bubble'] = "Bubble";
        ChartTypeEnum[ChartTypeEnum["BubbleWith3D"] = 'BubbleWith3D'] = "BubbleWith3D";
        ChartTypeEnum[ChartTypeEnum["Radar"] = 'Radar'] = "Radar";
        ChartTypeEnum[ChartTypeEnum["RadarWithMarkers"] = 'RadarWithMarkers'] = "RadarWithMarkers";
        ChartTypeEnum[ChartTypeEnum["FilledRadar"] = 'FilledRadar'] = "FilledRadar";
        ChartTypeEnum[ChartTypeEnum["SeriesOfMixedTypes"] = 'SeriesOfMixedTypes'] = "SeriesOfMixedTypes";
        ChartTypeEnum[ChartTypeEnum["Treemap"] = 'Treemap'] = "Treemap";
        ChartTypeEnum[ChartTypeEnum["Sunburst"] = 'Sunburst'] = "Sunburst";
        ChartTypeEnum[ChartTypeEnum["Histogram"] = 'Histogram'] = "Histogram";
        ChartTypeEnum[ChartTypeEnum["ParetoLine"] = 'ParetoLine'] = "ParetoLine";
        ChartTypeEnum[ChartTypeEnum["BoxAndWhisker"] = 'BoxAndWhisker'] = "BoxAndWhisker";
        ChartTypeEnum[ChartTypeEnum["Waterfall"] = 'Waterfall'] = "Waterfall";
        ChartTypeEnum[ChartTypeEnum["Funnel"] = 'Funnel'] = "Funnel";
        ChartTypeEnum[ChartTypeEnum["Map"] = 'Map'] = "Map";
    })(ChartTypeEnum = Chart.ChartTypeEnum || (Chart.ChartTypeEnum = {}));
})(Chart = exports.Chart || (exports.Chart = {}));
/**
 * Represents chart category resource
 */
class ChartCategory {
}
exports.ChartCategory = ChartCategory;
/**
 * Represents the lines format of chart elements.
 */
class ChartLinesFormat {
}
exports.ChartLinesFormat = ChartLinesFormat;
/**
 * Chart series group. Defines common properties for a group of series.
 */
class ChartSeriesGroup {
}
exports.ChartSeriesGroup = ChartSeriesGroup;
(function (ChartSeriesGroup) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["BarOfPieChart"] = 'BarOfPieChart'] = "BarOfPieChart";
        TypeEnum[TypeEnum["PieOfPieChart"] = 'PieOfPieChart'] = "PieOfPieChart";
        TypeEnum[TypeEnum["DoughnutChart"] = 'DoughnutChart'] = "DoughnutChart";
        TypeEnum[TypeEnum["PieChart"] = 'PieChart'] = "PieChart";
        TypeEnum[TypeEnum["AreaChartArea"] = 'AreaChartArea'] = "AreaChartArea";
        TypeEnum[TypeEnum["AreaChartPercentsStackedArea"] = 'AreaChartPercentsStackedArea'] = "AreaChartPercentsStackedArea";
        TypeEnum[TypeEnum["AreaChartStackedArea"] = 'AreaChartStackedArea'] = "AreaChartStackedArea";
        TypeEnum[TypeEnum["BarChartHorizClustered"] = 'BarChartHorizClustered'] = "BarChartHorizClustered";
        TypeEnum[TypeEnum["BarChartHorizStacked"] = 'BarChartHorizStacked'] = "BarChartHorizStacked";
        TypeEnum[TypeEnum["BarChartHorizPercentsStacked"] = 'BarChartHorizPercentsStacked'] = "BarChartHorizPercentsStacked";
        TypeEnum[TypeEnum["BarChartVertClustered"] = 'BarChartVertClustered'] = "BarChartVertClustered";
        TypeEnum[TypeEnum["BarChartVertStacked"] = 'BarChartVertStacked'] = "BarChartVertStacked";
        TypeEnum[TypeEnum["BarChartVertPercentsStacked"] = 'BarChartVertPercentsStacked'] = "BarChartVertPercentsStacked";
        TypeEnum[TypeEnum["LineChartLine"] = 'LineChartLine'] = "LineChartLine";
        TypeEnum[TypeEnum["LineChartStackedLine"] = 'LineChartStackedLine'] = "LineChartStackedLine";
        TypeEnum[TypeEnum["LineChartPercentsStackedLine"] = 'LineChartPercentsStackedLine'] = "LineChartPercentsStackedLine";
        TypeEnum[TypeEnum["RadarChart"] = 'RadarChart'] = "RadarChart";
        TypeEnum[TypeEnum["FilledRadarChart"] = 'FilledRadarChart'] = "FilledRadarChart";
        TypeEnum[TypeEnum["StockHighLowClose"] = 'StockHighLowClose'] = "StockHighLowClose";
        TypeEnum[TypeEnum["StockOpenHighLowClose"] = 'StockOpenHighLowClose'] = "StockOpenHighLowClose";
        TypeEnum[TypeEnum["StockVolumeHighLowClose"] = 'StockVolumeHighLowClose'] = "StockVolumeHighLowClose";
        TypeEnum[TypeEnum["StockVolumeOpenHighLowClose"] = 'StockVolumeOpenHighLowClose'] = "StockVolumeOpenHighLowClose";
        TypeEnum[TypeEnum["ScatterStraightMarker"] = 'ScatterStraightMarker'] = "ScatterStraightMarker";
        TypeEnum[TypeEnum["ScatterSmoothMarker"] = 'ScatterSmoothMarker'] = "ScatterSmoothMarker";
        TypeEnum[TypeEnum["AreaChartArea3D"] = 'AreaChartArea3D'] = "AreaChartArea3D";
        TypeEnum[TypeEnum["AreaChartStackedArea3D"] = 'AreaChartStackedArea3D'] = "AreaChartStackedArea3D";
        TypeEnum[TypeEnum["AreaChartPercentsStackedArea3D"] = 'AreaChartPercentsStackedArea3D'] = "AreaChartPercentsStackedArea3D";
        TypeEnum[TypeEnum["Line3DChart"] = 'Line3DChart'] = "Line3DChart";
        TypeEnum[TypeEnum["Pie3DChart"] = 'Pie3DChart'] = "Pie3DChart";
        TypeEnum[TypeEnum["Bar3DChartVert"] = 'Bar3DChartVert'] = "Bar3DChartVert";
        TypeEnum[TypeEnum["Bar3DChartVertClustered"] = 'Bar3DChartVertClustered'] = "Bar3DChartVertClustered";
        TypeEnum[TypeEnum["Bar3DChartVertPercentsStackedColumn3D"] = 'Bar3DChartVertPercentsStackedColumn3D'] = "Bar3DChartVertPercentsStackedColumn3D";
        TypeEnum[TypeEnum["Bar3DChartVertPercentsStackedCone"] = 'Bar3DChartVertPercentsStackedCone'] = "Bar3DChartVertPercentsStackedCone";
        TypeEnum[TypeEnum["Bar3DChartVertPercentsStackedCylinder"] = 'Bar3DChartVertPercentsStackedCylinder'] = "Bar3DChartVertPercentsStackedCylinder";
        TypeEnum[TypeEnum["Bar3DChartVertPercentsStackedPyramid"] = 'Bar3DChartVertPercentsStackedPyramid'] = "Bar3DChartVertPercentsStackedPyramid";
        TypeEnum[TypeEnum["Bar3DChartVertStackedColumn3D"] = 'Bar3DChartVertStackedColumn3D'] = "Bar3DChartVertStackedColumn3D";
        TypeEnum[TypeEnum["Bar3DChartVertStackedCone"] = 'Bar3DChartVertStackedCone'] = "Bar3DChartVertStackedCone";
        TypeEnum[TypeEnum["Bar3DChartVertStackedCylinder"] = 'Bar3DChartVertStackedCylinder'] = "Bar3DChartVertStackedCylinder";
        TypeEnum[TypeEnum["Bar3DChartVertStackedPyramid"] = 'Bar3DChartVertStackedPyramid'] = "Bar3DChartVertStackedPyramid";
        TypeEnum[TypeEnum["Bar3DChartHorizClustered"] = 'Bar3DChartHorizClustered'] = "Bar3DChartHorizClustered";
        TypeEnum[TypeEnum["Bar3DChartHorizStackedBar3D"] = 'Bar3DChartHorizStackedBar3D'] = "Bar3DChartHorizStackedBar3D";
        TypeEnum[TypeEnum["Bar3DChartHorizStackedCone"] = 'Bar3DChartHorizStackedCone'] = "Bar3DChartHorizStackedCone";
        TypeEnum[TypeEnum["Bar3DChartHorizStackedCylinder"] = 'Bar3DChartHorizStackedCylinder'] = "Bar3DChartHorizStackedCylinder";
        TypeEnum[TypeEnum["Bar3DChartHorizStackedPyramid"] = 'Bar3DChartHorizStackedPyramid'] = "Bar3DChartHorizStackedPyramid";
        TypeEnum[TypeEnum["Bar3DChartHorizPercentsStackedBar3D"] = 'Bar3DChartHorizPercentsStackedBar3D'] = "Bar3DChartHorizPercentsStackedBar3D";
        TypeEnum[TypeEnum["Bar3DChartHorizPercentsStackedCone"] = 'Bar3DChartHorizPercentsStackedCone'] = "Bar3DChartHorizPercentsStackedCone";
        TypeEnum[TypeEnum["Bar3DChartHorizPercentsStackedCylinder"] = 'Bar3DChartHorizPercentsStackedCylinder'] = "Bar3DChartHorizPercentsStackedCylinder";
        TypeEnum[TypeEnum["Bar3DChartHorizPercentsStackedPyramid"] = 'Bar3DChartHorizPercentsStackedPyramid'] = "Bar3DChartHorizPercentsStackedPyramid";
        TypeEnum[TypeEnum["SurfaceChartContour"] = 'SurfaceChartContour'] = "SurfaceChartContour";
        TypeEnum[TypeEnum["SurfaceChartWireframeContour"] = 'SurfaceChartWireframeContour'] = "SurfaceChartWireframeContour";
        TypeEnum[TypeEnum["SurfaceChartSurface3D"] = 'SurfaceChartSurface3D'] = "SurfaceChartSurface3D";
        TypeEnum[TypeEnum["SurfaceChartWireframeSurface3D"] = 'SurfaceChartWireframeSurface3D'] = "SurfaceChartWireframeSurface3D";
        TypeEnum[TypeEnum["BubbleChart"] = 'BubbleChart'] = "BubbleChart";
        TypeEnum[TypeEnum["HistogramChart"] = 'HistogramChart'] = "HistogramChart";
        TypeEnum[TypeEnum["ParetoLineChart"] = 'ParetoLineChart'] = "ParetoLineChart";
        TypeEnum[TypeEnum["BoxAndWhiskerChart"] = 'BoxAndWhiskerChart'] = "BoxAndWhiskerChart";
        TypeEnum[TypeEnum["WaterfallChart"] = 'WaterfallChart'] = "WaterfallChart";
        TypeEnum[TypeEnum["FunnelChart"] = 'FunnelChart'] = "FunnelChart";
        TypeEnum[TypeEnum["TreemapChart"] = 'TreemapChart'] = "TreemapChart";
        TypeEnum[TypeEnum["MapChart"] = 'MapChart'] = "MapChart";
        TypeEnum[TypeEnum["SunburstChart"] = 'SunburstChart'] = "SunburstChart";
    })(TypeEnum = ChartSeriesGroup.TypeEnum || (ChartSeriesGroup.TypeEnum = {}));
    let PieSplitByEnum;
    (function (PieSplitByEnum) {
        PieSplitByEnum[PieSplitByEnum["Default"] = 'Default'] = "Default";
        PieSplitByEnum[PieSplitByEnum["Custom"] = 'Custom'] = "Custom";
        PieSplitByEnum[PieSplitByEnum["ByPercentage"] = 'ByPercentage'] = "ByPercentage";
        PieSplitByEnum[PieSplitByEnum["ByPos"] = 'ByPos'] = "ByPos";
        PieSplitByEnum[PieSplitByEnum["ByValue"] = 'ByValue'] = "ByValue";
    })(PieSplitByEnum = ChartSeriesGroup.PieSplitByEnum || (ChartSeriesGroup.PieSplitByEnum = {}));
    let BubbleSizeRepresentationEnum;
    (function (BubbleSizeRepresentationEnum) {
        BubbleSizeRepresentationEnum[BubbleSizeRepresentationEnum["Area"] = 'Area'] = "Area";
        BubbleSizeRepresentationEnum[BubbleSizeRepresentationEnum["Width"] = 'Width'] = "Width";
    })(BubbleSizeRepresentationEnum = ChartSeriesGroup.BubbleSizeRepresentationEnum || (ChartSeriesGroup.BubbleSizeRepresentationEnum = {}));
})(ChartSeriesGroup = exports.ChartSeriesGroup || (exports.ChartSeriesGroup = {}));
/**
 * Represents chart title
 */
class ChartTitle {
}
exports.ChartTitle = ChartTitle;
/**
 * Represents a chart wall
 */
class ChartWall {
}
exports.ChartWall = ChartWall;
(function (ChartWall) {
    let PictureTypeEnum;
    (function (PictureTypeEnum) {
        PictureTypeEnum[PictureTypeEnum["Stack"] = 'Stack'] = "Stack";
        PictureTypeEnum[PictureTypeEnum["StackScale"] = 'StackScale'] = "StackScale";
        PictureTypeEnum[PictureTypeEnum["Stretch"] = 'Stretch'] = "Stretch";
        PictureTypeEnum[PictureTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(PictureTypeEnum = ChartWall.PictureTypeEnum || (ChartWall.PictureTypeEnum = {}));
})(ChartWall = exports.ChartWall || (exports.ChartWall = {}));
/**
 * 3D chart wall type
 */
/**
* 3D chart wall type
*/
var ChartWallType;
(function (ChartWallType) {
    ChartWallType[ChartWallType["Floor"] = 'Floor'] = "Floor";
    ChartWallType[ChartWallType["SideWall"] = 'SideWall'] = "SideWall";
    ChartWallType[ChartWallType["BackWall"] = 'BackWall'] = "BackWall";
})(ChartWallType = exports.ChartWallType || (exports.ChartWallType = {}));
/**
 * Close path segment of the geometry path
 */
class ClosePathSegment extends PathSegment {
    constructor() {
        super();
        this.type = ClosePathSegment.TypeEnum.Close;
    }
}
exports.ClosePathSegment = ClosePathSegment;
/**
 * Represents a Color Change effect.
 */
class ColorChangeEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = ColorChangeEffect.TypeEnum.ColorChange;
    }
}
exports.ColorChangeEffect = ColorChangeEffect;
/**
 * Represents a Color Replacement effect.
 */
class ColorReplaceEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = ColorReplaceEffect.TypeEnum.ColorReplace;
    }
}
exports.ColorReplaceEffect = ColorReplaceEffect;
/**
 * Slide's color scheme DTO
 */
class ColorScheme extends ResourceBase {
    constructor() {
        super();
    }
}
exports.ColorScheme = ColorScheme;
/**
 * Represents a comment author
 */
class CommentAuthor {
}
exports.CommentAuthor = CommentAuthor;
/**
 * Represents comments collection of slide
 */
class CommentAuthors extends ResourceBase {
    constructor() {
        super();
    }
}
exports.CommentAuthors = CommentAuthors;
/**
 * Slide view properties.
 */
class CommonSlideViewProperties {
}
exports.CommonSlideViewProperties = CommonSlideViewProperties;
/**
 * Represents Connector resource.
 */
class Connector extends GeometryShape {
    constructor() {
        super();
        this.type = Connector.TypeEnum.Connector;
    }
}
exports.Connector = Connector;
/**
 * Cubic Bezier curve segment of the geometry path
 */
class CubicBezierToPathSegment extends PathSegment {
    constructor() {
        super();
        this.type = CubicBezierToPathSegment.TypeEnum.CubicBezierTo;
    }
}
exports.CubicBezierToPathSegment = CubicBezierToPathSegment;
/**
 * Custom dash pattern.
 */
class CustomDashPattern {
}
exports.CustomDashPattern = CustomDashPattern;
/**
 * Data source for chart values.
 */
class DataSource {
}
exports.DataSource = DataSource;
(function (DataSource) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Workbook"] = 'Workbook'] = "Workbook";
        TypeEnum[TypeEnum["Literals"] = 'Literals'] = "Literals";
    })(TypeEnum = DataSource.TypeEnum || (DataSource.TypeEnum = {}));
})(DataSource = exports.DataSource || (exports.DataSource = {}));
/**
 * Delimiter element
 */
class DelimiterElement extends MathElement {
    constructor() {
        super();
        this.type = DelimiterElement.TypeEnum.Delimiter;
    }
}
exports.DelimiterElement = DelimiterElement;
(function (DelimiterElement) {
    let DelimiterShapeEnum;
    (function (DelimiterShapeEnum) {
        DelimiterShapeEnum[DelimiterShapeEnum["Centered"] = 'Centered'] = "Centered";
        DelimiterShapeEnum[DelimiterShapeEnum["Match"] = 'Match'] = "Match";
    })(DelimiterShapeEnum = DelimiterElement.DelimiterShapeEnum || (DelimiterElement.DelimiterShapeEnum = {}));
})(DelimiterElement = exports.DelimiterElement || (exports.DelimiterElement = {}));
/**
 * Class for disc space information.
 */
class DiscUsage {
}
exports.DiscUsage = DiscUsage;
/**
 * Represents document DTO.
 */
class Document extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Document = Document;
/**
 * Slides document properties.
 */
class DocumentProperties extends ResourceBase {
    constructor() {
        super();
    }
}
exports.DocumentProperties = DocumentProperties;
/**
 * Document property.
 */
class DocumentProperty extends ResourceBase {
    constructor() {
        super();
    }
}
exports.DocumentProperty = DocumentProperty;
/**
 * Represents document replace result DTO.
 */
class DocumentReplaceResult extends Document {
    constructor() {
        super();
    }
}
exports.DocumentReplaceResult = DocumentReplaceResult;
/**
 * Represents a Duotone effect.
 */
class DuotoneEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = DuotoneEffect.TypeEnum.Duotone;
    }
}
exports.DuotoneEffect = DuotoneEffect;
/**
 * Represents comment of slide
 */
class Effect {
}
exports.Effect = Effect;
(function (Effect) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Appear"] = 'Appear'] = "Appear";
        TypeEnum[TypeEnum["CurveUpDown"] = 'CurveUpDown'] = "CurveUpDown";
        TypeEnum[TypeEnum["Ascend"] = 'Ascend'] = "Ascend";
        TypeEnum[TypeEnum["Blast"] = 'Blast'] = "Blast";
        TypeEnum[TypeEnum["Blinds"] = 'Blinds'] = "Blinds";
        TypeEnum[TypeEnum["Blink"] = 'Blink'] = "Blink";
        TypeEnum[TypeEnum["BoldFlash"] = 'BoldFlash'] = "BoldFlash";
        TypeEnum[TypeEnum["BoldReveal"] = 'BoldReveal'] = "BoldReveal";
        TypeEnum[TypeEnum["Boomerang"] = 'Boomerang'] = "Boomerang";
        TypeEnum[TypeEnum["Bounce"] = 'Bounce'] = "Bounce";
        TypeEnum[TypeEnum["Box"] = 'Box'] = "Box";
        TypeEnum[TypeEnum["BrushOnColor"] = 'BrushOnColor'] = "BrushOnColor";
        TypeEnum[TypeEnum["BrushOnUnderline"] = 'BrushOnUnderline'] = "BrushOnUnderline";
        TypeEnum[TypeEnum["CenterRevolve"] = 'CenterRevolve'] = "CenterRevolve";
        TypeEnum[TypeEnum["ChangeFillColor"] = 'ChangeFillColor'] = "ChangeFillColor";
        TypeEnum[TypeEnum["ChangeFont"] = 'ChangeFont'] = "ChangeFont";
        TypeEnum[TypeEnum["ChangeFontColor"] = 'ChangeFontColor'] = "ChangeFontColor";
        TypeEnum[TypeEnum["ChangeFontSize"] = 'ChangeFontSize'] = "ChangeFontSize";
        TypeEnum[TypeEnum["ChangeFontStyle"] = 'ChangeFontStyle'] = "ChangeFontStyle";
        TypeEnum[TypeEnum["ChangeLineColor"] = 'ChangeLineColor'] = "ChangeLineColor";
        TypeEnum[TypeEnum["Checkerboard"] = 'Checkerboard'] = "Checkerboard";
        TypeEnum[TypeEnum["Circle"] = 'Circle'] = "Circle";
        TypeEnum[TypeEnum["ColorBlend"] = 'ColorBlend'] = "ColorBlend";
        TypeEnum[TypeEnum["ColorTypewriter"] = 'ColorTypewriter'] = "ColorTypewriter";
        TypeEnum[TypeEnum["ColorWave"] = 'ColorWave'] = "ColorWave";
        TypeEnum[TypeEnum["ComplementaryColor"] = 'ComplementaryColor'] = "ComplementaryColor";
        TypeEnum[TypeEnum["ComplementaryColor2"] = 'ComplementaryColor2'] = "ComplementaryColor2";
        TypeEnum[TypeEnum["Compress"] = 'Compress'] = "Compress";
        TypeEnum[TypeEnum["ContrastingColor"] = 'ContrastingColor'] = "ContrastingColor";
        TypeEnum[TypeEnum["Crawl"] = 'Crawl'] = "Crawl";
        TypeEnum[TypeEnum["Credits"] = 'Credits'] = "Credits";
        TypeEnum[TypeEnum["Custom"] = 'Custom'] = "Custom";
        TypeEnum[TypeEnum["Darken"] = 'Darken'] = "Darken";
        TypeEnum[TypeEnum["Desaturate"] = 'Desaturate'] = "Desaturate";
        TypeEnum[TypeEnum["Descend"] = 'Descend'] = "Descend";
        TypeEnum[TypeEnum["Diamond"] = 'Diamond'] = "Diamond";
        TypeEnum[TypeEnum["Dissolve"] = 'Dissolve'] = "Dissolve";
        TypeEnum[TypeEnum["EaseInOut"] = 'EaseInOut'] = "EaseInOut";
        TypeEnum[TypeEnum["Expand"] = 'Expand'] = "Expand";
        TypeEnum[TypeEnum["Fade"] = 'Fade'] = "Fade";
        TypeEnum[TypeEnum["FadedSwivel"] = 'FadedSwivel'] = "FadedSwivel";
        TypeEnum[TypeEnum["FadedZoom"] = 'FadedZoom'] = "FadedZoom";
        TypeEnum[TypeEnum["FlashBulb"] = 'FlashBulb'] = "FlashBulb";
        TypeEnum[TypeEnum["FlashOnce"] = 'FlashOnce'] = "FlashOnce";
        TypeEnum[TypeEnum["Flicker"] = 'Flicker'] = "Flicker";
        TypeEnum[TypeEnum["Flip"] = 'Flip'] = "Flip";
        TypeEnum[TypeEnum["Float"] = 'Float'] = "Float";
        TypeEnum[TypeEnum["Fly"] = 'Fly'] = "Fly";
        TypeEnum[TypeEnum["Fold"] = 'Fold'] = "Fold";
        TypeEnum[TypeEnum["Glide"] = 'Glide'] = "Glide";
        TypeEnum[TypeEnum["GrowAndTurn"] = 'GrowAndTurn'] = "GrowAndTurn";
        TypeEnum[TypeEnum["GrowShrink"] = 'GrowShrink'] = "GrowShrink";
        TypeEnum[TypeEnum["GrowWithColor"] = 'GrowWithColor'] = "GrowWithColor";
        TypeEnum[TypeEnum["Lighten"] = 'Lighten'] = "Lighten";
        TypeEnum[TypeEnum["LightSpeed"] = 'LightSpeed'] = "LightSpeed";
        TypeEnum[TypeEnum["MediaPause"] = 'MediaPause'] = "MediaPause";
        TypeEnum[TypeEnum["MediaPlay"] = 'MediaPlay'] = "MediaPlay";
        TypeEnum[TypeEnum["MediaStop"] = 'MediaStop'] = "MediaStop";
        TypeEnum[TypeEnum["Path4PointStar"] = 'Path4PointStar'] = "Path4PointStar";
        TypeEnum[TypeEnum["Path5PointStar"] = 'Path5PointStar'] = "Path5PointStar";
        TypeEnum[TypeEnum["Path6PointStar"] = 'Path6PointStar'] = "Path6PointStar";
        TypeEnum[TypeEnum["Path8PointStar"] = 'Path8PointStar'] = "Path8PointStar";
        TypeEnum[TypeEnum["PathArcDown"] = 'PathArcDown'] = "PathArcDown";
        TypeEnum[TypeEnum["PathArcLeft"] = 'PathArcLeft'] = "PathArcLeft";
        TypeEnum[TypeEnum["PathArcRight"] = 'PathArcRight'] = "PathArcRight";
        TypeEnum[TypeEnum["PathArcUp"] = 'PathArcUp'] = "PathArcUp";
        TypeEnum[TypeEnum["PathBean"] = 'PathBean'] = "PathBean";
        TypeEnum[TypeEnum["PathBounceLeft"] = 'PathBounceLeft'] = "PathBounceLeft";
        TypeEnum[TypeEnum["PathBounceRight"] = 'PathBounceRight'] = "PathBounceRight";
        TypeEnum[TypeEnum["PathBuzzsaw"] = 'PathBuzzsaw'] = "PathBuzzsaw";
        TypeEnum[TypeEnum["PathCircle"] = 'PathCircle'] = "PathCircle";
        TypeEnum[TypeEnum["PathCrescentMoon"] = 'PathCrescentMoon'] = "PathCrescentMoon";
        TypeEnum[TypeEnum["PathCurvedSquare"] = 'PathCurvedSquare'] = "PathCurvedSquare";
        TypeEnum[TypeEnum["PathCurvedX"] = 'PathCurvedX'] = "PathCurvedX";
        TypeEnum[TypeEnum["PathCurvyLeft"] = 'PathCurvyLeft'] = "PathCurvyLeft";
        TypeEnum[TypeEnum["PathCurvyRight"] = 'PathCurvyRight'] = "PathCurvyRight";
        TypeEnum[TypeEnum["PathCurvyStar"] = 'PathCurvyStar'] = "PathCurvyStar";
        TypeEnum[TypeEnum["PathDecayingWave"] = 'PathDecayingWave'] = "PathDecayingWave";
        TypeEnum[TypeEnum["PathDiagonalDownRight"] = 'PathDiagonalDownRight'] = "PathDiagonalDownRight";
        TypeEnum[TypeEnum["PathDiagonalUpRight"] = 'PathDiagonalUpRight'] = "PathDiagonalUpRight";
        TypeEnum[TypeEnum["PathDiamond"] = 'PathDiamond'] = "PathDiamond";
        TypeEnum[TypeEnum["PathDown"] = 'PathDown'] = "PathDown";
        TypeEnum[TypeEnum["PathEqualTriangle"] = 'PathEqualTriangle'] = "PathEqualTriangle";
        TypeEnum[TypeEnum["PathFigure8Four"] = 'PathFigure8Four'] = "PathFigure8Four";
        TypeEnum[TypeEnum["PathFootball"] = 'PathFootball'] = "PathFootball";
        TypeEnum[TypeEnum["PathFunnel"] = 'PathFunnel'] = "PathFunnel";
        TypeEnum[TypeEnum["PathHeart"] = 'PathHeart'] = "PathHeart";
        TypeEnum[TypeEnum["PathHeartbeat"] = 'PathHeartbeat'] = "PathHeartbeat";
        TypeEnum[TypeEnum["PathHexagon"] = 'PathHexagon'] = "PathHexagon";
        TypeEnum[TypeEnum["PathHorizontalFigure8"] = 'PathHorizontalFigure8'] = "PathHorizontalFigure8";
        TypeEnum[TypeEnum["PathInvertedSquare"] = 'PathInvertedSquare'] = "PathInvertedSquare";
        TypeEnum[TypeEnum["PathInvertedTriangle"] = 'PathInvertedTriangle'] = "PathInvertedTriangle";
        TypeEnum[TypeEnum["PathLeft"] = 'PathLeft'] = "PathLeft";
        TypeEnum[TypeEnum["PathLoopdeLoop"] = 'PathLoopdeLoop'] = "PathLoopdeLoop";
        TypeEnum[TypeEnum["PathNeutron"] = 'PathNeutron'] = "PathNeutron";
        TypeEnum[TypeEnum["PathOctagon"] = 'PathOctagon'] = "PathOctagon";
        TypeEnum[TypeEnum["PathParallelogram"] = 'PathParallelogram'] = "PathParallelogram";
        TypeEnum[TypeEnum["PathPeanut"] = 'PathPeanut'] = "PathPeanut";
        TypeEnum[TypeEnum["PathPentagon"] = 'PathPentagon'] = "PathPentagon";
        TypeEnum[TypeEnum["PathPlus"] = 'PathPlus'] = "PathPlus";
        TypeEnum[TypeEnum["PathPointyStar"] = 'PathPointyStar'] = "PathPointyStar";
        TypeEnum[TypeEnum["PathRight"] = 'PathRight'] = "PathRight";
        TypeEnum[TypeEnum["PathRightTriangle"] = 'PathRightTriangle'] = "PathRightTriangle";
        TypeEnum[TypeEnum["PathSCurve1"] = 'PathSCurve1'] = "PathSCurve1";
        TypeEnum[TypeEnum["PathSCurve2"] = 'PathSCurve2'] = "PathSCurve2";
        TypeEnum[TypeEnum["PathSineWave"] = 'PathSineWave'] = "PathSineWave";
        TypeEnum[TypeEnum["PathSpiralLeft"] = 'PathSpiralLeft'] = "PathSpiralLeft";
        TypeEnum[TypeEnum["PathSpiralRight"] = 'PathSpiralRight'] = "PathSpiralRight";
        TypeEnum[TypeEnum["PathSpring"] = 'PathSpring'] = "PathSpring";
        TypeEnum[TypeEnum["PathSquare"] = 'PathSquare'] = "PathSquare";
        TypeEnum[TypeEnum["PathStairsDown"] = 'PathStairsDown'] = "PathStairsDown";
        TypeEnum[TypeEnum["PathSwoosh"] = 'PathSwoosh'] = "PathSwoosh";
        TypeEnum[TypeEnum["PathTeardrop"] = 'PathTeardrop'] = "PathTeardrop";
        TypeEnum[TypeEnum["PathTrapezoid"] = 'PathTrapezoid'] = "PathTrapezoid";
        TypeEnum[TypeEnum["PathTurnDown"] = 'PathTurnDown'] = "PathTurnDown";
        TypeEnum[TypeEnum["PathTurnRight"] = 'PathTurnRight'] = "PathTurnRight";
        TypeEnum[TypeEnum["PathTurnUp"] = 'PathTurnUp'] = "PathTurnUp";
        TypeEnum[TypeEnum["PathTurnUpRight"] = 'PathTurnUpRight'] = "PathTurnUpRight";
        TypeEnum[TypeEnum["PathUp"] = 'PathUp'] = "PathUp";
        TypeEnum[TypeEnum["PathUser"] = 'PathUser'] = "PathUser";
        TypeEnum[TypeEnum["PathVerticalFigure8"] = 'PathVerticalFigure8'] = "PathVerticalFigure8";
        TypeEnum[TypeEnum["PathWave"] = 'PathWave'] = "PathWave";
        TypeEnum[TypeEnum["PathZigzag"] = 'PathZigzag'] = "PathZigzag";
        TypeEnum[TypeEnum["Peek"] = 'Peek'] = "Peek";
        TypeEnum[TypeEnum["Pinwheel"] = 'Pinwheel'] = "Pinwheel";
        TypeEnum[TypeEnum["Plus"] = 'Plus'] = "Plus";
        TypeEnum[TypeEnum["RandomBars"] = 'RandomBars'] = "RandomBars";
        TypeEnum[TypeEnum["RandomEffects"] = 'RandomEffects'] = "RandomEffects";
        TypeEnum[TypeEnum["RiseUp"] = 'RiseUp'] = "RiseUp";
        TypeEnum[TypeEnum["Shimmer"] = 'Shimmer'] = "Shimmer";
        TypeEnum[TypeEnum["Sling"] = 'Sling'] = "Sling";
        TypeEnum[TypeEnum["Spin"] = 'Spin'] = "Spin";
        TypeEnum[TypeEnum["Spinner"] = 'Spinner'] = "Spinner";
        TypeEnum[TypeEnum["Spiral"] = 'Spiral'] = "Spiral";
        TypeEnum[TypeEnum["Split"] = 'Split'] = "Split";
        TypeEnum[TypeEnum["Stretch"] = 'Stretch'] = "Stretch";
        TypeEnum[TypeEnum["Strips"] = 'Strips'] = "Strips";
        TypeEnum[TypeEnum["StyleEmphasis"] = 'StyleEmphasis'] = "StyleEmphasis";
        TypeEnum[TypeEnum["Swish"] = 'Swish'] = "Swish";
        TypeEnum[TypeEnum["Swivel"] = 'Swivel'] = "Swivel";
        TypeEnum[TypeEnum["Teeter"] = 'Teeter'] = "Teeter";
        TypeEnum[TypeEnum["Thread"] = 'Thread'] = "Thread";
        TypeEnum[TypeEnum["Transparency"] = 'Transparency'] = "Transparency";
        TypeEnum[TypeEnum["Unfold"] = 'Unfold'] = "Unfold";
        TypeEnum[TypeEnum["VerticalGrow"] = 'VerticalGrow'] = "VerticalGrow";
        TypeEnum[TypeEnum["Wave"] = 'Wave'] = "Wave";
        TypeEnum[TypeEnum["Wedge"] = 'Wedge'] = "Wedge";
        TypeEnum[TypeEnum["Wheel"] = 'Wheel'] = "Wheel";
        TypeEnum[TypeEnum["Whip"] = 'Whip'] = "Whip";
        TypeEnum[TypeEnum["Wipe"] = 'Wipe'] = "Wipe";
        TypeEnum[TypeEnum["Magnify"] = 'Magnify'] = "Magnify";
        TypeEnum[TypeEnum["Zoom"] = 'Zoom'] = "Zoom";
        TypeEnum[TypeEnum["OLEObjectShow"] = 'OLEObjectShow'] = "OLEObjectShow";
        TypeEnum[TypeEnum["OLEObjectEdit"] = 'OLEObjectEdit'] = "OLEObjectEdit";
        TypeEnum[TypeEnum["OLEObjectOpen"] = 'OLEObjectOpen'] = "OLEObjectOpen";
    })(TypeEnum = Effect.TypeEnum || (Effect.TypeEnum = {}));
    let SubtypeEnum;
    (function (SubtypeEnum) {
        SubtypeEnum[SubtypeEnum["None"] = 'None'] = "None";
        SubtypeEnum[SubtypeEnum["Across"] = 'Across'] = "Across";
        SubtypeEnum[SubtypeEnum["Bottom"] = 'Bottom'] = "Bottom";
        SubtypeEnum[SubtypeEnum["BottomLeft"] = 'BottomLeft'] = "BottomLeft";
        SubtypeEnum[SubtypeEnum["BottomRight"] = 'BottomRight'] = "BottomRight";
        SubtypeEnum[SubtypeEnum["Center"] = 'Center'] = "Center";
        SubtypeEnum[SubtypeEnum["Clockwise"] = 'Clockwise'] = "Clockwise";
        SubtypeEnum[SubtypeEnum["CounterClockwise"] = 'CounterClockwise'] = "CounterClockwise";
        SubtypeEnum[SubtypeEnum["GradualAndCycleClockwise"] = 'GradualAndCycleClockwise'] = "GradualAndCycleClockwise";
        SubtypeEnum[SubtypeEnum["GradualAndCycleCounterClockwise"] = 'GradualAndCycleCounterClockwise'] = "GradualAndCycleCounterClockwise";
        SubtypeEnum[SubtypeEnum["Down"] = 'Down'] = "Down";
        SubtypeEnum[SubtypeEnum["DownLeft"] = 'DownLeft'] = "DownLeft";
        SubtypeEnum[SubtypeEnum["DownRight"] = 'DownRight'] = "DownRight";
        SubtypeEnum[SubtypeEnum["FontAllCaps"] = 'FontAllCaps'] = "FontAllCaps";
        SubtypeEnum[SubtypeEnum["FontBold"] = 'FontBold'] = "FontBold";
        SubtypeEnum[SubtypeEnum["FontItalic"] = 'FontItalic'] = "FontItalic";
        SubtypeEnum[SubtypeEnum["FontShadow"] = 'FontShadow'] = "FontShadow";
        SubtypeEnum[SubtypeEnum["FontStrikethrough"] = 'FontStrikethrough'] = "FontStrikethrough";
        SubtypeEnum[SubtypeEnum["FontUnderline"] = 'FontUnderline'] = "FontUnderline";
        SubtypeEnum[SubtypeEnum["Gradual"] = 'Gradual'] = "Gradual";
        SubtypeEnum[SubtypeEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        SubtypeEnum[SubtypeEnum["HorizontalIn"] = 'HorizontalIn'] = "HorizontalIn";
        SubtypeEnum[SubtypeEnum["HorizontalOut"] = 'HorizontalOut'] = "HorizontalOut";
        SubtypeEnum[SubtypeEnum["In"] = 'In'] = "In";
        SubtypeEnum[SubtypeEnum["InBottom"] = 'InBottom'] = "InBottom";
        SubtypeEnum[SubtypeEnum["InCenter"] = 'InCenter'] = "InCenter";
        SubtypeEnum[SubtypeEnum["InSlightly"] = 'InSlightly'] = "InSlightly";
        SubtypeEnum[SubtypeEnum["Instant"] = 'Instant'] = "Instant";
        SubtypeEnum[SubtypeEnum["Left"] = 'Left'] = "Left";
        SubtypeEnum[SubtypeEnum["OrdinalMask"] = 'OrdinalMask'] = "OrdinalMask";
        SubtypeEnum[SubtypeEnum["Out"] = 'Out'] = "Out";
        SubtypeEnum[SubtypeEnum["OutBottom"] = 'OutBottom'] = "OutBottom";
        SubtypeEnum[SubtypeEnum["OutCenter"] = 'OutCenter'] = "OutCenter";
        SubtypeEnum[SubtypeEnum["OutSlightly"] = 'OutSlightly'] = "OutSlightly";
        SubtypeEnum[SubtypeEnum["Right"] = 'Right'] = "Right";
        SubtypeEnum[SubtypeEnum["Slightly"] = 'Slightly'] = "Slightly";
        SubtypeEnum[SubtypeEnum["Top"] = 'Top'] = "Top";
        SubtypeEnum[SubtypeEnum["TopLeft"] = 'TopLeft'] = "TopLeft";
        SubtypeEnum[SubtypeEnum["TopRight"] = 'TopRight'] = "TopRight";
        SubtypeEnum[SubtypeEnum["Up"] = 'Up'] = "Up";
        SubtypeEnum[SubtypeEnum["UpLeft"] = 'UpLeft'] = "UpLeft";
        SubtypeEnum[SubtypeEnum["UpRight"] = 'UpRight'] = "UpRight";
        SubtypeEnum[SubtypeEnum["Vertical"] = 'Vertical'] = "Vertical";
        SubtypeEnum[SubtypeEnum["VerticalIn"] = 'VerticalIn'] = "VerticalIn";
        SubtypeEnum[SubtypeEnum["VerticalOut"] = 'VerticalOut'] = "VerticalOut";
        SubtypeEnum[SubtypeEnum["Wheel1"] = 'Wheel1'] = "Wheel1";
        SubtypeEnum[SubtypeEnum["Wheel2"] = 'Wheel2'] = "Wheel2";
        SubtypeEnum[SubtypeEnum["Wheel3"] = 'Wheel3'] = "Wheel3";
        SubtypeEnum[SubtypeEnum["Wheel4"] = 'Wheel4'] = "Wheel4";
        SubtypeEnum[SubtypeEnum["Wheel8"] = 'Wheel8'] = "Wheel8";
    })(SubtypeEnum = Effect.SubtypeEnum || (Effect.SubtypeEnum = {}));
    let PresetClassTypeEnum;
    (function (PresetClassTypeEnum) {
        PresetClassTypeEnum[PresetClassTypeEnum["Entrance"] = 'Entrance'] = "Entrance";
        PresetClassTypeEnum[PresetClassTypeEnum["Exit"] = 'Exit'] = "Exit";
        PresetClassTypeEnum[PresetClassTypeEnum["Emphasis"] = 'Emphasis'] = "Emphasis";
        PresetClassTypeEnum[PresetClassTypeEnum["Path"] = 'Path'] = "Path";
        PresetClassTypeEnum[PresetClassTypeEnum["MediaCall"] = 'MediaCall'] = "MediaCall";
        PresetClassTypeEnum[PresetClassTypeEnum["OLEActionVerbs"] = 'OLEActionVerbs'] = "OLEActionVerbs";
    })(PresetClassTypeEnum = Effect.PresetClassTypeEnum || (Effect.PresetClassTypeEnum = {}));
    let AnimateTextTypeEnum;
    (function (AnimateTextTypeEnum) {
        AnimateTextTypeEnum[AnimateTextTypeEnum["AllAtOnce"] = 'AllAtOnce'] = "AllAtOnce";
        AnimateTextTypeEnum[AnimateTextTypeEnum["ByWord"] = 'ByWord'] = "ByWord";
        AnimateTextTypeEnum[AnimateTextTypeEnum["ByLetter"] = 'ByLetter'] = "ByLetter";
    })(AnimateTextTypeEnum = Effect.AnimateTextTypeEnum || (Effect.AnimateTextTypeEnum = {}));
    let TriggerTypeEnum;
    (function (TriggerTypeEnum) {
        TriggerTypeEnum[TriggerTypeEnum["AfterPrevious"] = 'AfterPrevious'] = "AfterPrevious";
        TriggerTypeEnum[TriggerTypeEnum["OnClick"] = 'OnClick'] = "OnClick";
        TriggerTypeEnum[TriggerTypeEnum["WithPrevious"] = 'WithPrevious'] = "WithPrevious";
    })(TriggerTypeEnum = Effect.TriggerTypeEnum || (Effect.TriggerTypeEnum = {}));
    let RestartEnum;
    (function (RestartEnum) {
        RestartEnum[RestartEnum["Always"] = 'Always'] = "Always";
        RestartEnum[RestartEnum["WhenNotActive"] = 'WhenNotActive'] = "WhenNotActive";
        RestartEnum[RestartEnum["Never"] = 'Never'] = "Never";
        RestartEnum[RestartEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(RestartEnum = Effect.RestartEnum || (Effect.RestartEnum = {}));
    let AfterAnimationTypeEnum;
    (function (AfterAnimationTypeEnum) {
        AfterAnimationTypeEnum[AfterAnimationTypeEnum["DoNotDim"] = 'DoNotDim'] = "DoNotDim";
        AfterAnimationTypeEnum[AfterAnimationTypeEnum["Color"] = 'Color'] = "Color";
        AfterAnimationTypeEnum[AfterAnimationTypeEnum["HideAfterAnimation"] = 'HideAfterAnimation'] = "HideAfterAnimation";
        AfterAnimationTypeEnum[AfterAnimationTypeEnum["HideOnNextMouseClick"] = 'HideOnNextMouseClick'] = "HideOnNextMouseClick";
    })(AfterAnimationTypeEnum = Effect.AfterAnimationTypeEnum || (Effect.AfterAnimationTypeEnum = {}));
})(Effect = exports.Effect || (exports.Effect = {}));
/**
 * Effect format
 */
class EffectFormat {
}
exports.EffectFormat = EffectFormat;
/**
 * Information about object existence.
 */
class EntityExists {
}
exports.EntityExists = EntityExists;
/**
 * The error details
 */
class ErrorDetails {
}
exports.ErrorDetails = ErrorDetails;
/**
 * Available export formats
 */
/**
* Available export formats
*/
var ExportFormat;
(function (ExportFormat) {
    ExportFormat[ExportFormat["Pdf"] = 'Pdf'] = "Pdf";
    ExportFormat[ExportFormat["Xps"] = 'Xps'] = "Xps";
    ExportFormat[ExportFormat["Tiff"] = 'Tiff'] = "Tiff";
    ExportFormat[ExportFormat["Pptx"] = 'Pptx'] = "Pptx";
    ExportFormat[ExportFormat["Odp"] = 'Odp'] = "Odp";
    ExportFormat[ExportFormat["Otp"] = 'Otp'] = "Otp";
    ExportFormat[ExportFormat["Ppt"] = 'Ppt'] = "Ppt";
    ExportFormat[ExportFormat["Pps"] = 'Pps'] = "Pps";
    ExportFormat[ExportFormat["Ppsx"] = 'Ppsx'] = "Ppsx";
    ExportFormat[ExportFormat["Pptm"] = 'Pptm'] = "Pptm";
    ExportFormat[ExportFormat["Ppsm"] = 'Ppsm'] = "Ppsm";
    ExportFormat[ExportFormat["Pot"] = 'Pot'] = "Pot";
    ExportFormat[ExportFormat["Potx"] = 'Potx'] = "Potx";
    ExportFormat[ExportFormat["Potm"] = 'Potm'] = "Potm";
    ExportFormat[ExportFormat["Html"] = 'Html'] = "Html";
    ExportFormat[ExportFormat["Html5"] = 'Html5'] = "Html5";
    ExportFormat[ExportFormat["Swf"] = 'Swf'] = "Swf";
    ExportFormat[ExportFormat["Svg"] = 'Svg'] = "Svg";
    ExportFormat[ExportFormat["Jpeg"] = 'Jpeg'] = "Jpeg";
    ExportFormat[ExportFormat["Png"] = 'Png'] = "Png";
    ExportFormat[ExportFormat["Gif"] = 'Gif'] = "Gif";
    ExportFormat[ExportFormat["Bmp"] = 'Bmp'] = "Bmp";
    ExportFormat[ExportFormat["Fodp"] = 'Fodp'] = "Fodp";
    ExportFormat[ExportFormat["Xaml"] = 'Xaml'] = "Xaml";
    ExportFormat[ExportFormat["Mpeg4"] = 'Mpeg4'] = "Mpeg4";
    ExportFormat[ExportFormat["Md"] = 'Md'] = "Md";
    ExportFormat[ExportFormat["Xml"] = 'Xml'] = "Xml";
})(ExportFormat = exports.ExportFormat || (exports.ExportFormat = {}));
/**
 * Represents export options for whole presentation.
 */
class ExportOptions {
}
exports.ExportOptions = ExportOptions;
(function (ExportOptions) {
    let GradientStyleEnum;
    (function (GradientStyleEnum) {
        GradientStyleEnum[GradientStyleEnum["Default"] = 'Default'] = "Default";
        GradientStyleEnum[GradientStyleEnum["PowerPointUI"] = 'PowerPointUI'] = "PowerPointUI";
    })(GradientStyleEnum = ExportOptions.GradientStyleEnum || (ExportOptions.GradientStyleEnum = {}));
})(ExportOptions = exports.ExportOptions || (exports.ExportOptions = {}));
/**
 * File or folder information
 */
class StorageFile {
}
exports.StorageFile = StorageFile;
/**
 * File Version
 */
class FileVersion extends StorageFile {
    constructor() {
        super();
    }
}
exports.FileVersion = FileVersion;
/**
 * File versions FileVersion.
 */
class FileVersions {
}
exports.FileVersions = FileVersions;
/**
 * Files list
 */
class FilesList {
}
exports.FilesList = FilesList;
/**
 * File upload result
 */
class FilesUploadResult {
}
exports.FilesUploadResult = FilesUploadResult;
/**
 * Base class for fill formats
 */
class FillFormat {
}
exports.FillFormat = FillFormat;
(function (FillFormat) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["NoFill"] = 'NoFill'] = "NoFill";
        TypeEnum[TypeEnum["Solid"] = 'Solid'] = "Solid";
        TypeEnum[TypeEnum["Gradient"] = 'Gradient'] = "Gradient";
        TypeEnum[TypeEnum["Pattern"] = 'Pattern'] = "Pattern";
        TypeEnum[TypeEnum["Picture"] = 'Picture'] = "Picture";
        TypeEnum[TypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TypeEnum = FillFormat.TypeEnum || (FillFormat.TypeEnum = {}));
})(FillFormat = exports.FillFormat || (exports.FillFormat = {}));
/**
 * Represents fill overlay effect
 */
class FillOverlayEffect {
}
exports.FillOverlayEffect = FillOverlayEffect;
(function (FillOverlayEffect) {
    let BlendEnum;
    (function (BlendEnum) {
        BlendEnum[BlendEnum["Darken"] = 'Darken'] = "Darken";
        BlendEnum[BlendEnum["Lighten"] = 'Lighten'] = "Lighten";
        BlendEnum[BlendEnum["Multiply"] = 'Multiply'] = "Multiply";
        BlendEnum[BlendEnum["Overlay"] = 'Overlay'] = "Overlay";
        BlendEnum[BlendEnum["Screen"] = 'Screen'] = "Screen";
    })(BlendEnum = FillOverlayEffect.BlendEnum || (FillOverlayEffect.BlendEnum = {}));
})(FillOverlayEffect = exports.FillOverlayEffect || (exports.FillOverlayEffect = {}));
/**
 * Represents a Fill Overlay effect. A fill overlay may be used to specify an additional fill for an object and blend the two fills together.
 */
class FillOverlayImageEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = FillOverlayImageEffect.TypeEnum.FillOverlay;
    }
}
exports.FillOverlayImageEffect = FillOverlayImageEffect;
(function (FillOverlayImageEffect) {
    let BlendEnum;
    (function (BlendEnum) {
        BlendEnum[BlendEnum["Darken"] = 'Darken'] = "Darken";
        BlendEnum[BlendEnum["Lighten"] = 'Lighten'] = "Lighten";
        BlendEnum[BlendEnum["Multiply"] = 'Multiply'] = "Multiply";
        BlendEnum[BlendEnum["Overlay"] = 'Overlay'] = "Overlay";
        BlendEnum[BlendEnum["Screen"] = 'Screen'] = "Screen";
    })(BlendEnum = FillOverlayImageEffect.BlendEnum || (FillOverlayImageEffect.BlendEnum = {}));
})(FillOverlayImageEffect = exports.FillOverlayImageEffect || (exports.FillOverlayImageEffect = {}));
/**
 * Represents font info.
 */
class FontData {
}
exports.FontData = FontData;
/**
 * Represents font fallback rule.
 */
class FontFallbackRule {
}
exports.FontFallbackRule = FontFallbackRule;
/**
 * Represents font scheme
 */
class FontScheme extends ResourceBase {
    constructor() {
        super();
    }
}
exports.FontScheme = FontScheme;
/**
 * Font set.
 */
class FontSet {
}
exports.FontSet = FontSet;
/**
 * Represents font substitution rule.
 */
class FontSubstRule {
}
exports.FontSubstRule = FontSubstRule;
/**
 * List of fonts data
 */
class FontsData {
}
exports.FontsData = FontsData;
/**
 * Represents Format Scheme for slide's theme
 */
class FormatScheme extends ResourceBase {
    constructor() {
        super();
    }
}
exports.FormatScheme = FormatScheme;
/**
 * Specifies the fraction object, consisting of a numerator and denominator separated by a fraction bar.
 */
class FractionElement extends MathElement {
    constructor() {
        super();
        this.type = FractionElement.TypeEnum.Fraction;
    }
}
exports.FractionElement = FractionElement;
(function (FractionElement) {
    let FractionTypeEnum;
    (function (FractionTypeEnum) {
        FractionTypeEnum[FractionTypeEnum["Bar"] = 'Bar'] = "Bar";
        FractionTypeEnum[FractionTypeEnum["Skewed"] = 'Skewed'] = "Skewed";
        FractionTypeEnum[FractionTypeEnum["Linear"] = 'Linear'] = "Linear";
        FractionTypeEnum[FractionTypeEnum["NoBar"] = 'NoBar'] = "NoBar";
    })(FractionTypeEnum = FractionElement.FractionTypeEnum || (FractionElement.FractionTypeEnum = {}));
})(FractionElement = exports.FractionElement || (exports.FractionElement = {}));
/**
 * Specifies a function of an argument.
 */
class FunctionElement extends MathElement {
    constructor() {
        super();
        this.type = FunctionElement.TypeEnum.Function;
    }
}
exports.FunctionElement = FunctionElement;
/**
 * Represents GeometryPath of the shape
 */
class GeometryPath {
}
exports.GeometryPath = GeometryPath;
(function (GeometryPath) {
    let FillModeEnum;
    (function (FillModeEnum) {
        FillModeEnum[FillModeEnum["None"] = 'None'] = "None";
        FillModeEnum[FillModeEnum["Normal"] = 'Normal'] = "Normal";
        FillModeEnum[FillModeEnum["Lighten"] = 'Lighten'] = "Lighten";
        FillModeEnum[FillModeEnum["LightenLess"] = 'LightenLess'] = "LightenLess";
        FillModeEnum[FillModeEnum["Darken"] = 'Darken'] = "Darken";
        FillModeEnum[FillModeEnum["DarkenLess"] = 'DarkenLess'] = "DarkenLess";
    })(FillModeEnum = GeometryPath.FillModeEnum || (GeometryPath.FillModeEnum = {}));
})(GeometryPath = exports.GeometryPath || (exports.GeometryPath = {}));
/**
 * Represents container for GeometryPath objects
 */
class GeometryPaths {
}
exports.GeometryPaths = GeometryPaths;
/**
 * The class provides shared options for image formats.
 */
class ImageExportOptionsBase extends ExportOptions {
    constructor() {
        super();
    }
}
exports.ImageExportOptionsBase = ImageExportOptionsBase;
/**
 * Provides options that control how a presentation is saved in Gif format.
 */
class GifExportOptions extends ImageExportOptionsBase {
    constructor() {
        super();
        this.format = 'gif';
    }
}
exports.GifExportOptions = GifExportOptions;
/**
 * Represents glow effect
 */
class GlowEffect {
}
exports.GlowEffect = GlowEffect;
/**
 * Represents gradient fill format
 */
class GradientFill extends FillFormat {
    constructor() {
        super();
        this.type = GradientFill.TypeEnum.Gradient;
    }
}
exports.GradientFill = GradientFill;
(function (GradientFill) {
    let DirectionEnum;
    (function (DirectionEnum) {
        DirectionEnum[DirectionEnum["FromCorner1"] = 'FromCorner1'] = "FromCorner1";
        DirectionEnum[DirectionEnum["FromCorner2"] = 'FromCorner2'] = "FromCorner2";
        DirectionEnum[DirectionEnum["FromCorner3"] = 'FromCorner3'] = "FromCorner3";
        DirectionEnum[DirectionEnum["FromCorner4"] = 'FromCorner4'] = "FromCorner4";
        DirectionEnum[DirectionEnum["FromCenter"] = 'FromCenter'] = "FromCenter";
        DirectionEnum[DirectionEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(DirectionEnum = GradientFill.DirectionEnum || (GradientFill.DirectionEnum = {}));
    let ShapeEnum;
    (function (ShapeEnum) {
        ShapeEnum[ShapeEnum["Linear"] = 'Linear'] = "Linear";
        ShapeEnum[ShapeEnum["Rectangle"] = 'Rectangle'] = "Rectangle";
        ShapeEnum[ShapeEnum["Radial"] = 'Radial'] = "Radial";
        ShapeEnum[ShapeEnum["Path"] = 'Path'] = "Path";
        ShapeEnum[ShapeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(ShapeEnum = GradientFill.ShapeEnum || (GradientFill.ShapeEnum = {}));
    let TileFlipEnum;
    (function (TileFlipEnum) {
        TileFlipEnum[TileFlipEnum["NoFlip"] = 'NoFlip'] = "NoFlip";
        TileFlipEnum[TileFlipEnum["FlipX"] = 'FlipX'] = "FlipX";
        TileFlipEnum[TileFlipEnum["FlipY"] = 'FlipY'] = "FlipY";
        TileFlipEnum[TileFlipEnum["FlipBoth"] = 'FlipBoth'] = "FlipBoth";
        TileFlipEnum[TileFlipEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TileFlipEnum = GradientFill.TileFlipEnum || (GradientFill.TileFlipEnum = {}));
})(GradientFill = exports.GradientFill || (exports.GradientFill = {}));
/**
 * Gradient stop.
 */
class GradientFillStop {
}
exports.GradientFillStop = GradientFillStop;
/**
 * Represents AudioFrame resource.
 */
class GraphicalObject extends ShapeBase {
    constructor() {
        super();
        this.type = GraphicalObject.TypeEnum.GraphicalObject;
    }
}
exports.GraphicalObject = GraphicalObject;
/**
 * Represents an Gray Scale effect.
 */
class GrayScaleEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = GrayScaleEffect.TypeEnum.GrayScale;
    }
}
exports.GrayScaleEffect = GrayScaleEffect;
/**
 * Represents GroupShape resource.
 */
class GroupShape extends ShapeBase {
    constructor() {
        super();
        this.type = GroupShape.TypeEnum.GroupShape;
    }
}
exports.GroupShape = GroupShape;
/**
 * Specifies a grouping symbol above or below an expression, usually to highlight the relationship between elements
 */
class GroupingCharacterElement extends MathElement {
    constructor() {
        super();
        this.type = GroupingCharacterElement.TypeEnum.GroupingCharacter;
    }
}
exports.GroupingCharacterElement = GroupingCharacterElement;
(function (GroupingCharacterElement) {
    let PositionEnum;
    (function (PositionEnum) {
        PositionEnum[PositionEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        PositionEnum[PositionEnum["Top"] = 'Top'] = "Top";
        PositionEnum[PositionEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(PositionEnum = GroupingCharacterElement.PositionEnum || (GroupingCharacterElement.PositionEnum = {}));
    let VerticalJustificationEnum;
    (function (VerticalJustificationEnum) {
        VerticalJustificationEnum[VerticalJustificationEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        VerticalJustificationEnum[VerticalJustificationEnum["Top"] = 'Top'] = "Top";
        VerticalJustificationEnum[VerticalJustificationEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(VerticalJustificationEnum = GroupingCharacterElement.VerticalJustificationEnum || (GroupingCharacterElement.VerticalJustificationEnum = {}));
})(GroupingCharacterElement = exports.GroupingCharacterElement || (exports.GroupingCharacterElement = {}));
/**
 * Slides layouting options.
 */
class SlidesLayoutOptions {
}
exports.SlidesLayoutOptions = SlidesLayoutOptions;
(function (SlidesLayoutOptions) {
    let LayoutTypeEnum;
    (function (LayoutTypeEnum) {
        LayoutTypeEnum[LayoutTypeEnum["NotesComments"] = 'NotesComments'] = "NotesComments";
        LayoutTypeEnum[LayoutTypeEnum["Handout"] = 'Handout'] = "Handout";
    })(LayoutTypeEnum = SlidesLayoutOptions.LayoutTypeEnum || (SlidesLayoutOptions.LayoutTypeEnum = {}));
})(SlidesLayoutOptions = exports.SlidesLayoutOptions || (exports.SlidesLayoutOptions = {}));
/**
 * Handout layouting options
 */
class HandoutLayoutingOptions extends SlidesLayoutOptions {
    constructor() {
        super();
        this.layoutType = HandoutLayoutingOptions.LayoutTypeEnum.Handout;
    }
}
exports.HandoutLayoutingOptions = HandoutLayoutingOptions;
(function (HandoutLayoutingOptions) {
    let HandoutEnum;
    (function (HandoutEnum) {
        HandoutEnum[HandoutEnum["Handouts1"] = 'Handouts1'] = "Handouts1";
        HandoutEnum[HandoutEnum["Handouts2"] = 'Handouts2'] = "Handouts2";
        HandoutEnum[HandoutEnum["Handouts3"] = 'Handouts3'] = "Handouts3";
        HandoutEnum[HandoutEnum["Handouts4Horizontal"] = 'Handouts4Horizontal'] = "Handouts4Horizontal";
        HandoutEnum[HandoutEnum["Handouts4Vertical"] = 'Handouts4Vertical'] = "Handouts4Vertical";
        HandoutEnum[HandoutEnum["Handouts6Horizontal"] = 'Handouts6Horizontal'] = "Handouts6Horizontal";
        HandoutEnum[HandoutEnum["Handouts6Vertical"] = 'Handouts6Vertical'] = "Handouts6Vertical";
        HandoutEnum[HandoutEnum["Handouts9Horizontal"] = 'Handouts9Horizontal'] = "Handouts9Horizontal";
        HandoutEnum[HandoutEnum["Handouts9Vertical"] = 'Handouts9Vertical'] = "Handouts9Vertical";
    })(HandoutEnum = HandoutLayoutingOptions.HandoutEnum || (HandoutLayoutingOptions.HandoutEnum = {}));
})(HandoutLayoutingOptions = exports.HandoutLayoutingOptions || (exports.HandoutLayoutingOptions = {}));
/**
 * Represents header/footer info of slide
 */
class HeaderFooter extends ResourceBase {
    constructor() {
        super();
    }
}
exports.HeaderFooter = HeaderFooter;
/**
 * Represents a Hue/Saturation/Luminance effect.
 */
class HslEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = HslEffect.TypeEnum.Hsl;
    }
}
exports.HslEffect = HslEffect;
/**
 * Provides options that control how a presentation is saved in Html5 format.
 */
class Html5ExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'html5';
    }
}
exports.Html5ExportOptions = Html5ExportOptions;
/**
 * Provides options that control how a presentation is saved in Html format.
 */
class HtmlExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'html';
    }
}
exports.HtmlExportOptions = HtmlExportOptions;
(function (HtmlExportOptions) {
    let PicturesCompressionEnum;
    (function (PicturesCompressionEnum) {
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi330"] = 'Dpi330'] = "Dpi330";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi220"] = 'Dpi220'] = "Dpi220";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi150"] = 'Dpi150'] = "Dpi150";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi96"] = 'Dpi96'] = "Dpi96";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi72"] = 'Dpi72'] = "Dpi72";
        PicturesCompressionEnum[PicturesCompressionEnum["DocumentResolution"] = 'DocumentResolution'] = "DocumentResolution";
    })(PicturesCompressionEnum = HtmlExportOptions.PicturesCompressionEnum || (HtmlExportOptions.PicturesCompressionEnum = {}));
})(HtmlExportOptions = exports.HtmlExportOptions || (exports.HtmlExportOptions = {}));
/**
 * Hyperlink
 */
class Hyperlink {
}
exports.Hyperlink = Hyperlink;
(function (Hyperlink) {
    let ActionTypeEnum;
    (function (ActionTypeEnum) {
        ActionTypeEnum[ActionTypeEnum["NoAction"] = 'NoAction'] = "NoAction";
        ActionTypeEnum[ActionTypeEnum["Hyperlink"] = 'Hyperlink'] = "Hyperlink";
        ActionTypeEnum[ActionTypeEnum["JumpFirstSlide"] = 'JumpFirstSlide'] = "JumpFirstSlide";
        ActionTypeEnum[ActionTypeEnum["JumpPreviousSlide"] = 'JumpPreviousSlide'] = "JumpPreviousSlide";
        ActionTypeEnum[ActionTypeEnum["JumpNextSlide"] = 'JumpNextSlide'] = "JumpNextSlide";
        ActionTypeEnum[ActionTypeEnum["JumpLastSlide"] = 'JumpLastSlide'] = "JumpLastSlide";
        ActionTypeEnum[ActionTypeEnum["JumpEndShow"] = 'JumpEndShow'] = "JumpEndShow";
        ActionTypeEnum[ActionTypeEnum["JumpLastViewedSlide"] = 'JumpLastViewedSlide'] = "JumpLastViewedSlide";
        ActionTypeEnum[ActionTypeEnum["JumpSpecificSlide"] = 'JumpSpecificSlide'] = "JumpSpecificSlide";
        ActionTypeEnum[ActionTypeEnum["StartCustomSlideShow"] = 'StartCustomSlideShow'] = "StartCustomSlideShow";
        ActionTypeEnum[ActionTypeEnum["OpenFile"] = 'OpenFile'] = "OpenFile";
        ActionTypeEnum[ActionTypeEnum["OpenPresentation"] = 'OpenPresentation'] = "OpenPresentation";
        ActionTypeEnum[ActionTypeEnum["StartStopMedia"] = 'StartStopMedia'] = "StartStopMedia";
        ActionTypeEnum[ActionTypeEnum["StartMacro"] = 'StartMacro'] = "StartMacro";
        ActionTypeEnum[ActionTypeEnum["StartProgram"] = 'StartProgram'] = "StartProgram";
        ActionTypeEnum[ActionTypeEnum["Unknown"] = 'Unknown'] = "Unknown";
    })(ActionTypeEnum = Hyperlink.ActionTypeEnum || (Hyperlink.ActionTypeEnum = {}));
    let ColorSourceEnum;
    (function (ColorSourceEnum) {
        ColorSourceEnum[ColorSourceEnum["Styles"] = 'Styles'] = "Styles";
        ColorSourceEnum[ColorSourceEnum["PortionFormat"] = 'PortionFormat'] = "PortionFormat";
    })(ColorSourceEnum = Hyperlink.ColorSourceEnum || (Hyperlink.ColorSourceEnum = {}));
})(Hyperlink = exports.Hyperlink || (exports.Hyperlink = {}));
/**
 * Represents export options for whole presentation.
 */
class IShapeExportOptions {
}
exports.IShapeExportOptions = IShapeExportOptions;
/**
 * Represents image DTO.
 */
class Image extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Image = Image;
/**
 * Represents a format for image export.
 */
/**
* Represents a format for image export.
*/
var ImageExportFormat;
(function (ImageExportFormat) {
    ImageExportFormat[ImageExportFormat["Jpeg"] = 'Jpeg'] = "Jpeg";
    ImageExportFormat[ImageExportFormat["Png"] = 'Png'] = "Png";
    ImageExportFormat[ImageExportFormat["Gif"] = 'Gif'] = "Gif";
    ImageExportFormat[ImageExportFormat["Bmp"] = 'Bmp'] = "Bmp";
    ImageExportFormat[ImageExportFormat["Tiff"] = 'Tiff'] = "Tiff";
})(ImageExportFormat = exports.ImageExportFormat || (exports.ImageExportFormat = {}));
/**
 * Provides options that control how a presentation is saved in an image format.
 */
class ImageExportOptions extends ImageExportOptionsBase {
    constructor() {
        super();
        this.format = 'image';
    }
}
exports.ImageExportOptions = ImageExportOptions;
/**
 * List of images.
 */
class Images extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Images = Images;
/**
 * Represents inner shadow effect
 */
class InnerShadowEffect {
}
exports.InnerShadowEffect = InnerShadowEffect;
/**
 * Represents input document for pipeline.
 */
class Input {
}
exports.Input = Input;
/**
 * Represents comments collection of slide
 */
class InteractiveSequence {
}
exports.InteractiveSequence = InteractiveSequence;
/**
 * Layout slide.
 */
class LayoutSlide extends ResourceBase {
    constructor() {
        super();
    }
}
exports.LayoutSlide = LayoutSlide;
(function (LayoutSlide) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Title"] = 'Title'] = "Title";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["TwoColumnText"] = 'TwoColumnText'] = "TwoColumnText";
        TypeEnum[TypeEnum["Table"] = 'Table'] = "Table";
        TypeEnum[TypeEnum["TextAndChart"] = 'TextAndChart'] = "TextAndChart";
        TypeEnum[TypeEnum["ChartAndText"] = 'ChartAndText'] = "ChartAndText";
        TypeEnum[TypeEnum["Diagram"] = 'Diagram'] = "Diagram";
        TypeEnum[TypeEnum["Chart"] = 'Chart'] = "Chart";
        TypeEnum[TypeEnum["TextAndClipArt"] = 'TextAndClipArt'] = "TextAndClipArt";
        TypeEnum[TypeEnum["ClipArtAndText"] = 'ClipArtAndText'] = "ClipArtAndText";
        TypeEnum[TypeEnum["TitleOnly"] = 'TitleOnly'] = "TitleOnly";
        TypeEnum[TypeEnum["Blank"] = 'Blank'] = "Blank";
        TypeEnum[TypeEnum["TextAndObject"] = 'TextAndObject'] = "TextAndObject";
        TypeEnum[TypeEnum["ObjectAndText"] = 'ObjectAndText'] = "ObjectAndText";
        TypeEnum[TypeEnum["Object"] = 'Object'] = "Object";
        TypeEnum[TypeEnum["TitleAndObject"] = 'TitleAndObject'] = "TitleAndObject";
        TypeEnum[TypeEnum["TextAndMedia"] = 'TextAndMedia'] = "TextAndMedia";
        TypeEnum[TypeEnum["MediaAndText"] = 'MediaAndText'] = "MediaAndText";
        TypeEnum[TypeEnum["ObjectOverText"] = 'ObjectOverText'] = "ObjectOverText";
        TypeEnum[TypeEnum["TextOverObject"] = 'TextOverObject'] = "TextOverObject";
        TypeEnum[TypeEnum["TextAndTwoObjects"] = 'TextAndTwoObjects'] = "TextAndTwoObjects";
        TypeEnum[TypeEnum["TwoObjectsAndText"] = 'TwoObjectsAndText'] = "TwoObjectsAndText";
        TypeEnum[TypeEnum["TwoObjectsOverText"] = 'TwoObjectsOverText'] = "TwoObjectsOverText";
        TypeEnum[TypeEnum["FourObjects"] = 'FourObjects'] = "FourObjects";
        TypeEnum[TypeEnum["VerticalText"] = 'VerticalText'] = "VerticalText";
        TypeEnum[TypeEnum["ClipArtAndVerticalText"] = 'ClipArtAndVerticalText'] = "ClipArtAndVerticalText";
        TypeEnum[TypeEnum["VerticalTitleAndText"] = 'VerticalTitleAndText'] = "VerticalTitleAndText";
        TypeEnum[TypeEnum["VerticalTitleAndTextOverChart"] = 'VerticalTitleAndTextOverChart'] = "VerticalTitleAndTextOverChart";
        TypeEnum[TypeEnum["TwoObjects"] = 'TwoObjects'] = "TwoObjects";
        TypeEnum[TypeEnum["ObjectAndTwoObject"] = 'ObjectAndTwoObject'] = "ObjectAndTwoObject";
        TypeEnum[TypeEnum["TwoObjectsAndObject"] = 'TwoObjectsAndObject'] = "TwoObjectsAndObject";
        TypeEnum[TypeEnum["SectionHeader"] = 'SectionHeader'] = "SectionHeader";
        TypeEnum[TypeEnum["TwoTextAndTwoObjects"] = 'TwoTextAndTwoObjects'] = "TwoTextAndTwoObjects";
        TypeEnum[TypeEnum["TitleObjectAndCaption"] = 'TitleObjectAndCaption'] = "TitleObjectAndCaption";
        TypeEnum[TypeEnum["PictureAndCaption"] = 'PictureAndCaption'] = "PictureAndCaption";
        TypeEnum[TypeEnum["Custom"] = 'Custom'] = "Custom";
    })(TypeEnum = LayoutSlide.TypeEnum || (LayoutSlide.TypeEnum = {}));
})(LayoutSlide = exports.LayoutSlide || (exports.LayoutSlide = {}));
/**
 * Layout slide list.
 */
class LayoutSlides extends ResourceBase {
    constructor() {
        super();
    }
}
exports.LayoutSlides = LayoutSlides;
/**
 * Specifies the Sub-Superscript object
 */
class LeftSubSuperscriptElement extends MathElement {
    constructor() {
        super();
        this.type = LeftSubSuperscriptElement.TypeEnum.LeftSubSuperscriptElement;
    }
}
exports.LeftSubSuperscriptElement = LeftSubSuperscriptElement;
/**
 * Represents a chart legend
 */
class Legend {
}
exports.Legend = Legend;
(function (Legend) {
    let PositionEnum;
    (function (PositionEnum) {
        PositionEnum[PositionEnum["Bottom"] = 'Bottom'] = "Bottom";
        PositionEnum[PositionEnum["Left"] = 'Left'] = "Left";
        PositionEnum[PositionEnum["Right"] = 'Right'] = "Right";
        PositionEnum[PositionEnum["Top"] = 'Top'] = "Top";
        PositionEnum[PositionEnum["TopRight"] = 'TopRight'] = "TopRight";
    })(PositionEnum = Legend.PositionEnum || (Legend.PositionEnum = {}));
})(Legend = exports.Legend || (exports.Legend = {}));
/**
 * Light rig
 */
class LightRig {
}
exports.LightRig = LightRig;
(function (LightRig) {
    let DirectionEnum;
    (function (DirectionEnum) {
        DirectionEnum[DirectionEnum["TopLeft"] = 'TopLeft'] = "TopLeft";
        DirectionEnum[DirectionEnum["Top"] = 'Top'] = "Top";
        DirectionEnum[DirectionEnum["TopRight"] = 'TopRight'] = "TopRight";
        DirectionEnum[DirectionEnum["Right"] = 'Right'] = "Right";
        DirectionEnum[DirectionEnum["BottomRight"] = 'BottomRight'] = "BottomRight";
        DirectionEnum[DirectionEnum["Bottom"] = 'Bottom'] = "Bottom";
        DirectionEnum[DirectionEnum["BottomLeft"] = 'BottomLeft'] = "BottomLeft";
        DirectionEnum[DirectionEnum["Left"] = 'Left'] = "Left";
        DirectionEnum[DirectionEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(DirectionEnum = LightRig.DirectionEnum || (LightRig.DirectionEnum = {}));
    let LightTypeEnum;
    (function (LightTypeEnum) {
        LightTypeEnum[LightTypeEnum["Balanced"] = 'Balanced'] = "Balanced";
        LightTypeEnum[LightTypeEnum["BrightRoom"] = 'BrightRoom'] = "BrightRoom";
        LightTypeEnum[LightTypeEnum["Chilly"] = 'Chilly'] = "Chilly";
        LightTypeEnum[LightTypeEnum["Contrasting"] = 'Contrasting'] = "Contrasting";
        LightTypeEnum[LightTypeEnum["Flat"] = 'Flat'] = "Flat";
        LightTypeEnum[LightTypeEnum["Flood"] = 'Flood'] = "Flood";
        LightTypeEnum[LightTypeEnum["Freezing"] = 'Freezing'] = "Freezing";
        LightTypeEnum[LightTypeEnum["Glow"] = 'Glow'] = "Glow";
        LightTypeEnum[LightTypeEnum["Harsh"] = 'Harsh'] = "Harsh";
        LightTypeEnum[LightTypeEnum["LegacyFlat1"] = 'LegacyFlat1'] = "LegacyFlat1";
        LightTypeEnum[LightTypeEnum["LegacyFlat2"] = 'LegacyFlat2'] = "LegacyFlat2";
        LightTypeEnum[LightTypeEnum["LegacyFlat3"] = 'LegacyFlat3'] = "LegacyFlat3";
        LightTypeEnum[LightTypeEnum["LegacyFlat4"] = 'LegacyFlat4'] = "LegacyFlat4";
        LightTypeEnum[LightTypeEnum["LegacyHarsh1"] = 'LegacyHarsh1'] = "LegacyHarsh1";
        LightTypeEnum[LightTypeEnum["LegacyHarsh2"] = 'LegacyHarsh2'] = "LegacyHarsh2";
        LightTypeEnum[LightTypeEnum["LegacyHarsh3"] = 'LegacyHarsh3'] = "LegacyHarsh3";
        LightTypeEnum[LightTypeEnum["LegacyHarsh4"] = 'LegacyHarsh4'] = "LegacyHarsh4";
        LightTypeEnum[LightTypeEnum["LegacyNormal1"] = 'LegacyNormal1'] = "LegacyNormal1";
        LightTypeEnum[LightTypeEnum["LegacyNormal2"] = 'LegacyNormal2'] = "LegacyNormal2";
        LightTypeEnum[LightTypeEnum["LegacyNormal3"] = 'LegacyNormal3'] = "LegacyNormal3";
        LightTypeEnum[LightTypeEnum["LegacyNormal4"] = 'LegacyNormal4'] = "LegacyNormal4";
        LightTypeEnum[LightTypeEnum["Morning"] = 'Morning'] = "Morning";
        LightTypeEnum[LightTypeEnum["Soft"] = 'Soft'] = "Soft";
        LightTypeEnum[LightTypeEnum["Sunrise"] = 'Sunrise'] = "Sunrise";
        LightTypeEnum[LightTypeEnum["Sunset"] = 'Sunset'] = "Sunset";
        LightTypeEnum[LightTypeEnum["ThreePt"] = 'ThreePt'] = "ThreePt";
        LightTypeEnum[LightTypeEnum["TwoPt"] = 'TwoPt'] = "TwoPt";
        LightTypeEnum[LightTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(LightTypeEnum = LightRig.LightTypeEnum || (LightRig.LightTypeEnum = {}));
})(LightRig = exports.LightRig || (exports.LightRig = {}));
/**
 * Specifies the Limit object
 */
class LimitElement extends MathElement {
    constructor() {
        super();
        this.type = LimitElement.TypeEnum.Limit;
    }
}
exports.LimitElement = LimitElement;
/**
 * Line format.
 */
class LineFormat {
}
exports.LineFormat = LineFormat;
(function (LineFormat) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Inset"] = 'Inset'] = "Inset";
        AlignmentEnum[AlignmentEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(AlignmentEnum = LineFormat.AlignmentEnum || (LineFormat.AlignmentEnum = {}));
    let CapStyleEnum;
    (function (CapStyleEnum) {
        CapStyleEnum[CapStyleEnum["Round"] = 'Round'] = "Round";
        CapStyleEnum[CapStyleEnum["Square"] = 'Square'] = "Square";
        CapStyleEnum[CapStyleEnum["Flat"] = 'Flat'] = "Flat";
        CapStyleEnum[CapStyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(CapStyleEnum = LineFormat.CapStyleEnum || (LineFormat.CapStyleEnum = {}));
    let DashStyleEnum;
    (function (DashStyleEnum) {
        DashStyleEnum[DashStyleEnum["Solid"] = 'Solid'] = "Solid";
        DashStyleEnum[DashStyleEnum["Dot"] = 'Dot'] = "Dot";
        DashStyleEnum[DashStyleEnum["Dash"] = 'Dash'] = "Dash";
        DashStyleEnum[DashStyleEnum["LargeDash"] = 'LargeDash'] = "LargeDash";
        DashStyleEnum[DashStyleEnum["DashDot"] = 'DashDot'] = "DashDot";
        DashStyleEnum[DashStyleEnum["LargeDashDot"] = 'LargeDashDot'] = "LargeDashDot";
        DashStyleEnum[DashStyleEnum["LargeDashDotDot"] = 'LargeDashDotDot'] = "LargeDashDotDot";
        DashStyleEnum[DashStyleEnum["SystemDash"] = 'SystemDash'] = "SystemDash";
        DashStyleEnum[DashStyleEnum["SystemDot"] = 'SystemDot'] = "SystemDot";
        DashStyleEnum[DashStyleEnum["SystemDashDot"] = 'SystemDashDot'] = "SystemDashDot";
        DashStyleEnum[DashStyleEnum["SystemDashDotDot"] = 'SystemDashDotDot'] = "SystemDashDotDot";
        DashStyleEnum[DashStyleEnum["Custom"] = 'Custom'] = "Custom";
        DashStyleEnum[DashStyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(DashStyleEnum = LineFormat.DashStyleEnum || (LineFormat.DashStyleEnum = {}));
    let JoinStyleEnum;
    (function (JoinStyleEnum) {
        JoinStyleEnum[JoinStyleEnum["Round"] = 'Round'] = "Round";
        JoinStyleEnum[JoinStyleEnum["Bevel"] = 'Bevel'] = "Bevel";
        JoinStyleEnum[JoinStyleEnum["Miter"] = 'Miter'] = "Miter";
        JoinStyleEnum[JoinStyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(JoinStyleEnum = LineFormat.JoinStyleEnum || (LineFormat.JoinStyleEnum = {}));
    let StyleEnum;
    (function (StyleEnum) {
        StyleEnum[StyleEnum["Single"] = 'Single'] = "Single";
        StyleEnum[StyleEnum["ThinThin"] = 'ThinThin'] = "ThinThin";
        StyleEnum[StyleEnum["ThinThick"] = 'ThinThick'] = "ThinThick";
        StyleEnum[StyleEnum["ThickThin"] = 'ThickThin'] = "ThickThin";
        StyleEnum[StyleEnum["ThickBetweenThin"] = 'ThickBetweenThin'] = "ThickBetweenThin";
        StyleEnum[StyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(StyleEnum = LineFormat.StyleEnum || (LineFormat.StyleEnum = {}));
    let SketchTypeEnum;
    (function (SketchTypeEnum) {
        SketchTypeEnum[SketchTypeEnum["None"] = 'None'] = "None";
        SketchTypeEnum[SketchTypeEnum["Curved"] = 'Curved'] = "Curved";
        SketchTypeEnum[SketchTypeEnum["Freehand"] = 'Freehand'] = "Freehand";
        SketchTypeEnum[SketchTypeEnum["Scribble"] = 'Scribble'] = "Scribble";
        SketchTypeEnum[SketchTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(SketchTypeEnum = LineFormat.SketchTypeEnum || (LineFormat.SketchTypeEnum = {}));
})(LineFormat = exports.LineFormat || (exports.LineFormat = {}));
/**
 * Line segment of the geometry path
 */
class LineToPathSegment extends PathSegment {
    constructor() {
        super();
        this.type = LineToPathSegment.TypeEnum.LineTo;
    }
}
exports.LineToPathSegment = LineToPathSegment;
/**
 * Represents string or double literals data source.
 */
class Literals extends DataSource {
    constructor() {
        super();
        this.type = Literals.TypeEnum.Literals;
    }
}
exports.Literals = Literals;
/**
 * Represents a Luminance effect.
 */
class LuminanceEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = LuminanceEffect.TypeEnum.Luminance;
    }
}
exports.LuminanceEffect = LuminanceEffect;
/**
 * Provides options that control how a presentation is saved in Html5 format.
 */
class MarkdownExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'md';
    }
}
exports.MarkdownExportOptions = MarkdownExportOptions;
(function (MarkdownExportOptions) {
    let ExportTypeEnum;
    (function (ExportTypeEnum) {
        ExportTypeEnum[ExportTypeEnum["Sequential"] = 'Sequential'] = "Sequential";
        ExportTypeEnum[ExportTypeEnum["TextOnly"] = 'TextOnly'] = "TextOnly";
        ExportTypeEnum[ExportTypeEnum["Visual"] = 'Visual'] = "Visual";
    })(ExportTypeEnum = MarkdownExportOptions.ExportTypeEnum || (MarkdownExportOptions.ExportTypeEnum = {}));
    let FlavorEnum;
    (function (FlavorEnum) {
        FlavorEnum[FlavorEnum["Github"] = 'Github'] = "Github";
        FlavorEnum[FlavorEnum["Gruber"] = 'Gruber'] = "Gruber";
        FlavorEnum[FlavorEnum["MultiMarkdown"] = 'MultiMarkdown'] = "MultiMarkdown";
        FlavorEnum[FlavorEnum["CommonMark"] = 'CommonMark'] = "CommonMark";
        FlavorEnum[FlavorEnum["MarkdownExtra"] = 'MarkdownExtra'] = "MarkdownExtra";
        FlavorEnum[FlavorEnum["Pandoc"] = 'Pandoc'] = "Pandoc";
        FlavorEnum[FlavorEnum["Kramdown"] = 'Kramdown'] = "Kramdown";
        FlavorEnum[FlavorEnum["Markua"] = 'Markua'] = "Markua";
        FlavorEnum[FlavorEnum["Maruku"] = 'Maruku'] = "Maruku";
        FlavorEnum[FlavorEnum["Markdown2"] = 'Markdown2'] = "Markdown2";
        FlavorEnum[FlavorEnum["Remarkable"] = 'Remarkable'] = "Remarkable";
        FlavorEnum[FlavorEnum["Showdown"] = 'Showdown'] = "Showdown";
        FlavorEnum[FlavorEnum["Ghost"] = 'Ghost'] = "Ghost";
        FlavorEnum[FlavorEnum["GitLab"] = 'GitLab'] = "GitLab";
        FlavorEnum[FlavorEnum["Haroopad"] = 'Haroopad'] = "Haroopad";
        FlavorEnum[FlavorEnum["IaWriter"] = 'IaWriter'] = "IaWriter";
        FlavorEnum[FlavorEnum["Redcarpet"] = 'Redcarpet'] = "Redcarpet";
        FlavorEnum[FlavorEnum["ScholarlyMarkdown"] = 'ScholarlyMarkdown'] = "ScholarlyMarkdown";
        FlavorEnum[FlavorEnum["Taiga"] = 'Taiga'] = "Taiga";
        FlavorEnum[FlavorEnum["Trello"] = 'Trello'] = "Trello";
        FlavorEnum[FlavorEnum["S9ETextFormatter"] = 'S9ETextFormatter'] = "S9ETextFormatter";
        FlavorEnum[FlavorEnum["XWiki"] = 'XWiki'] = "XWiki";
        FlavorEnum[FlavorEnum["StackOverflow"] = 'StackOverflow'] = "StackOverflow";
        FlavorEnum[FlavorEnum["Default"] = 'Default'] = "Default";
    })(FlavorEnum = MarkdownExportOptions.FlavorEnum || (MarkdownExportOptions.FlavorEnum = {}));
    let NewLineTypeEnum;
    (function (NewLineTypeEnum) {
        NewLineTypeEnum[NewLineTypeEnum["Windows"] = 'Windows'] = "Windows";
        NewLineTypeEnum[NewLineTypeEnum["Unix"] = 'Unix'] = "Unix";
        NewLineTypeEnum[NewLineTypeEnum["Mac"] = 'Mac'] = "Mac";
    })(NewLineTypeEnum = MarkdownExportOptions.NewLineTypeEnum || (MarkdownExportOptions.NewLineTypeEnum = {}));
})(MarkdownExportOptions = exports.MarkdownExportOptions || (exports.MarkdownExportOptions = {}));
/**
 * Master slide.
 */
class MasterSlide extends ResourceBase {
    constructor() {
        super();
    }
}
exports.MasterSlide = MasterSlide;
/**
 * Master slide list.
 */
class MasterSlides extends ResourceBase {
    constructor() {
        super();
    }
}
exports.MasterSlides = MasterSlides;
/**
 * Mathematical paragraph that is a container for mathematical blocks
 */
/**
* Mathematical paragraph that is a container for mathematical blocks
*/
var MathFormat;
(function (MathFormat) {
    MathFormat[MathFormat["MathML"] = 'MathML'] = "MathML";
    MathFormat[MathFormat["LaTeX"] = 'LaTeX'] = "LaTeX";
})(MathFormat = exports.MathFormat || (exports.MathFormat = {}));
/**
 * Mathematical paragraph that is a container for mathematical blocks
 */
class MathParagraph {
}
exports.MathParagraph = MathParagraph;
(function (MathParagraph) {
    let JustificationEnum;
    (function (JustificationEnum) {
        JustificationEnum[JustificationEnum["LeftJustified"] = 'LeftJustified'] = "LeftJustified";
        JustificationEnum[JustificationEnum["RightJustified"] = 'RightJustified'] = "RightJustified";
        JustificationEnum[JustificationEnum["Centered"] = 'Centered'] = "Centered";
        JustificationEnum[JustificationEnum["CenteredAsGroup"] = 'CenteredAsGroup'] = "CenteredAsGroup";
    })(JustificationEnum = MathParagraph.JustificationEnum || (MathParagraph.JustificationEnum = {}));
})(MathParagraph = exports.MathParagraph || (exports.MathParagraph = {}));
/**
 * Specifies the Matrix object,
 */
class MatrixElement extends MathElement {
    constructor() {
        super();
        this.type = MatrixElement.TypeEnum.Matrix;
    }
}
exports.MatrixElement = MatrixElement;
(function (MatrixElement) {
    let BaseJustificationEnum;
    (function (BaseJustificationEnum) {
        BaseJustificationEnum[BaseJustificationEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        BaseJustificationEnum[BaseJustificationEnum["Top"] = 'Top'] = "Top";
        BaseJustificationEnum[BaseJustificationEnum["Center"] = 'Center'] = "Center";
        BaseJustificationEnum[BaseJustificationEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(BaseJustificationEnum = MatrixElement.BaseJustificationEnum || (MatrixElement.BaseJustificationEnum = {}));
    let ColumnGapRuleEnum;
    (function (ColumnGapRuleEnum) {
        ColumnGapRuleEnum[ColumnGapRuleEnum["SingleSpacingGap"] = 'SingleSpacingGap'] = "SingleSpacingGap";
        ColumnGapRuleEnum[ColumnGapRuleEnum["OneAndHalfSpacingGap"] = 'OneAndHalfSpacingGap'] = "OneAndHalfSpacingGap";
        ColumnGapRuleEnum[ColumnGapRuleEnum["DoubleSpacingGap"] = 'DoubleSpacingGap'] = "DoubleSpacingGap";
        ColumnGapRuleEnum[ColumnGapRuleEnum["Exactly"] = 'Exactly'] = "Exactly";
        ColumnGapRuleEnum[ColumnGapRuleEnum["Multiple"] = 'Multiple'] = "Multiple";
    })(ColumnGapRuleEnum = MatrixElement.ColumnGapRuleEnum || (MatrixElement.ColumnGapRuleEnum = {}));
    let RowGapRuleEnum;
    (function (RowGapRuleEnum) {
        RowGapRuleEnum[RowGapRuleEnum["SingleSpacingGap"] = 'SingleSpacingGap'] = "SingleSpacingGap";
        RowGapRuleEnum[RowGapRuleEnum["OneAndHalfSpacingGap"] = 'OneAndHalfSpacingGap'] = "OneAndHalfSpacingGap";
        RowGapRuleEnum[RowGapRuleEnum["DoubleSpacingGap"] = 'DoubleSpacingGap'] = "DoubleSpacingGap";
        RowGapRuleEnum[RowGapRuleEnum["Exactly"] = 'Exactly'] = "Exactly";
        RowGapRuleEnum[RowGapRuleEnum["Multiple"] = 'Multiple'] = "Multiple";
    })(RowGapRuleEnum = MatrixElement.RowGapRuleEnum || (MatrixElement.RowGapRuleEnum = {}));
})(MatrixElement = exports.MatrixElement || (exports.MatrixElement = {}));
/**
 * Merge presentations task.
 */
class Merge extends Task {
    constructor() {
        super();
        this.type = Merge.TypeEnum.Merge;
    }
}
exports.Merge = Merge;
/**
 * Merging source.
 */
class MergingSource {
}
exports.MergingSource = MergingSource;
/**
 * Error
 */
class ModelError {
}
exports.ModelError = ModelError;
/**
 * MoveTo segment of the geometry path
 */
class MoveToPathSegment extends PathSegment {
    constructor() {
        super();
        this.type = MoveToPathSegment.TypeEnum.MoveTo;
    }
}
exports.MoveToPathSegment = MoveToPathSegment;
/**
 * Specifies an N-ary mathematical object, such as Summation and Integral.
 */
class NaryOperatorElement extends MathElement {
    constructor() {
        super();
        this.type = NaryOperatorElement.TypeEnum.NaryOperator;
    }
}
exports.NaryOperatorElement = NaryOperatorElement;
(function (NaryOperatorElement) {
    let LimitLocationEnum;
    (function (LimitLocationEnum) {
        LimitLocationEnum[LimitLocationEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        LimitLocationEnum[LimitLocationEnum["UnderOver"] = 'UnderOver'] = "UnderOver";
        LimitLocationEnum[LimitLocationEnum["SubscriptSuperscript"] = 'SubscriptSuperscript'] = "SubscriptSuperscript";
    })(LimitLocationEnum = NaryOperatorElement.LimitLocationEnum || (NaryOperatorElement.LimitLocationEnum = {}));
})(NaryOperatorElement = exports.NaryOperatorElement || (exports.NaryOperatorElement = {}));
/**
 * Represents empty fill
 */
class NoFill extends FillFormat {
    constructor() {
        super();
        this.type = NoFill.TypeEnum.NoFill;
    }
}
exports.NoFill = NoFill;
/**
 * The sizing of the slide region.
 */
class NormalViewRestoredProperties {
}
exports.NormalViewRestoredProperties = NormalViewRestoredProperties;
/**
 * Notes &amp; comments layouting options.
 */
class NotesCommentsLayoutingOptions extends SlidesLayoutOptions {
    constructor() {
        super();
        this.layoutType = NotesCommentsLayoutingOptions.LayoutTypeEnum.NotesComments;
    }
}
exports.NotesCommentsLayoutingOptions = NotesCommentsLayoutingOptions;
(function (NotesCommentsLayoutingOptions) {
    let NotesPositionEnum;
    (function (NotesPositionEnum) {
        NotesPositionEnum[NotesPositionEnum["None"] = 'None'] = "None";
        NotesPositionEnum[NotesPositionEnum["BottomFull"] = 'BottomFull'] = "BottomFull";
        NotesPositionEnum[NotesPositionEnum["BottomTruncated"] = 'BottomTruncated'] = "BottomTruncated";
    })(NotesPositionEnum = NotesCommentsLayoutingOptions.NotesPositionEnum || (NotesCommentsLayoutingOptions.NotesPositionEnum = {}));
    let CommentsPositionEnum;
    (function (CommentsPositionEnum) {
        CommentsPositionEnum[CommentsPositionEnum["None"] = 'None'] = "None";
        CommentsPositionEnum[CommentsPositionEnum["Bottom"] = 'Bottom'] = "Bottom";
        CommentsPositionEnum[CommentsPositionEnum["Right"] = 'Right'] = "Right";
    })(CommentsPositionEnum = NotesCommentsLayoutingOptions.CommentsPositionEnum || (NotesCommentsLayoutingOptions.CommentsPositionEnum = {}));
})(NotesCommentsLayoutingOptions = exports.NotesCommentsLayoutingOptions || (exports.NotesCommentsLayoutingOptions = {}));
/**
 * Represents notes slide DTO.
 */
class NotesSlide extends ResourceBase {
    constructor() {
        super();
    }
}
exports.NotesSlide = NotesSlide;
/**
 * Represents a format for notes slide export.
 */
/**
* Represents a format for notes slide export.
*/
var NotesSlideExportFormat;
(function (NotesSlideExportFormat) {
    NotesSlideExportFormat[NotesSlideExportFormat["Jpeg"] = 'Jpeg'] = "Jpeg";
    NotesSlideExportFormat[NotesSlideExportFormat["Png"] = 'Png'] = "Png";
    NotesSlideExportFormat[NotesSlideExportFormat["Gif"] = 'Gif'] = "Gif";
    NotesSlideExportFormat[NotesSlideExportFormat["Bmp"] = 'Bmp'] = "Bmp";
    NotesSlideExportFormat[NotesSlideExportFormat["Tiff"] = 'Tiff'] = "Tiff";
    NotesSlideExportFormat[NotesSlideExportFormat["Html"] = 'Html'] = "Html";
    NotesSlideExportFormat[NotesSlideExportFormat["Pdf"] = 'Pdf'] = "Pdf";
    NotesSlideExportFormat[NotesSlideExportFormat["Xps"] = 'Xps'] = "Xps";
    NotesSlideExportFormat[NotesSlideExportFormat["Pptx"] = 'Pptx'] = "Pptx";
    NotesSlideExportFormat[NotesSlideExportFormat["Odp"] = 'Odp'] = "Odp";
    NotesSlideExportFormat[NotesSlideExportFormat["Otp"] = 'Otp'] = "Otp";
    NotesSlideExportFormat[NotesSlideExportFormat["Ppt"] = 'Ppt'] = "Ppt";
    NotesSlideExportFormat[NotesSlideExportFormat["Pps"] = 'Pps'] = "Pps";
    NotesSlideExportFormat[NotesSlideExportFormat["Ppsx"] = 'Ppsx'] = "Ppsx";
    NotesSlideExportFormat[NotesSlideExportFormat["Pptm"] = 'Pptm'] = "Pptm";
    NotesSlideExportFormat[NotesSlideExportFormat["Ppsm"] = 'Ppsm'] = "Ppsm";
    NotesSlideExportFormat[NotesSlideExportFormat["Potx"] = 'Potx'] = "Potx";
    NotesSlideExportFormat[NotesSlideExportFormat["Pot"] = 'Pot'] = "Pot";
    NotesSlideExportFormat[NotesSlideExportFormat["Potm"] = 'Potm'] = "Potm";
    NotesSlideExportFormat[NotesSlideExportFormat["Svg"] = 'Svg'] = "Svg";
    NotesSlideExportFormat[NotesSlideExportFormat["Fodp"] = 'Fodp'] = "Fodp";
    NotesSlideExportFormat[NotesSlideExportFormat["Xaml"] = 'Xaml'] = "Xaml";
    NotesSlideExportFormat[NotesSlideExportFormat["Html5"] = 'Html5'] = "Html5";
})(NotesSlideExportFormat = exports.NotesSlideExportFormat || (exports.NotesSlideExportFormat = {}));
/**
 * Represents header/footer info of notes slide
 */
class NotesSlideHeaderFooter extends ResourceBase {
    constructor() {
        super();
    }
}
exports.NotesSlideHeaderFooter = NotesSlideHeaderFooter;
/**
 * Object exists
 */
class ObjectExist {
}
exports.ObjectExist = ObjectExist;
/**
 * Represents OleObjectFrame resource.
 */
class OleObjectFrame extends ShapeBase {
    constructor() {
        super();
        this.type = OleObjectFrame.TypeEnum.OleObjectFrame;
    }
}
exports.OleObjectFrame = OleObjectFrame;
/**
 * One value chart data point.
 */
class OneValueChartDataPoint extends DataPoint {
    constructor() {
        super();
        this.type = OneValueChartDataPoint.TypeEnum.OneValue;
    }
}
exports.OneValueChartDataPoint = OneValueChartDataPoint;
/**
 * One value series.
 */
class OneValueSeries extends Series {
    constructor() {
        super();
        this.dataPointType = OneValueSeries.DataPointTypeEnum.OneValue;
    }
}
exports.OneValueSeries = OneValueSeries;
(function (OneValueSeries) {
    let QuartileMethodEnum;
    (function (QuartileMethodEnum) {
        QuartileMethodEnum[QuartileMethodEnum["Exclusive"] = 'Exclusive'] = "Exclusive";
        QuartileMethodEnum[QuartileMethodEnum["Inclusive"] = 'Inclusive'] = "Inclusive";
    })(QuartileMethodEnum = OneValueSeries.QuartileMethodEnum || (OneValueSeries.QuartileMethodEnum = {}));
})(OneValueSeries = exports.OneValueSeries || (exports.OneValueSeries = {}));
class Operation {
}
exports.Operation = Operation;
(function (Operation) {
    let MethodEnum;
    (function (MethodEnum) {
        MethodEnum[MethodEnum["Convert"] = 'Convert'] = "Convert";
        MethodEnum[MethodEnum["DownloadPresentation"] = 'DownloadPresentation'] = "DownloadPresentation";
        MethodEnum[MethodEnum["ConvertAndSave"] = 'ConvertAndSave'] = "ConvertAndSave";
        MethodEnum[MethodEnum["SavePresentation"] = 'SavePresentation'] = "SavePresentation";
        MethodEnum[MethodEnum["Merge"] = 'Merge'] = "Merge";
        MethodEnum[MethodEnum["MergeAndSave"] = 'MergeAndSave'] = "MergeAndSave";
        MethodEnum[MethodEnum["Split"] = 'Split'] = "Split";
        MethodEnum[MethodEnum["UploadAndSplit"] = 'UploadAndSplit'] = "UploadAndSplit";
    })(MethodEnum = Operation.MethodEnum || (Operation.MethodEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Created"] = 'Created'] = "Created";
        StatusEnum[StatusEnum["Enqueued"] = 'Enqueued'] = "Enqueued";
        StatusEnum[StatusEnum["Started"] = 'Started'] = "Started";
        StatusEnum[StatusEnum["Failed"] = 'Failed'] = "Failed";
        StatusEnum[StatusEnum["Canceled"] = 'Canceled'] = "Canceled";
        StatusEnum[StatusEnum["Finished"] = 'Finished'] = "Finished";
    })(StatusEnum = Operation.StatusEnum || (Operation.StatusEnum = {}));
})(Operation = exports.Operation || (exports.Operation = {}));
class OperationError {
}
exports.OperationError = OperationError;
/**
 * Operation progress.
 */
class OperationProgress {
}
exports.OperationProgress = OperationProgress;
/**
 * Request for presentations merge with optional order of slides
 */
class OrderedMergeRequest {
}
exports.OrderedMergeRequest = OrderedMergeRequest;
/**
 * Represents outer shadow effect
 */
class OuterShadowEffect {
}
exports.OuterShadowEffect = OuterShadowEffect;
/**
 * Represents output file destination in pipeline.
 */
class OutputFile {
}
exports.OutputFile = OutputFile;
(function (OutputFile) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Path"] = 'Path'] = "Path";
        TypeEnum[TypeEnum["Response"] = 'Response'] = "Response";
    })(TypeEnum = OutputFile.TypeEnum || (OutputFile.TypeEnum = {}));
})(OutputFile = exports.OutputFile || (exports.OutputFile = {}));
/**
 * Represents paragraph resource
 */
class Paragraph extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Paragraph = Paragraph;
(function (Paragraph) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Left"] = 'Left'] = "Left";
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Right"] = 'Right'] = "Right";
        AlignmentEnum[AlignmentEnum["Justify"] = 'Justify'] = "Justify";
        AlignmentEnum[AlignmentEnum["JustifyLow"] = 'JustifyLow'] = "JustifyLow";
        AlignmentEnum[AlignmentEnum["Distributed"] = 'Distributed'] = "Distributed";
        AlignmentEnum[AlignmentEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(AlignmentEnum = Paragraph.AlignmentEnum || (Paragraph.AlignmentEnum = {}));
    let FontAlignmentEnum;
    (function (FontAlignmentEnum) {
        FontAlignmentEnum[FontAlignmentEnum["Automatic"] = 'Automatic'] = "Automatic";
        FontAlignmentEnum[FontAlignmentEnum["Top"] = 'Top'] = "Top";
        FontAlignmentEnum[FontAlignmentEnum["Center"] = 'Center'] = "Center";
        FontAlignmentEnum[FontAlignmentEnum["Bottom"] = 'Bottom'] = "Bottom";
        FontAlignmentEnum[FontAlignmentEnum["Baseline"] = 'Baseline'] = "Baseline";
        FontAlignmentEnum[FontAlignmentEnum["Default"] = 'Default'] = "Default";
    })(FontAlignmentEnum = Paragraph.FontAlignmentEnum || (Paragraph.FontAlignmentEnum = {}));
    let HangingPunctuationEnum;
    (function (HangingPunctuationEnum) {
        HangingPunctuationEnum[HangingPunctuationEnum["False"] = 'False'] = "False";
        HangingPunctuationEnum[HangingPunctuationEnum["True"] = 'True'] = "True";
        HangingPunctuationEnum[HangingPunctuationEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(HangingPunctuationEnum = Paragraph.HangingPunctuationEnum || (Paragraph.HangingPunctuationEnum = {}));
    let EastAsianLineBreakEnum;
    (function (EastAsianLineBreakEnum) {
        EastAsianLineBreakEnum[EastAsianLineBreakEnum["False"] = 'False'] = "False";
        EastAsianLineBreakEnum[EastAsianLineBreakEnum["True"] = 'True'] = "True";
        EastAsianLineBreakEnum[EastAsianLineBreakEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(EastAsianLineBreakEnum = Paragraph.EastAsianLineBreakEnum || (Paragraph.EastAsianLineBreakEnum = {}));
    let LatinLineBreakEnum;
    (function (LatinLineBreakEnum) {
        LatinLineBreakEnum[LatinLineBreakEnum["False"] = 'False'] = "False";
        LatinLineBreakEnum[LatinLineBreakEnum["True"] = 'True'] = "True";
        LatinLineBreakEnum[LatinLineBreakEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(LatinLineBreakEnum = Paragraph.LatinLineBreakEnum || (Paragraph.LatinLineBreakEnum = {}));
    let RightToLeftEnum;
    (function (RightToLeftEnum) {
        RightToLeftEnum[RightToLeftEnum["False"] = 'False'] = "False";
        RightToLeftEnum[RightToLeftEnum["True"] = 'True'] = "True";
        RightToLeftEnum[RightToLeftEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(RightToLeftEnum = Paragraph.RightToLeftEnum || (Paragraph.RightToLeftEnum = {}));
    let BulletTypeEnum;
    (function (BulletTypeEnum) {
        BulletTypeEnum[BulletTypeEnum["None"] = 'None'] = "None";
        BulletTypeEnum[BulletTypeEnum["Symbol"] = 'Symbol'] = "Symbol";
        BulletTypeEnum[BulletTypeEnum["Numbered"] = 'Numbered'] = "Numbered";
        BulletTypeEnum[BulletTypeEnum["Picture"] = 'Picture'] = "Picture";
        BulletTypeEnum[BulletTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(BulletTypeEnum = Paragraph.BulletTypeEnum || (Paragraph.BulletTypeEnum = {}));
    let NumberedBulletStyleEnum;
    (function (NumberedBulletStyleEnum) {
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaLCPeriod"] = 'BulletAlphaLCPeriod'] = "BulletAlphaLCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaUCPeriod"] = 'BulletAlphaUCPeriod'] = "BulletAlphaUCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicParenRight"] = 'BulletArabicParenRight'] = "BulletArabicParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicPeriod"] = 'BulletArabicPeriod'] = "BulletArabicPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanLCParenBoth"] = 'BulletRomanLCParenBoth'] = "BulletRomanLCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanLCParenRight"] = 'BulletRomanLCParenRight'] = "BulletRomanLCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanLCPeriod"] = 'BulletRomanLCPeriod'] = "BulletRomanLCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanUCPeriod"] = 'BulletRomanUCPeriod'] = "BulletRomanUCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaLCParenBoth"] = 'BulletAlphaLCParenBoth'] = "BulletAlphaLCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaLCParenRight"] = 'BulletAlphaLCParenRight'] = "BulletAlphaLCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaUCParenBoth"] = 'BulletAlphaUCParenBoth'] = "BulletAlphaUCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaUCParenRight"] = 'BulletAlphaUCParenRight'] = "BulletAlphaUCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicParenBoth"] = 'BulletArabicParenBoth'] = "BulletArabicParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicPlain"] = 'BulletArabicPlain'] = "BulletArabicPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanUCParenBoth"] = 'BulletRomanUCParenBoth'] = "BulletRomanUCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanUCParenRight"] = 'BulletRomanUCParenRight'] = "BulletRomanUCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletSimpChinPlain"] = 'BulletSimpChinPlain'] = "BulletSimpChinPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletSimpChinPeriod"] = 'BulletSimpChinPeriod'] = "BulletSimpChinPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletCircleNumDBPlain"] = 'BulletCircleNumDBPlain'] = "BulletCircleNumDBPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletCircleNumWDWhitePlain"] = 'BulletCircleNumWDWhitePlain'] = "BulletCircleNumWDWhitePlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletCircleNumWDBlackPlain"] = 'BulletCircleNumWDBlackPlain'] = "BulletCircleNumWDBlackPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletTradChinPlain"] = 'BulletTradChinPlain'] = "BulletTradChinPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletTradChinPeriod"] = 'BulletTradChinPeriod'] = "BulletTradChinPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicAlphaDash"] = 'BulletArabicAlphaDash'] = "BulletArabicAlphaDash";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicAbjadDash"] = 'BulletArabicAbjadDash'] = "BulletArabicAbjadDash";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHebrewAlphaDash"] = 'BulletHebrewAlphaDash'] = "BulletHebrewAlphaDash";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletKanjiKoreanPlain"] = 'BulletKanjiKoreanPlain'] = "BulletKanjiKoreanPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletKanjiKoreanPeriod"] = 'BulletKanjiKoreanPeriod'] = "BulletKanjiKoreanPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicDBPlain"] = 'BulletArabicDBPlain'] = "BulletArabicDBPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicDBPeriod"] = 'BulletArabicDBPeriod'] = "BulletArabicDBPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiAlphaPeriod"] = 'BulletThaiAlphaPeriod'] = "BulletThaiAlphaPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiAlphaParenRight"] = 'BulletThaiAlphaParenRight'] = "BulletThaiAlphaParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiAlphaParenBoth"] = 'BulletThaiAlphaParenBoth'] = "BulletThaiAlphaParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiNumPeriod"] = 'BulletThaiNumPeriod'] = "BulletThaiNumPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiNumParenRight"] = 'BulletThaiNumParenRight'] = "BulletThaiNumParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiNumParenBoth"] = 'BulletThaiNumParenBoth'] = "BulletThaiNumParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiAlphaPeriod"] = 'BulletHindiAlphaPeriod'] = "BulletHindiAlphaPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiNumPeriod"] = 'BulletHindiNumPeriod'] = "BulletHindiNumPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletKanjiSimpChinDBPeriod"] = 'BulletKanjiSimpChinDBPeriod'] = "BulletKanjiSimpChinDBPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiNumParenRight"] = 'BulletHindiNumParenRight'] = "BulletHindiNumParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiAlpha1Period"] = 'BulletHindiAlpha1Period'] = "BulletHindiAlpha1Period";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(NumberedBulletStyleEnum = Paragraph.NumberedBulletStyleEnum || (Paragraph.NumberedBulletStyleEnum = {}));
})(Paragraph = exports.Paragraph || (exports.Paragraph = {}));
/**
 * Paragraph formatting properties.
 */
class ParagraphFormat {
}
exports.ParagraphFormat = ParagraphFormat;
(function (ParagraphFormat) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Left"] = 'Left'] = "Left";
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Right"] = 'Right'] = "Right";
        AlignmentEnum[AlignmentEnum["Justify"] = 'Justify'] = "Justify";
        AlignmentEnum[AlignmentEnum["JustifyLow"] = 'JustifyLow'] = "JustifyLow";
        AlignmentEnum[AlignmentEnum["Distributed"] = 'Distributed'] = "Distributed";
        AlignmentEnum[AlignmentEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(AlignmentEnum = ParagraphFormat.AlignmentEnum || (ParagraphFormat.AlignmentEnum = {}));
    let FontAlignmentEnum;
    (function (FontAlignmentEnum) {
        FontAlignmentEnum[FontAlignmentEnum["Automatic"] = 'Automatic'] = "Automatic";
        FontAlignmentEnum[FontAlignmentEnum["Top"] = 'Top'] = "Top";
        FontAlignmentEnum[FontAlignmentEnum["Center"] = 'Center'] = "Center";
        FontAlignmentEnum[FontAlignmentEnum["Bottom"] = 'Bottom'] = "Bottom";
        FontAlignmentEnum[FontAlignmentEnum["Baseline"] = 'Baseline'] = "Baseline";
        FontAlignmentEnum[FontAlignmentEnum["Default"] = 'Default'] = "Default";
    })(FontAlignmentEnum = ParagraphFormat.FontAlignmentEnum || (ParagraphFormat.FontAlignmentEnum = {}));
    let RightToLeftEnum;
    (function (RightToLeftEnum) {
        RightToLeftEnum[RightToLeftEnum["False"] = 'False'] = "False";
        RightToLeftEnum[RightToLeftEnum["True"] = 'True'] = "True";
        RightToLeftEnum[RightToLeftEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(RightToLeftEnum = ParagraphFormat.RightToLeftEnum || (ParagraphFormat.RightToLeftEnum = {}));
    let EastAsianLineBreakEnum;
    (function (EastAsianLineBreakEnum) {
        EastAsianLineBreakEnum[EastAsianLineBreakEnum["False"] = 'False'] = "False";
        EastAsianLineBreakEnum[EastAsianLineBreakEnum["True"] = 'True'] = "True";
        EastAsianLineBreakEnum[EastAsianLineBreakEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(EastAsianLineBreakEnum = ParagraphFormat.EastAsianLineBreakEnum || (ParagraphFormat.EastAsianLineBreakEnum = {}));
    let LatinLineBreakEnum;
    (function (LatinLineBreakEnum) {
        LatinLineBreakEnum[LatinLineBreakEnum["False"] = 'False'] = "False";
        LatinLineBreakEnum[LatinLineBreakEnum["True"] = 'True'] = "True";
        LatinLineBreakEnum[LatinLineBreakEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(LatinLineBreakEnum = ParagraphFormat.LatinLineBreakEnum || (ParagraphFormat.LatinLineBreakEnum = {}));
    let HangingPunctuationEnum;
    (function (HangingPunctuationEnum) {
        HangingPunctuationEnum[HangingPunctuationEnum["False"] = 'False'] = "False";
        HangingPunctuationEnum[HangingPunctuationEnum["True"] = 'True'] = "True";
        HangingPunctuationEnum[HangingPunctuationEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(HangingPunctuationEnum = ParagraphFormat.HangingPunctuationEnum || (ParagraphFormat.HangingPunctuationEnum = {}));
    let BulletTypeEnum;
    (function (BulletTypeEnum) {
        BulletTypeEnum[BulletTypeEnum["None"] = 'None'] = "None";
        BulletTypeEnum[BulletTypeEnum["Symbol"] = 'Symbol'] = "Symbol";
        BulletTypeEnum[BulletTypeEnum["Numbered"] = 'Numbered'] = "Numbered";
        BulletTypeEnum[BulletTypeEnum["Picture"] = 'Picture'] = "Picture";
        BulletTypeEnum[BulletTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(BulletTypeEnum = ParagraphFormat.BulletTypeEnum || (ParagraphFormat.BulletTypeEnum = {}));
    let NumberedBulletStyleEnum;
    (function (NumberedBulletStyleEnum) {
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaLCPeriod"] = 'BulletAlphaLCPeriod'] = "BulletAlphaLCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaUCPeriod"] = 'BulletAlphaUCPeriod'] = "BulletAlphaUCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicParenRight"] = 'BulletArabicParenRight'] = "BulletArabicParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicPeriod"] = 'BulletArabicPeriod'] = "BulletArabicPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanLCParenBoth"] = 'BulletRomanLCParenBoth'] = "BulletRomanLCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanLCParenRight"] = 'BulletRomanLCParenRight'] = "BulletRomanLCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanLCPeriod"] = 'BulletRomanLCPeriod'] = "BulletRomanLCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanUCPeriod"] = 'BulletRomanUCPeriod'] = "BulletRomanUCPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaLCParenBoth"] = 'BulletAlphaLCParenBoth'] = "BulletAlphaLCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaLCParenRight"] = 'BulletAlphaLCParenRight'] = "BulletAlphaLCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaUCParenBoth"] = 'BulletAlphaUCParenBoth'] = "BulletAlphaUCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletAlphaUCParenRight"] = 'BulletAlphaUCParenRight'] = "BulletAlphaUCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicParenBoth"] = 'BulletArabicParenBoth'] = "BulletArabicParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicPlain"] = 'BulletArabicPlain'] = "BulletArabicPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanUCParenBoth"] = 'BulletRomanUCParenBoth'] = "BulletRomanUCParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletRomanUCParenRight"] = 'BulletRomanUCParenRight'] = "BulletRomanUCParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletSimpChinPlain"] = 'BulletSimpChinPlain'] = "BulletSimpChinPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletSimpChinPeriod"] = 'BulletSimpChinPeriod'] = "BulletSimpChinPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletCircleNumDBPlain"] = 'BulletCircleNumDBPlain'] = "BulletCircleNumDBPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletCircleNumWDWhitePlain"] = 'BulletCircleNumWDWhitePlain'] = "BulletCircleNumWDWhitePlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletCircleNumWDBlackPlain"] = 'BulletCircleNumWDBlackPlain'] = "BulletCircleNumWDBlackPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletTradChinPlain"] = 'BulletTradChinPlain'] = "BulletTradChinPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletTradChinPeriod"] = 'BulletTradChinPeriod'] = "BulletTradChinPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicAlphaDash"] = 'BulletArabicAlphaDash'] = "BulletArabicAlphaDash";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicAbjadDash"] = 'BulletArabicAbjadDash'] = "BulletArabicAbjadDash";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHebrewAlphaDash"] = 'BulletHebrewAlphaDash'] = "BulletHebrewAlphaDash";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletKanjiKoreanPlain"] = 'BulletKanjiKoreanPlain'] = "BulletKanjiKoreanPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletKanjiKoreanPeriod"] = 'BulletKanjiKoreanPeriod'] = "BulletKanjiKoreanPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicDBPlain"] = 'BulletArabicDBPlain'] = "BulletArabicDBPlain";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletArabicDBPeriod"] = 'BulletArabicDBPeriod'] = "BulletArabicDBPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiAlphaPeriod"] = 'BulletThaiAlphaPeriod'] = "BulletThaiAlphaPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiAlphaParenRight"] = 'BulletThaiAlphaParenRight'] = "BulletThaiAlphaParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiAlphaParenBoth"] = 'BulletThaiAlphaParenBoth'] = "BulletThaiAlphaParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiNumPeriod"] = 'BulletThaiNumPeriod'] = "BulletThaiNumPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiNumParenRight"] = 'BulletThaiNumParenRight'] = "BulletThaiNumParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletThaiNumParenBoth"] = 'BulletThaiNumParenBoth'] = "BulletThaiNumParenBoth";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiAlphaPeriod"] = 'BulletHindiAlphaPeriod'] = "BulletHindiAlphaPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiNumPeriod"] = 'BulletHindiNumPeriod'] = "BulletHindiNumPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletKanjiSimpChinDBPeriod"] = 'BulletKanjiSimpChinDBPeriod'] = "BulletKanjiSimpChinDBPeriod";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiNumParenRight"] = 'BulletHindiNumParenRight'] = "BulletHindiNumParenRight";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["BulletHindiAlpha1Period"] = 'BulletHindiAlpha1Period'] = "BulletHindiAlpha1Period";
        NumberedBulletStyleEnum[NumberedBulletStyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(NumberedBulletStyleEnum = ParagraphFormat.NumberedBulletStyleEnum || (ParagraphFormat.NumberedBulletStyleEnum = {}));
})(ParagraphFormat = exports.ParagraphFormat || (exports.ParagraphFormat = {}));
/**
 * Represents list of Links to Paragraphs resources
 */
class Paragraphs extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Paragraphs = Paragraphs;
/**
 * Represents input file from filesystem.
 */
class PathInputFile extends InputFile {
    constructor() {
        super();
        this.type = PathInputFile.TypeEnum.Path;
    }
}
exports.PathInputFile = PathInputFile;
/**
 * Represents fileSystem file with path.
 */
class PathOutputFile extends OutputFile {
    constructor() {
        super();
        this.type = PathOutputFile.TypeEnum.Path;
    }
}
exports.PathOutputFile = PathOutputFile;
/**
 * Represents Pattern Fill
 */
class PatternFill extends FillFormat {
    constructor() {
        super();
        this.type = PatternFill.TypeEnum.Pattern;
    }
}
exports.PatternFill = PatternFill;
(function (PatternFill) {
    let StyleEnum;
    (function (StyleEnum) {
        StyleEnum[StyleEnum["Unknown"] = 'Unknown'] = "Unknown";
        StyleEnum[StyleEnum["Percent05"] = 'Percent05'] = "Percent05";
        StyleEnum[StyleEnum["Percent10"] = 'Percent10'] = "Percent10";
        StyleEnum[StyleEnum["Percent20"] = 'Percent20'] = "Percent20";
        StyleEnum[StyleEnum["Percent25"] = 'Percent25'] = "Percent25";
        StyleEnum[StyleEnum["Percent30"] = 'Percent30'] = "Percent30";
        StyleEnum[StyleEnum["Percent40"] = 'Percent40'] = "Percent40";
        StyleEnum[StyleEnum["Percent50"] = 'Percent50'] = "Percent50";
        StyleEnum[StyleEnum["Percent60"] = 'Percent60'] = "Percent60";
        StyleEnum[StyleEnum["Percent70"] = 'Percent70'] = "Percent70";
        StyleEnum[StyleEnum["Percent75"] = 'Percent75'] = "Percent75";
        StyleEnum[StyleEnum["Percent80"] = 'Percent80'] = "Percent80";
        StyleEnum[StyleEnum["Percent90"] = 'Percent90'] = "Percent90";
        StyleEnum[StyleEnum["DarkHorizontal"] = 'DarkHorizontal'] = "DarkHorizontal";
        StyleEnum[StyleEnum["DarkVertical"] = 'DarkVertical'] = "DarkVertical";
        StyleEnum[StyleEnum["DarkDownwardDiagonal"] = 'DarkDownwardDiagonal'] = "DarkDownwardDiagonal";
        StyleEnum[StyleEnum["DarkUpwardDiagonal"] = 'DarkUpwardDiagonal'] = "DarkUpwardDiagonal";
        StyleEnum[StyleEnum["SmallCheckerBoard"] = 'SmallCheckerBoard'] = "SmallCheckerBoard";
        StyleEnum[StyleEnum["Trellis"] = 'Trellis'] = "Trellis";
        StyleEnum[StyleEnum["LightHorizontal"] = 'LightHorizontal'] = "LightHorizontal";
        StyleEnum[StyleEnum["LightVertical"] = 'LightVertical'] = "LightVertical";
        StyleEnum[StyleEnum["LightDownwardDiagonal"] = 'LightDownwardDiagonal'] = "LightDownwardDiagonal";
        StyleEnum[StyleEnum["LightUpwardDiagonal"] = 'LightUpwardDiagonal'] = "LightUpwardDiagonal";
        StyleEnum[StyleEnum["SmallGrid"] = 'SmallGrid'] = "SmallGrid";
        StyleEnum[StyleEnum["DottedDiamond"] = 'DottedDiamond'] = "DottedDiamond";
        StyleEnum[StyleEnum["WideDownwardDiagonal"] = 'WideDownwardDiagonal'] = "WideDownwardDiagonal";
        StyleEnum[StyleEnum["WideUpwardDiagonal"] = 'WideUpwardDiagonal'] = "WideUpwardDiagonal";
        StyleEnum[StyleEnum["DashedUpwardDiagonal"] = 'DashedUpwardDiagonal'] = "DashedUpwardDiagonal";
        StyleEnum[StyleEnum["DashedDownwardDiagonal"] = 'DashedDownwardDiagonal'] = "DashedDownwardDiagonal";
        StyleEnum[StyleEnum["NarrowVertical"] = 'NarrowVertical'] = "NarrowVertical";
        StyleEnum[StyleEnum["NarrowHorizontal"] = 'NarrowHorizontal'] = "NarrowHorizontal";
        StyleEnum[StyleEnum["DashedVertical"] = 'DashedVertical'] = "DashedVertical";
        StyleEnum[StyleEnum["DashedHorizontal"] = 'DashedHorizontal'] = "DashedHorizontal";
        StyleEnum[StyleEnum["LargeConfetti"] = 'LargeConfetti'] = "LargeConfetti";
        StyleEnum[StyleEnum["LargeGrid"] = 'LargeGrid'] = "LargeGrid";
        StyleEnum[StyleEnum["HorizontalBrick"] = 'HorizontalBrick'] = "HorizontalBrick";
        StyleEnum[StyleEnum["LargeCheckerBoard"] = 'LargeCheckerBoard'] = "LargeCheckerBoard";
        StyleEnum[StyleEnum["SmallConfetti"] = 'SmallConfetti'] = "SmallConfetti";
        StyleEnum[StyleEnum["Zigzag"] = 'Zigzag'] = "Zigzag";
        StyleEnum[StyleEnum["SolidDiamond"] = 'SolidDiamond'] = "SolidDiamond";
        StyleEnum[StyleEnum["DiagonalBrick"] = 'DiagonalBrick'] = "DiagonalBrick";
        StyleEnum[StyleEnum["OutlinedDiamond"] = 'OutlinedDiamond'] = "OutlinedDiamond";
        StyleEnum[StyleEnum["Plaid"] = 'Plaid'] = "Plaid";
        StyleEnum[StyleEnum["Sphere"] = 'Sphere'] = "Sphere";
        StyleEnum[StyleEnum["Weave"] = 'Weave'] = "Weave";
        StyleEnum[StyleEnum["DottedGrid"] = 'DottedGrid'] = "DottedGrid";
        StyleEnum[StyleEnum["Divot"] = 'Divot'] = "Divot";
        StyleEnum[StyleEnum["Shingle"] = 'Shingle'] = "Shingle";
        StyleEnum[StyleEnum["Wave"] = 'Wave'] = "Wave";
        StyleEnum[StyleEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        StyleEnum[StyleEnum["Vertical"] = 'Vertical'] = "Vertical";
        StyleEnum[StyleEnum["Cross"] = 'Cross'] = "Cross";
        StyleEnum[StyleEnum["DownwardDiagonal"] = 'DownwardDiagonal'] = "DownwardDiagonal";
        StyleEnum[StyleEnum["UpwardDiagonal"] = 'UpwardDiagonal'] = "UpwardDiagonal";
        StyleEnum[StyleEnum["DiagonalCross"] = 'DiagonalCross'] = "DiagonalCross";
        StyleEnum[StyleEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(StyleEnum = PatternFill.StyleEnum || (PatternFill.StyleEnum = {}));
})(PatternFill = exports.PatternFill || (exports.PatternFill = {}));
/**
 * Provides options that control how a presentation is saved in Pdf format.
 */
class PdfExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'pdf';
    }
}
exports.PdfExportOptions = PdfExportOptions;
(function (PdfExportOptions) {
    let TextCompressionEnum;
    (function (TextCompressionEnum) {
        TextCompressionEnum[TextCompressionEnum["None"] = 'None'] = "None";
        TextCompressionEnum[TextCompressionEnum["Flate"] = 'Flate'] = "Flate";
    })(TextCompressionEnum = PdfExportOptions.TextCompressionEnum || (PdfExportOptions.TextCompressionEnum = {}));
    let ComplianceEnum;
    (function (ComplianceEnum) {
        ComplianceEnum[ComplianceEnum["Pdf15"] = 'Pdf15'] = "Pdf15";
        ComplianceEnum[ComplianceEnum["Pdf16"] = 'Pdf16'] = "Pdf16";
        ComplianceEnum[ComplianceEnum["Pdf17"] = 'Pdf17'] = "Pdf17";
        ComplianceEnum[ComplianceEnum["PdfA1b"] = 'PdfA1b'] = "PdfA1b";
        ComplianceEnum[ComplianceEnum["PdfA1a"] = 'PdfA1a'] = "PdfA1a";
        ComplianceEnum[ComplianceEnum["PdfA2b"] = 'PdfA2b'] = "PdfA2b";
        ComplianceEnum[ComplianceEnum["PdfA2a"] = 'PdfA2a'] = "PdfA2a";
        ComplianceEnum[ComplianceEnum["PdfA3b"] = 'PdfA3b'] = "PdfA3b";
        ComplianceEnum[ComplianceEnum["PdfA3a"] = 'PdfA3a'] = "PdfA3a";
        ComplianceEnum[ComplianceEnum["PdfUa"] = 'PdfUa'] = "PdfUa";
        ComplianceEnum[ComplianceEnum["PdfA2u"] = 'PdfA2u'] = "PdfA2u";
    })(ComplianceEnum = PdfExportOptions.ComplianceEnum || (PdfExportOptions.ComplianceEnum = {}));
})(PdfExportOptions = exports.PdfExportOptions || (exports.PdfExportOptions = {}));
/**
 * PDF import options.
 */
class PdfImportOptions {
}
exports.PdfImportOptions = PdfImportOptions;
/**
 * Picture fill.
 */
class PictureFill extends FillFormat {
    constructor() {
        super();
        this.type = PictureFill.TypeEnum.Picture;
    }
}
exports.PictureFill = PictureFill;
(function (PictureFill) {
    let PictureFillModeEnum;
    (function (PictureFillModeEnum) {
        PictureFillModeEnum[PictureFillModeEnum["Tile"] = 'Tile'] = "Tile";
        PictureFillModeEnum[PictureFillModeEnum["Stretch"] = 'Stretch'] = "Stretch";
    })(PictureFillModeEnum = PictureFill.PictureFillModeEnum || (PictureFill.PictureFillModeEnum = {}));
})(PictureFill = exports.PictureFill || (exports.PictureFill = {}));
/**
 * Represents PictureFrame resource.
 */
class PictureFrame extends GeometryShape {
    constructor() {
        super();
        this.type = PictureFrame.TypeEnum.PictureFrame;
    }
}
exports.PictureFrame = PictureFrame;
/**
 * Represents pipeline for one input document.
 */
class Pipeline {
}
exports.Pipeline = Pipeline;
/**
 * Represents placeholder
 */
class Placeholder extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Placeholder = Placeholder;
(function (Placeholder) {
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        OrientationEnum[OrientationEnum["Vertical"] = 'Vertical'] = "Vertical";
    })(OrientationEnum = Placeholder.OrientationEnum || (Placeholder.OrientationEnum = {}));
    let SizeEnum;
    (function (SizeEnum) {
        SizeEnum[SizeEnum["Full"] = 'Full'] = "Full";
        SizeEnum[SizeEnum["Half"] = 'Half'] = "Half";
        SizeEnum[SizeEnum["Quarter"] = 'Quarter'] = "Quarter";
    })(SizeEnum = Placeholder.SizeEnum || (Placeholder.SizeEnum = {}));
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Title"] = 'Title'] = "Title";
        TypeEnum[TypeEnum["Body"] = 'Body'] = "Body";
        TypeEnum[TypeEnum["CenteredTitle"] = 'CenteredTitle'] = "CenteredTitle";
        TypeEnum[TypeEnum["Subtitle"] = 'Subtitle'] = "Subtitle";
        TypeEnum[TypeEnum["DateAndTime"] = 'DateAndTime'] = "DateAndTime";
        TypeEnum[TypeEnum["SlideNumber"] = 'SlideNumber'] = "SlideNumber";
        TypeEnum[TypeEnum["Footer"] = 'Footer'] = "Footer";
        TypeEnum[TypeEnum["Header"] = 'Header'] = "Header";
        TypeEnum[TypeEnum["Object"] = 'Object'] = "Object";
        TypeEnum[TypeEnum["Chart"] = 'Chart'] = "Chart";
        TypeEnum[TypeEnum["Table"] = 'Table'] = "Table";
        TypeEnum[TypeEnum["ClipArt"] = 'ClipArt'] = "ClipArt";
        TypeEnum[TypeEnum["Diagram"] = 'Diagram'] = "Diagram";
        TypeEnum[TypeEnum["Media"] = 'Media'] = "Media";
        TypeEnum[TypeEnum["SlideImage"] = 'SlideImage'] = "SlideImage";
        TypeEnum[TypeEnum["Picture"] = 'Picture'] = "Picture";
    })(TypeEnum = Placeholder.TypeEnum || (Placeholder.TypeEnum = {}));
})(Placeholder = exports.Placeholder || (exports.Placeholder = {}));
/**
 * Placeholder list.
 */
class Placeholders extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Placeholders = Placeholders;
/**
 * Represents the plot area
 */
class PlotArea {
}
exports.PlotArea = PlotArea;
(function (PlotArea) {
    let LayoutTargetTypeEnum;
    (function (LayoutTargetTypeEnum) {
        LayoutTargetTypeEnum[LayoutTargetTypeEnum["Inner"] = 'Inner'] = "Inner";
        LayoutTargetTypeEnum[LayoutTargetTypeEnum["Outer"] = 'Outer'] = "Outer";
    })(LayoutTargetTypeEnum = PlotArea.LayoutTargetTypeEnum || (PlotArea.LayoutTargetTypeEnum = {}));
})(PlotArea = exports.PlotArea || (exports.PlotArea = {}));
/**
 * Represents portion resource
 */
class Portion extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Portion = Portion;
(function (Portion) {
    let FontBoldEnum;
    (function (FontBoldEnum) {
        FontBoldEnum[FontBoldEnum["False"] = 'False'] = "False";
        FontBoldEnum[FontBoldEnum["True"] = 'True'] = "True";
        FontBoldEnum[FontBoldEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(FontBoldEnum = Portion.FontBoldEnum || (Portion.FontBoldEnum = {}));
    let FontItalicEnum;
    (function (FontItalicEnum) {
        FontItalicEnum[FontItalicEnum["False"] = 'False'] = "False";
        FontItalicEnum[FontItalicEnum["True"] = 'True'] = "True";
        FontItalicEnum[FontItalicEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(FontItalicEnum = Portion.FontItalicEnum || (Portion.FontItalicEnum = {}));
    let FontUnderlineEnum;
    (function (FontUnderlineEnum) {
        FontUnderlineEnum[FontUnderlineEnum["None"] = 'None'] = "None";
        FontUnderlineEnum[FontUnderlineEnum["Words"] = 'Words'] = "Words";
        FontUnderlineEnum[FontUnderlineEnum["Single"] = 'Single'] = "Single";
        FontUnderlineEnum[FontUnderlineEnum["Double"] = 'Double'] = "Double";
        FontUnderlineEnum[FontUnderlineEnum["Heavy"] = 'Heavy'] = "Heavy";
        FontUnderlineEnum[FontUnderlineEnum["Dotted"] = 'Dotted'] = "Dotted";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDotted"] = 'HeavyDotted'] = "HeavyDotted";
        FontUnderlineEnum[FontUnderlineEnum["Dashed"] = 'Dashed'] = "Dashed";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDashed"] = 'HeavyDashed'] = "HeavyDashed";
        FontUnderlineEnum[FontUnderlineEnum["LongDashed"] = 'LongDashed'] = "LongDashed";
        FontUnderlineEnum[FontUnderlineEnum["HeavyLongDashed"] = 'HeavyLongDashed'] = "HeavyLongDashed";
        FontUnderlineEnum[FontUnderlineEnum["DotDash"] = 'DotDash'] = "DotDash";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDotDash"] = 'HeavyDotDash'] = "HeavyDotDash";
        FontUnderlineEnum[FontUnderlineEnum["DotDotDash"] = 'DotDotDash'] = "DotDotDash";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDotDotDash"] = 'HeavyDotDotDash'] = "HeavyDotDotDash";
        FontUnderlineEnum[FontUnderlineEnum["Wavy"] = 'Wavy'] = "Wavy";
        FontUnderlineEnum[FontUnderlineEnum["HeavyWavy"] = 'HeavyWavy'] = "HeavyWavy";
        FontUnderlineEnum[FontUnderlineEnum["DoubleWavy"] = 'DoubleWavy'] = "DoubleWavy";
        FontUnderlineEnum[FontUnderlineEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(FontUnderlineEnum = Portion.FontUnderlineEnum || (Portion.FontUnderlineEnum = {}));
    let StrikethroughTypeEnum;
    (function (StrikethroughTypeEnum) {
        StrikethroughTypeEnum[StrikethroughTypeEnum["None"] = 'None'] = "None";
        StrikethroughTypeEnum[StrikethroughTypeEnum["Single"] = 'Single'] = "Single";
        StrikethroughTypeEnum[StrikethroughTypeEnum["Double"] = 'Double'] = "Double";
        StrikethroughTypeEnum[StrikethroughTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(StrikethroughTypeEnum = Portion.StrikethroughTypeEnum || (Portion.StrikethroughTypeEnum = {}));
    let TextCapTypeEnum;
    (function (TextCapTypeEnum) {
        TextCapTypeEnum[TextCapTypeEnum["None"] = 'None'] = "None";
        TextCapTypeEnum[TextCapTypeEnum["Small"] = 'Small'] = "Small";
        TextCapTypeEnum[TextCapTypeEnum["All"] = 'All'] = "All";
        TextCapTypeEnum[TextCapTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TextCapTypeEnum = Portion.TextCapTypeEnum || (Portion.TextCapTypeEnum = {}));
    let NormaliseHeightEnum;
    (function (NormaliseHeightEnum) {
        NormaliseHeightEnum[NormaliseHeightEnum["False"] = 'False'] = "False";
        NormaliseHeightEnum[NormaliseHeightEnum["True"] = 'True'] = "True";
        NormaliseHeightEnum[NormaliseHeightEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(NormaliseHeightEnum = Portion.NormaliseHeightEnum || (Portion.NormaliseHeightEnum = {}));
    let ProofDisabledEnum;
    (function (ProofDisabledEnum) {
        ProofDisabledEnum[ProofDisabledEnum["False"] = 'False'] = "False";
        ProofDisabledEnum[ProofDisabledEnum["True"] = 'True'] = "True";
        ProofDisabledEnum[ProofDisabledEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(ProofDisabledEnum = Portion.ProofDisabledEnum || (Portion.ProofDisabledEnum = {}));
    let KumimojiEnum;
    (function (KumimojiEnum) {
        KumimojiEnum[KumimojiEnum["False"] = 'False'] = "False";
        KumimojiEnum[KumimojiEnum["True"] = 'True'] = "True";
        KumimojiEnum[KumimojiEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(KumimojiEnum = Portion.KumimojiEnum || (Portion.KumimojiEnum = {}));
    let IsHardUnderlineFillEnum;
    (function (IsHardUnderlineFillEnum) {
        IsHardUnderlineFillEnum[IsHardUnderlineFillEnum["False"] = 'False'] = "False";
        IsHardUnderlineFillEnum[IsHardUnderlineFillEnum["True"] = 'True'] = "True";
        IsHardUnderlineFillEnum[IsHardUnderlineFillEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(IsHardUnderlineFillEnum = Portion.IsHardUnderlineFillEnum || (Portion.IsHardUnderlineFillEnum = {}));
    let IsHardUnderlineLineEnum;
    (function (IsHardUnderlineLineEnum) {
        IsHardUnderlineLineEnum[IsHardUnderlineLineEnum["False"] = 'False'] = "False";
        IsHardUnderlineLineEnum[IsHardUnderlineLineEnum["True"] = 'True'] = "True";
        IsHardUnderlineLineEnum[IsHardUnderlineLineEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(IsHardUnderlineLineEnum = Portion.IsHardUnderlineLineEnum || (Portion.IsHardUnderlineLineEnum = {}));
})(Portion = exports.Portion || (exports.Portion = {}));
/**
 * Represents portion format.
 */
class PortionFormat {
}
exports.PortionFormat = PortionFormat;
(function (PortionFormat) {
    let FontBoldEnum;
    (function (FontBoldEnum) {
        FontBoldEnum[FontBoldEnum["False"] = 'False'] = "False";
        FontBoldEnum[FontBoldEnum["True"] = 'True'] = "True";
        FontBoldEnum[FontBoldEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(FontBoldEnum = PortionFormat.FontBoldEnum || (PortionFormat.FontBoldEnum = {}));
    let FontItalicEnum;
    (function (FontItalicEnum) {
        FontItalicEnum[FontItalicEnum["False"] = 'False'] = "False";
        FontItalicEnum[FontItalicEnum["True"] = 'True'] = "True";
        FontItalicEnum[FontItalicEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(FontItalicEnum = PortionFormat.FontItalicEnum || (PortionFormat.FontItalicEnum = {}));
    let FontUnderlineEnum;
    (function (FontUnderlineEnum) {
        FontUnderlineEnum[FontUnderlineEnum["None"] = 'None'] = "None";
        FontUnderlineEnum[FontUnderlineEnum["Words"] = 'Words'] = "Words";
        FontUnderlineEnum[FontUnderlineEnum["Single"] = 'Single'] = "Single";
        FontUnderlineEnum[FontUnderlineEnum["Double"] = 'Double'] = "Double";
        FontUnderlineEnum[FontUnderlineEnum["Heavy"] = 'Heavy'] = "Heavy";
        FontUnderlineEnum[FontUnderlineEnum["Dotted"] = 'Dotted'] = "Dotted";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDotted"] = 'HeavyDotted'] = "HeavyDotted";
        FontUnderlineEnum[FontUnderlineEnum["Dashed"] = 'Dashed'] = "Dashed";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDashed"] = 'HeavyDashed'] = "HeavyDashed";
        FontUnderlineEnum[FontUnderlineEnum["LongDashed"] = 'LongDashed'] = "LongDashed";
        FontUnderlineEnum[FontUnderlineEnum["HeavyLongDashed"] = 'HeavyLongDashed'] = "HeavyLongDashed";
        FontUnderlineEnum[FontUnderlineEnum["DotDash"] = 'DotDash'] = "DotDash";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDotDash"] = 'HeavyDotDash'] = "HeavyDotDash";
        FontUnderlineEnum[FontUnderlineEnum["DotDotDash"] = 'DotDotDash'] = "DotDotDash";
        FontUnderlineEnum[FontUnderlineEnum["HeavyDotDotDash"] = 'HeavyDotDotDash'] = "HeavyDotDotDash";
        FontUnderlineEnum[FontUnderlineEnum["Wavy"] = 'Wavy'] = "Wavy";
        FontUnderlineEnum[FontUnderlineEnum["HeavyWavy"] = 'HeavyWavy'] = "HeavyWavy";
        FontUnderlineEnum[FontUnderlineEnum["DoubleWavy"] = 'DoubleWavy'] = "DoubleWavy";
        FontUnderlineEnum[FontUnderlineEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(FontUnderlineEnum = PortionFormat.FontUnderlineEnum || (PortionFormat.FontUnderlineEnum = {}));
    let StrikethroughTypeEnum;
    (function (StrikethroughTypeEnum) {
        StrikethroughTypeEnum[StrikethroughTypeEnum["None"] = 'None'] = "None";
        StrikethroughTypeEnum[StrikethroughTypeEnum["Single"] = 'Single'] = "Single";
        StrikethroughTypeEnum[StrikethroughTypeEnum["Double"] = 'Double'] = "Double";
        StrikethroughTypeEnum[StrikethroughTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(StrikethroughTypeEnum = PortionFormat.StrikethroughTypeEnum || (PortionFormat.StrikethroughTypeEnum = {}));
    let TextCapTypeEnum;
    (function (TextCapTypeEnum) {
        TextCapTypeEnum[TextCapTypeEnum["None"] = 'None'] = "None";
        TextCapTypeEnum[TextCapTypeEnum["Small"] = 'Small'] = "Small";
        TextCapTypeEnum[TextCapTypeEnum["All"] = 'All'] = "All";
        TextCapTypeEnum[TextCapTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TextCapTypeEnum = PortionFormat.TextCapTypeEnum || (PortionFormat.TextCapTypeEnum = {}));
    let NormaliseHeightEnum;
    (function (NormaliseHeightEnum) {
        NormaliseHeightEnum[NormaliseHeightEnum["False"] = 'False'] = "False";
        NormaliseHeightEnum[NormaliseHeightEnum["True"] = 'True'] = "True";
        NormaliseHeightEnum[NormaliseHeightEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(NormaliseHeightEnum = PortionFormat.NormaliseHeightEnum || (PortionFormat.NormaliseHeightEnum = {}));
    let ProofDisabledEnum;
    (function (ProofDisabledEnum) {
        ProofDisabledEnum[ProofDisabledEnum["False"] = 'False'] = "False";
        ProofDisabledEnum[ProofDisabledEnum["True"] = 'True'] = "True";
        ProofDisabledEnum[ProofDisabledEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(ProofDisabledEnum = PortionFormat.ProofDisabledEnum || (PortionFormat.ProofDisabledEnum = {}));
    let KumimojiEnum;
    (function (KumimojiEnum) {
        KumimojiEnum[KumimojiEnum["False"] = 'False'] = "False";
        KumimojiEnum[KumimojiEnum["True"] = 'True'] = "True";
        KumimojiEnum[KumimojiEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(KumimojiEnum = PortionFormat.KumimojiEnum || (PortionFormat.KumimojiEnum = {}));
    let IsHardUnderlineFillEnum;
    (function (IsHardUnderlineFillEnum) {
        IsHardUnderlineFillEnum[IsHardUnderlineFillEnum["False"] = 'False'] = "False";
        IsHardUnderlineFillEnum[IsHardUnderlineFillEnum["True"] = 'True'] = "True";
        IsHardUnderlineFillEnum[IsHardUnderlineFillEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(IsHardUnderlineFillEnum = PortionFormat.IsHardUnderlineFillEnum || (PortionFormat.IsHardUnderlineFillEnum = {}));
    let IsHardUnderlineLineEnum;
    (function (IsHardUnderlineLineEnum) {
        IsHardUnderlineLineEnum[IsHardUnderlineLineEnum["False"] = 'False'] = "False";
        IsHardUnderlineLineEnum[IsHardUnderlineLineEnum["True"] = 'True'] = "True";
        IsHardUnderlineLineEnum[IsHardUnderlineLineEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(IsHardUnderlineLineEnum = PortionFormat.IsHardUnderlineLineEnum || (PortionFormat.IsHardUnderlineLineEnum = {}));
})(PortionFormat = exports.PortionFormat || (exports.PortionFormat = {}));
/**
 * Represents list of Links to Paragraphs resources
 */
class Portions extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Portions = Portions;
/**
 * Provides options that control how a presentation is saved in PPTX format.
 */
class PptxExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'pptx';
    }
}
exports.PptxExportOptions = PptxExportOptions;
(function (PptxExportOptions) {
    let ConformanceEnum;
    (function (ConformanceEnum) {
        ConformanceEnum[ConformanceEnum["Ecma376"] = 'Ecma376'] = "Ecma376";
        ConformanceEnum[ConformanceEnum["Iso29500Transitional"] = 'Iso29500Transitional'] = "Iso29500Transitional";
        ConformanceEnum[ConformanceEnum["Iso29500Strict"] = 'Iso29500Strict'] = "Iso29500Strict";
    })(ConformanceEnum = PptxExportOptions.ConformanceEnum || (PptxExportOptions.ConformanceEnum = {}));
    let Zip64ModeEnum;
    (function (Zip64ModeEnum) {
        Zip64ModeEnum[Zip64ModeEnum["Never"] = 'Never'] = "Never";
        Zip64ModeEnum[Zip64ModeEnum["IfNecessary"] = 'IfNecessary'] = "IfNecessary";
        Zip64ModeEnum[Zip64ModeEnum["Always"] = 'Always'] = "Always";
    })(Zip64ModeEnum = PptxExportOptions.Zip64ModeEnum || (PptxExportOptions.Zip64ModeEnum = {}));
})(PptxExportOptions = exports.PptxExportOptions || (exports.PptxExportOptions = {}));
/**
 * Represents presentation to merge
 */
class PresentationToMerge {
}
exports.PresentationToMerge = PresentationToMerge;
(function (PresentationToMerge) {
    let SourceEnum;
    (function (SourceEnum) {
        SourceEnum[SourceEnum["Storage"] = 'Storage'] = "Storage";
        SourceEnum[SourceEnum["Request"] = 'Request'] = "Request";
        SourceEnum[SourceEnum["Url"] = 'Url'] = "Url";
    })(SourceEnum = PresentationToMerge.SourceEnum || (PresentationToMerge.SourceEnum = {}));
})(PresentationToMerge = exports.PresentationToMerge || (exports.PresentationToMerge = {}));
/**
 * Request for presentations merge
 */
class PresentationsMergeRequest {
}
exports.PresentationsMergeRequest = PresentationsMergeRequest;
/**
 * Represents preset shadow effect
 */
class PresetShadowEffect {
}
exports.PresetShadowEffect = PresetShadowEffect;
(function (PresetShadowEffect) {
    let PresetEnum;
    (function (PresetEnum) {
        PresetEnum[PresetEnum["TopLeftDropShadow"] = 'TopLeftDropShadow'] = "TopLeftDropShadow";
        PresetEnum[PresetEnum["TopLeftLargeDropShadow"] = 'TopLeftLargeDropShadow'] = "TopLeftLargeDropShadow";
        PresetEnum[PresetEnum["BackLeftLongPerspectiveShadow"] = 'BackLeftLongPerspectiveShadow'] = "BackLeftLongPerspectiveShadow";
        PresetEnum[PresetEnum["BackRightLongPerspectiveShadow"] = 'BackRightLongPerspectiveShadow'] = "BackRightLongPerspectiveShadow";
        PresetEnum[PresetEnum["TopLeftDoubleDropShadow"] = 'TopLeftDoubleDropShadow'] = "TopLeftDoubleDropShadow";
        PresetEnum[PresetEnum["BottomRightSmallDropShadow"] = 'BottomRightSmallDropShadow'] = "BottomRightSmallDropShadow";
        PresetEnum[PresetEnum["FrontLeftLongPerspectiveShadow"] = 'FrontLeftLongPerspectiveShadow'] = "FrontLeftLongPerspectiveShadow";
        PresetEnum[PresetEnum["FrontRightLongPerspectiveShadow"] = 'FrontRightLongPerspectiveShadow'] = "FrontRightLongPerspectiveShadow";
        PresetEnum[PresetEnum["OuterBoxShadow3D"] = 'OuterBoxShadow3D'] = "OuterBoxShadow3D";
        PresetEnum[PresetEnum["InnerBoxShadow3D"] = 'InnerBoxShadow3D'] = "InnerBoxShadow3D";
        PresetEnum[PresetEnum["BackCenterPerspectiveShadow"] = 'BackCenterPerspectiveShadow'] = "BackCenterPerspectiveShadow";
        PresetEnum[PresetEnum["TopRightDropShadow"] = 'TopRightDropShadow'] = "TopRightDropShadow";
        PresetEnum[PresetEnum["FrontBottomShadow"] = 'FrontBottomShadow'] = "FrontBottomShadow";
        PresetEnum[PresetEnum["BackLeftPerspectiveShadow"] = 'BackLeftPerspectiveShadow'] = "BackLeftPerspectiveShadow";
        PresetEnum[PresetEnum["BackRightPerspectiveShadow"] = 'BackRightPerspectiveShadow'] = "BackRightPerspectiveShadow";
        PresetEnum[PresetEnum["BottomLeftDropShadow"] = 'BottomLeftDropShadow'] = "BottomLeftDropShadow";
        PresetEnum[PresetEnum["BottomRightDropShadow"] = 'BottomRightDropShadow'] = "BottomRightDropShadow";
        PresetEnum[PresetEnum["FrontLeftPerspectiveShadow"] = 'FrontLeftPerspectiveShadow'] = "FrontLeftPerspectiveShadow";
        PresetEnum[PresetEnum["FrontRightPerspectiveShadow"] = 'FrontRightPerspectiveShadow'] = "FrontRightPerspectiveShadow";
        PresetEnum[PresetEnum["TopLeftSmallDropShadow"] = 'TopLeftSmallDropShadow'] = "TopLeftSmallDropShadow";
    })(PresetEnum = PresetShadowEffect.PresetEnum || (PresetShadowEffect.PresetEnum = {}));
})(PresetShadowEffect = exports.PresetShadowEffect || (exports.PresetShadowEffect = {}));
/**
 * Protection properties.
 */
class ProtectionProperties extends ResourceBase {
    constructor() {
        super();
    }
}
exports.ProtectionProperties = ProtectionProperties;
/**
 * Quadratic Bezier curve segment of the geometry path
 */
class QuadraticBezierToPathSegment extends PathSegment {
    constructor() {
        super();
        this.type = QuadraticBezierToPathSegment.TypeEnum.QuadBezierTo;
    }
}
exports.QuadraticBezierToPathSegment = QuadraticBezierToPathSegment;
/**
 * Radical function
 */
class RadicalElement extends MathElement {
    constructor() {
        super();
        this.type = RadicalElement.TypeEnum.Radical;
    }
}
exports.RadicalElement = RadicalElement;
/**
 * Represents reflection effect
 */
class ReflectionEffect {
}
exports.ReflectionEffect = ReflectionEffect;
(function (ReflectionEffect) {
    let RectangleAlignEnum;
    (function (RectangleAlignEnum) {
        RectangleAlignEnum[RectangleAlignEnum["TopLeft"] = 'TopLeft'] = "TopLeft";
        RectangleAlignEnum[RectangleAlignEnum["Top"] = 'Top'] = "Top";
        RectangleAlignEnum[RectangleAlignEnum["TopRight"] = 'TopRight'] = "TopRight";
        RectangleAlignEnum[RectangleAlignEnum["Left"] = 'Left'] = "Left";
        RectangleAlignEnum[RectangleAlignEnum["Center"] = 'Center'] = "Center";
        RectangleAlignEnum[RectangleAlignEnum["Right"] = 'Right'] = "Right";
        RectangleAlignEnum[RectangleAlignEnum["BottomLeft"] = 'BottomLeft'] = "BottomLeft";
        RectangleAlignEnum[RectangleAlignEnum["Bottom"] = 'Bottom'] = "Bottom";
        RectangleAlignEnum[RectangleAlignEnum["BottomRight"] = 'BottomRight'] = "BottomRight";
        RectangleAlignEnum[RectangleAlignEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(RectangleAlignEnum = ReflectionEffect.RectangleAlignEnum || (ReflectionEffect.RectangleAlignEnum = {}));
})(ReflectionEffect = exports.ReflectionEffect || (exports.ReflectionEffect = {}));
/**
 * Remove shape task.
 */
class RemoveShape extends Task {
    constructor() {
        super();
        this.type = RemoveShape.TypeEnum.RemoveShape;
    }
}
exports.RemoveShape = RemoveShape;
/**
 * Remove slide task.
 */
class RemoveSlide extends Task {
    constructor() {
        super();
        this.type = RemoveSlide.TypeEnum.RemoveSlide;
    }
}
exports.RemoveSlide = RemoveSlide;
/**
 * Reorder slide task.
 */
class ReorderSlide extends Task {
    constructor() {
        super();
        this.type = ReorderSlide.TypeEnum.ReoderSlide;
    }
}
exports.ReorderSlide = ReorderSlide;
/**
 * Replace text task.
 */
class ReplaceText extends Task {
    constructor() {
        super();
        this.type = ReplaceText.TypeEnum.ReplaceText;
    }
}
exports.ReplaceText = ReplaceText;
/**
 * Represents input file from multipart request.
 */
class RequestInputFile extends InputFile {
    constructor() {
        super();
        this.type = RequestInputFile.TypeEnum.Request;
    }
}
exports.RequestInputFile = RequestInputFile;
/**
 * Reset slide task.
 */
class ResetSlide extends Task {
    constructor() {
        super();
        this.type = ResetSlide.TypeEnum.ResetSlide;
    }
}
exports.ResetSlide = ResetSlide;
/**
 * Represents Resource URI
 */
class ResourceUri {
}
exports.ResourceUri = ResourceUri;
/**
 * Represents output file that will be sent to response.
 */
class ResponseOutputFile extends OutputFile {
    constructor() {
        super();
        this.type = ResponseOutputFile.TypeEnum.Response;
    }
}
exports.ResponseOutputFile = ResponseOutputFile;
/**
 * Specifies the Sub-Superscript object
 */
class RightSubSuperscriptElement extends MathElement {
    constructor() {
        super();
        this.type = RightSubSuperscriptElement.TypeEnum.RightSubSuperscriptElement;
    }
}
exports.RightSubSuperscriptElement = RightSubSuperscriptElement;
/**
 * Save slide task.
 */
class Save extends Task {
    constructor() {
        super();
        this.type = Save.TypeEnum.Save;
    }
}
exports.Save = Save;
(function (Save) {
    let FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Pdf"] = 'Pdf'] = "Pdf";
        FormatEnum[FormatEnum["Xps"] = 'Xps'] = "Xps";
        FormatEnum[FormatEnum["Tiff"] = 'Tiff'] = "Tiff";
        FormatEnum[FormatEnum["Pptx"] = 'Pptx'] = "Pptx";
        FormatEnum[FormatEnum["Odp"] = 'Odp'] = "Odp";
        FormatEnum[FormatEnum["Otp"] = 'Otp'] = "Otp";
        FormatEnum[FormatEnum["Ppt"] = 'Ppt'] = "Ppt";
        FormatEnum[FormatEnum["Pps"] = 'Pps'] = "Pps";
        FormatEnum[FormatEnum["Ppsx"] = 'Ppsx'] = "Ppsx";
        FormatEnum[FormatEnum["Pptm"] = 'Pptm'] = "Pptm";
        FormatEnum[FormatEnum["Ppsm"] = 'Ppsm'] = "Ppsm";
        FormatEnum[FormatEnum["Pot"] = 'Pot'] = "Pot";
        FormatEnum[FormatEnum["Potx"] = 'Potx'] = "Potx";
        FormatEnum[FormatEnum["Potm"] = 'Potm'] = "Potm";
        FormatEnum[FormatEnum["Html"] = 'Html'] = "Html";
        FormatEnum[FormatEnum["Html5"] = 'Html5'] = "Html5";
        FormatEnum[FormatEnum["Swf"] = 'Swf'] = "Swf";
        FormatEnum[FormatEnum["Svg"] = 'Svg'] = "Svg";
        FormatEnum[FormatEnum["Jpeg"] = 'Jpeg'] = "Jpeg";
        FormatEnum[FormatEnum["Png"] = 'Png'] = "Png";
        FormatEnum[FormatEnum["Gif"] = 'Gif'] = "Gif";
        FormatEnum[FormatEnum["Bmp"] = 'Bmp'] = "Bmp";
        FormatEnum[FormatEnum["Fodp"] = 'Fodp'] = "Fodp";
        FormatEnum[FormatEnum["Xaml"] = 'Xaml'] = "Xaml";
        FormatEnum[FormatEnum["Mpeg4"] = 'Mpeg4'] = "Mpeg4";
        FormatEnum[FormatEnum["Md"] = 'Md'] = "Md";
        FormatEnum[FormatEnum["Xml"] = 'Xml'] = "Xml";
    })(FormatEnum = Save.FormatEnum || (Save.FormatEnum = {}));
})(Save = exports.Save || (exports.Save = {}));
/**
 * Save shape task.
 */
class SaveShape extends Task {
    constructor() {
        super();
        this.type = SaveShape.TypeEnum.SaveShape;
    }
}
exports.SaveShape = SaveShape;
(function (SaveShape) {
    let FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Jpeg"] = 'Jpeg'] = "Jpeg";
        FormatEnum[FormatEnum["Png"] = 'Png'] = "Png";
        FormatEnum[FormatEnum["Gif"] = 'Gif'] = "Gif";
        FormatEnum[FormatEnum["Bmp"] = 'Bmp'] = "Bmp";
        FormatEnum[FormatEnum["Tiff"] = 'Tiff'] = "Tiff";
        FormatEnum[FormatEnum["Svg"] = 'Svg'] = "Svg";
    })(FormatEnum = SaveShape.FormatEnum || (SaveShape.FormatEnum = {}));
})(SaveShape = exports.SaveShape || (exports.SaveShape = {}));
/**
 * Save slide task.
 */
class SaveSlide extends Task {
    constructor() {
        super();
        this.type = SaveSlide.TypeEnum.SaveSlide;
    }
}
exports.SaveSlide = SaveSlide;
(function (SaveSlide) {
    let FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Jpeg"] = 'Jpeg'] = "Jpeg";
        FormatEnum[FormatEnum["Png"] = 'Png'] = "Png";
        FormatEnum[FormatEnum["Gif"] = 'Gif'] = "Gif";
        FormatEnum[FormatEnum["Bmp"] = 'Bmp'] = "Bmp";
        FormatEnum[FormatEnum["Tiff"] = 'Tiff'] = "Tiff";
        FormatEnum[FormatEnum["Html"] = 'Html'] = "Html";
        FormatEnum[FormatEnum["Pdf"] = 'Pdf'] = "Pdf";
        FormatEnum[FormatEnum["Xps"] = 'Xps'] = "Xps";
        FormatEnum[FormatEnum["Pptx"] = 'Pptx'] = "Pptx";
        FormatEnum[FormatEnum["Odp"] = 'Odp'] = "Odp";
        FormatEnum[FormatEnum["Otp"] = 'Otp'] = "Otp";
        FormatEnum[FormatEnum["Ppt"] = 'Ppt'] = "Ppt";
        FormatEnum[FormatEnum["Pps"] = 'Pps'] = "Pps";
        FormatEnum[FormatEnum["Ppsx"] = 'Ppsx'] = "Ppsx";
        FormatEnum[FormatEnum["Pptm"] = 'Pptm'] = "Pptm";
        FormatEnum[FormatEnum["Ppsm"] = 'Ppsm'] = "Ppsm";
        FormatEnum[FormatEnum["Potx"] = 'Potx'] = "Potx";
        FormatEnum[FormatEnum["Pot"] = 'Pot'] = "Pot";
        FormatEnum[FormatEnum["Potm"] = 'Potm'] = "Potm";
        FormatEnum[FormatEnum["Svg"] = 'Svg'] = "Svg";
        FormatEnum[FormatEnum["Fodp"] = 'Fodp'] = "Fodp";
        FormatEnum[FormatEnum["Xaml"] = 'Xaml'] = "Xaml";
        FormatEnum[FormatEnum["Html5"] = 'Html5'] = "Html5";
        FormatEnum[FormatEnum["Md"] = 'Md'] = "Md";
        FormatEnum[FormatEnum["Xml"] = 'Xml'] = "Xml";
    })(FormatEnum = SaveSlide.FormatEnum || (SaveSlide.FormatEnum = {}));
})(SaveSlide = exports.SaveSlide || (exports.SaveSlide = {}));
/**
 * A scatter series
 */
class ScatterSeries extends XYSeries {
    constructor() {
        super();
        this.dataPointType = ScatterSeries.DataPointTypeEnum.Scatter;
    }
}
exports.ScatterSeries = ScatterSeries;
/**
 * Presentation section.
 */
class Section extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Section = Section;
/**
 * Zoom object.
 */
class ZoomObject extends ShapeBase {
    constructor() {
        super();
    }
}
exports.ZoomObject = ZoomObject;
(function (ZoomObject) {
    let ImageTypeEnum;
    (function (ImageTypeEnum) {
        ImageTypeEnum[ImageTypeEnum["Preview"] = 'Preview'] = "Preview";
        ImageTypeEnum[ImageTypeEnum["Cover"] = 'Cover'] = "Cover";
    })(ImageTypeEnum = ZoomObject.ImageTypeEnum || (ZoomObject.ImageTypeEnum = {}));
})(ZoomObject = exports.ZoomObject || (exports.ZoomObject = {}));
/**
 * Section zoom frame.
 */
class SectionZoomFrame extends ZoomObject {
    constructor() {
        super();
        this.type = SectionZoomFrame.TypeEnum.SectionZoomFrame;
    }
}
exports.SectionZoomFrame = SectionZoomFrame;
/**
 * Section list.
 */
class Sections extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Sections = Sections;
/**
 * Represents a series marker
 */
class SeriesMarker {
}
exports.SeriesMarker = SeriesMarker;
(function (SeriesMarker) {
    let SymbolEnum;
    (function (SymbolEnum) {
        SymbolEnum[SymbolEnum["Circle"] = 'Circle'] = "Circle";
        SymbolEnum[SymbolEnum["Dash"] = 'Dash'] = "Dash";
        SymbolEnum[SymbolEnum["Diamond"] = 'Diamond'] = "Diamond";
        SymbolEnum[SymbolEnum["Dot"] = 'Dot'] = "Dot";
        SymbolEnum[SymbolEnum["None"] = 'None'] = "None";
        SymbolEnum[SymbolEnum["Picture"] = 'Picture'] = "Picture";
        SymbolEnum[SymbolEnum["Plus"] = 'Plus'] = "Plus";
        SymbolEnum[SymbolEnum["Square"] = 'Square'] = "Square";
        SymbolEnum[SymbolEnum["Star"] = 'Star'] = "Star";
        SymbolEnum[SymbolEnum["Triangle"] = 'Triangle'] = "Triangle";
        SymbolEnum[SymbolEnum["X"] = 'X'] = "X";
        SymbolEnum[SymbolEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(SymbolEnum = SeriesMarker.SymbolEnum || (SeriesMarker.SymbolEnum = {}));
})(SeriesMarker = exports.SeriesMarker || (exports.SeriesMarker = {}));
/**
 * Represents AutoShape resource.
 */
class Shape extends GeometryShape {
    constructor() {
        super();
        this.type = Shape.TypeEnum.Shape;
    }
}
exports.Shape = Shape;
/**
 * ShapeBevel
 */
class ShapeBevel {
}
exports.ShapeBevel = ShapeBevel;
(function (ShapeBevel) {
    let BevelTypeEnum;
    (function (BevelTypeEnum) {
        BevelTypeEnum[BevelTypeEnum["Angle"] = 'Angle'] = "Angle";
        BevelTypeEnum[BevelTypeEnum["ArtDeco"] = 'ArtDeco'] = "ArtDeco";
        BevelTypeEnum[BevelTypeEnum["Circle"] = 'Circle'] = "Circle";
        BevelTypeEnum[BevelTypeEnum["Convex"] = 'Convex'] = "Convex";
        BevelTypeEnum[BevelTypeEnum["CoolSlant"] = 'CoolSlant'] = "CoolSlant";
        BevelTypeEnum[BevelTypeEnum["Cross"] = 'Cross'] = "Cross";
        BevelTypeEnum[BevelTypeEnum["Divot"] = 'Divot'] = "Divot";
        BevelTypeEnum[BevelTypeEnum["HardEdge"] = 'HardEdge'] = "HardEdge";
        BevelTypeEnum[BevelTypeEnum["RelaxedInset"] = 'RelaxedInset'] = "RelaxedInset";
        BevelTypeEnum[BevelTypeEnum["Riblet"] = 'Riblet'] = "Riblet";
        BevelTypeEnum[BevelTypeEnum["Slope"] = 'Slope'] = "Slope";
        BevelTypeEnum[BevelTypeEnum["SoftRound"] = 'SoftRound'] = "SoftRound";
        BevelTypeEnum[BevelTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(BevelTypeEnum = ShapeBevel.BevelTypeEnum || (ShapeBevel.BevelTypeEnum = {}));
})(ShapeBevel = exports.ShapeBevel || (exports.ShapeBevel = {}));
/**
 * Represents a format for individual shape export.
 */
/**
* Represents a format for individual shape export.
*/
var ShapeExportFormat;
(function (ShapeExportFormat) {
    ShapeExportFormat[ShapeExportFormat["Jpeg"] = 'Jpeg'] = "Jpeg";
    ShapeExportFormat[ShapeExportFormat["Png"] = 'Png'] = "Png";
    ShapeExportFormat[ShapeExportFormat["Gif"] = 'Gif'] = "Gif";
    ShapeExportFormat[ShapeExportFormat["Bmp"] = 'Bmp'] = "Bmp";
    ShapeExportFormat[ShapeExportFormat["Tiff"] = 'Tiff'] = "Tiff";
    ShapeExportFormat[ShapeExportFormat["Svg"] = 'Svg'] = "Svg";
})(ShapeExportFormat = exports.ShapeExportFormat || (exports.ShapeExportFormat = {}));
/**
 * Provides options that control how a shape is saved in thumbnail.
 */
class ShapeImageExportOptions {
}
exports.ShapeImageExportOptions = ShapeImageExportOptions;
(function (ShapeImageExportOptions) {
    let ThumbnailBoundsEnum;
    (function (ThumbnailBoundsEnum) {
        ThumbnailBoundsEnum[ThumbnailBoundsEnum["Slide"] = 'Slide'] = "Slide";
        ThumbnailBoundsEnum[ThumbnailBoundsEnum["Shape"] = 'Shape'] = "Shape";
        ThumbnailBoundsEnum[ThumbnailBoundsEnum["Appearance"] = 'Appearance'] = "Appearance";
    })(ThumbnailBoundsEnum = ShapeImageExportOptions.ThumbnailBoundsEnum || (ShapeImageExportOptions.ThumbnailBoundsEnum = {}));
})(ShapeImageExportOptions = exports.ShapeImageExportOptions || (exports.ShapeImageExportOptions = {}));
/**
 * Represents thumnail bounds settings.
 */
/**
* Represents thumnail bounds settings.
*/
var ShapeThumbnailBounds;
(function (ShapeThumbnailBounds) {
    ShapeThumbnailBounds[ShapeThumbnailBounds["Slide"] = 'Slide'] = "Slide";
    ShapeThumbnailBounds[ShapeThumbnailBounds["Shape"] = 'Shape'] = "Shape";
    ShapeThumbnailBounds[ShapeThumbnailBounds["Appearance"] = 'Appearance'] = "Appearance";
})(ShapeThumbnailBounds = exports.ShapeThumbnailBounds || (exports.ShapeThumbnailBounds = {}));
/**
 * Shape type
 */
/**
* Shape type
*/
var ShapeType;
(function (ShapeType) {
    ShapeType[ShapeType["Shape"] = 'Shape'] = "Shape";
    ShapeType[ShapeType["Chart"] = 'Chart'] = "Chart";
    ShapeType[ShapeType["Table"] = 'Table'] = "Table";
    ShapeType[ShapeType["PictureFrame"] = 'PictureFrame'] = "PictureFrame";
    ShapeType[ShapeType["VideoFrame"] = 'VideoFrame'] = "VideoFrame";
    ShapeType[ShapeType["AudioFrame"] = 'AudioFrame'] = "AudioFrame";
    ShapeType[ShapeType["SmartArt"] = 'SmartArt'] = "SmartArt";
    ShapeType[ShapeType["OleObjectFrame"] = 'OleObjectFrame'] = "OleObjectFrame";
    ShapeType[ShapeType["GroupShape"] = 'GroupShape'] = "GroupShape";
    ShapeType[ShapeType["GraphicalObject"] = 'GraphicalObject'] = "GraphicalObject";
    ShapeType[ShapeType["Connector"] = 'Connector'] = "Connector";
    ShapeType[ShapeType["SmartArtShape"] = 'SmartArtShape'] = "SmartArtShape";
    ShapeType[ShapeType["ZoomFrame"] = 'ZoomFrame'] = "ZoomFrame";
    ShapeType[ShapeType["SectionZoomFrame"] = 'SectionZoomFrame'] = "SectionZoomFrame";
    ShapeType[ShapeType["SummaryZoomFrame"] = 'SummaryZoomFrame'] = "SummaryZoomFrame";
    ShapeType[ShapeType["SummaryZoomSection"] = 'SummaryZoomSection'] = "SummaryZoomSection";
})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));
/**
 * Represents list of Links to Shapes resources
 */
class Shapes extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Shapes = Shapes;
/**
 *
 */
/**
*
*/
var ShapesAlignmentType;
(function (ShapesAlignmentType) {
    ShapesAlignmentType[ShapesAlignmentType["AlignLeft"] = 'AlignLeft'] = "AlignLeft";
    ShapesAlignmentType[ShapesAlignmentType["AlignRight"] = 'AlignRight'] = "AlignRight";
    ShapesAlignmentType[ShapesAlignmentType["AlignCenter"] = 'AlignCenter'] = "AlignCenter";
    ShapesAlignmentType[ShapesAlignmentType["AlignTop"] = 'AlignTop'] = "AlignTop";
    ShapesAlignmentType[ShapesAlignmentType["AlignMiddle"] = 'AlignMiddle'] = "AlignMiddle";
    ShapesAlignmentType[ShapesAlignmentType["AlignBottom"] = 'AlignBottom'] = "AlignBottom";
    ShapesAlignmentType[ShapesAlignmentType["DistributeHorizontally"] = 'DistributeHorizontally'] = "DistributeHorizontally";
    ShapesAlignmentType[ShapesAlignmentType["DistributeVertically"] = 'DistributeVertically'] = "DistributeVertically";
})(ShapesAlignmentType = exports.ShapesAlignmentType || (exports.ShapesAlignmentType = {}));
/**
 * Presentation slide.
 */
class Slide extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Slide = Slide;
/**
 * Represents comments collection of slide
 */
class SlideAnimation extends ResourceBase {
    constructor() {
        super();
    }
}
exports.SlideAnimation = SlideAnimation;
/**
 * Represents background of slide
 */
class SlideBackground extends ResourceBase {
    constructor() {
        super();
    }
}
exports.SlideBackground = SlideBackground;
(function (SlideBackground) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["NoFill"] = 'NoFill'] = "NoFill";
        TypeEnum[TypeEnum["Solid"] = 'Solid'] = "Solid";
        TypeEnum[TypeEnum["Gradient"] = 'Gradient'] = "Gradient";
        TypeEnum[TypeEnum["Pattern"] = 'Pattern'] = "Pattern";
        TypeEnum[TypeEnum["Picture"] = 'Picture'] = "Picture";
        TypeEnum[TypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TypeEnum = SlideBackground.TypeEnum || (SlideBackground.TypeEnum = {}));
})(SlideBackground = exports.SlideBackground || (exports.SlideBackground = {}));
/**
 * Represents slide comment
 */
class SlideCommentBase {
}
exports.SlideCommentBase = SlideCommentBase;
(function (SlideCommentBase) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Regular"] = 'Regular'] = "Regular";
        TypeEnum[TypeEnum["Modern"] = 'Modern'] = "Modern";
    })(TypeEnum = SlideCommentBase.TypeEnum || (SlideCommentBase.TypeEnum = {}));
})(SlideCommentBase = exports.SlideCommentBase || (exports.SlideCommentBase = {}));
/**
 * Represents comment of slide
 */
class SlideComment extends SlideCommentBase {
    constructor() {
        super();
        this.type = SlideComment.TypeEnum.Regular;
    }
}
exports.SlideComment = SlideComment;
/**
 * Represents comments collection of slide
 */
class SlideComments extends ResourceBase {
    constructor() {
        super();
    }
}
exports.SlideComments = SlideComments;
/**
 * Slide Export Format
 */
/**
* Slide Export Format
*/
var SlideExportFormat;
(function (SlideExportFormat) {
    SlideExportFormat[SlideExportFormat["Jpeg"] = 'Jpeg'] = "Jpeg";
    SlideExportFormat[SlideExportFormat["Png"] = 'Png'] = "Png";
    SlideExportFormat[SlideExportFormat["Gif"] = 'Gif'] = "Gif";
    SlideExportFormat[SlideExportFormat["Bmp"] = 'Bmp'] = "Bmp";
    SlideExportFormat[SlideExportFormat["Tiff"] = 'Tiff'] = "Tiff";
    SlideExportFormat[SlideExportFormat["Html"] = 'Html'] = "Html";
    SlideExportFormat[SlideExportFormat["Pdf"] = 'Pdf'] = "Pdf";
    SlideExportFormat[SlideExportFormat["Xps"] = 'Xps'] = "Xps";
    SlideExportFormat[SlideExportFormat["Pptx"] = 'Pptx'] = "Pptx";
    SlideExportFormat[SlideExportFormat["Odp"] = 'Odp'] = "Odp";
    SlideExportFormat[SlideExportFormat["Otp"] = 'Otp'] = "Otp";
    SlideExportFormat[SlideExportFormat["Ppt"] = 'Ppt'] = "Ppt";
    SlideExportFormat[SlideExportFormat["Pps"] = 'Pps'] = "Pps";
    SlideExportFormat[SlideExportFormat["Ppsx"] = 'Ppsx'] = "Ppsx";
    SlideExportFormat[SlideExportFormat["Pptm"] = 'Pptm'] = "Pptm";
    SlideExportFormat[SlideExportFormat["Ppsm"] = 'Ppsm'] = "Ppsm";
    SlideExportFormat[SlideExportFormat["Potx"] = 'Potx'] = "Potx";
    SlideExportFormat[SlideExportFormat["Pot"] = 'Pot'] = "Pot";
    SlideExportFormat[SlideExportFormat["Potm"] = 'Potm'] = "Potm";
    SlideExportFormat[SlideExportFormat["Svg"] = 'Svg'] = "Svg";
    SlideExportFormat[SlideExportFormat["Fodp"] = 'Fodp'] = "Fodp";
    SlideExportFormat[SlideExportFormat["Xaml"] = 'Xaml'] = "Xaml";
    SlideExportFormat[SlideExportFormat["Html5"] = 'Html5'] = "Html5";
    SlideExportFormat[SlideExportFormat["Md"] = 'Md'] = "Md";
    SlideExportFormat[SlideExportFormat["Xml"] = 'Xml'] = "Xml";
})(SlideExportFormat = exports.SlideExportFormat || (exports.SlideExportFormat = {}));
/**
 * Represents modern comment of slide
 */
class SlideModernComment extends SlideCommentBase {
    constructor() {
        super();
        this.type = SlideModernComment.TypeEnum.Modern;
    }
}
exports.SlideModernComment = SlideModernComment;
(function (SlideModernComment) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        StatusEnum[StatusEnum["Active"] = 'Active'] = "Active";
        StatusEnum[StatusEnum["Resolved"] = 'Resolved'] = "Resolved";
        StatusEnum[StatusEnum["Closed"] = 'Closed'] = "Closed";
    })(StatusEnum = SlideModernComment.StatusEnum || (SlideModernComment.StatusEnum = {}));
})(SlideModernComment = exports.SlideModernComment || (exports.SlideModernComment = {}));
/**
 * Slide properties.
 */
class SlideProperties extends ResourceBase {
    constructor() {
        super();
    }
}
exports.SlideProperties = SlideProperties;
(function (SlideProperties) {
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Landscape"] = 'Landscape'] = "Landscape";
        OrientationEnum[OrientationEnum["Portrait"] = 'Portrait'] = "Portrait";
    })(OrientationEnum = SlideProperties.OrientationEnum || (SlideProperties.OrientationEnum = {}));
    let ScaleTypeEnum;
    (function (ScaleTypeEnum) {
        ScaleTypeEnum[ScaleTypeEnum["DoNotScale"] = 'DoNotScale'] = "DoNotScale";
        ScaleTypeEnum[ScaleTypeEnum["EnsureFit"] = 'EnsureFit'] = "EnsureFit";
        ScaleTypeEnum[ScaleTypeEnum["Maximize"] = 'Maximize'] = "Maximize";
    })(ScaleTypeEnum = SlideProperties.ScaleTypeEnum || (SlideProperties.ScaleTypeEnum = {}));
    let SizeTypeEnum;
    (function (SizeTypeEnum) {
        SizeTypeEnum[SizeTypeEnum["OnScreen"] = 'OnScreen'] = "OnScreen";
        SizeTypeEnum[SizeTypeEnum["LetterPaper"] = 'LetterPaper'] = "LetterPaper";
        SizeTypeEnum[SizeTypeEnum["A4Paper"] = 'A4Paper'] = "A4Paper";
        SizeTypeEnum[SizeTypeEnum["Slide35mm"] = 'Slide35mm'] = "Slide35mm";
        SizeTypeEnum[SizeTypeEnum["Overhead"] = 'Overhead'] = "Overhead";
        SizeTypeEnum[SizeTypeEnum["Banner"] = 'Banner'] = "Banner";
        SizeTypeEnum[SizeTypeEnum["Custom"] = 'Custom'] = "Custom";
        SizeTypeEnum[SizeTypeEnum["Ledger"] = 'Ledger'] = "Ledger";
        SizeTypeEnum[SizeTypeEnum["A3Paper"] = 'A3Paper'] = "A3Paper";
        SizeTypeEnum[SizeTypeEnum["B4IsoPaper"] = 'B4IsoPaper'] = "B4IsoPaper";
        SizeTypeEnum[SizeTypeEnum["B5IsoPaper"] = 'B5IsoPaper'] = "B5IsoPaper";
        SizeTypeEnum[SizeTypeEnum["B4JisPaper"] = 'B4JisPaper'] = "B4JisPaper";
        SizeTypeEnum[SizeTypeEnum["B5JisPaper"] = 'B5JisPaper'] = "B5JisPaper";
        SizeTypeEnum[SizeTypeEnum["HagakiCard"] = 'HagakiCard'] = "HagakiCard";
        SizeTypeEnum[SizeTypeEnum["OnScreen16x9"] = 'OnScreen16x9'] = "OnScreen16x9";
        SizeTypeEnum[SizeTypeEnum["OnScreen16x10"] = 'OnScreen16x10'] = "OnScreen16x10";
        SizeTypeEnum[SizeTypeEnum["Widescreen"] = 'Widescreen'] = "Widescreen";
    })(SizeTypeEnum = SlideProperties.SizeTypeEnum || (SlideProperties.SizeTypeEnum = {}));
})(SlideProperties = exports.SlideProperties || (exports.SlideProperties = {}));
/**
 * Represents slide replace result DTO.
 */
class SlideReplaceResult extends Slide {
    constructor() {
        super();
    }
}
exports.SlideReplaceResult = SlideReplaceResult;
/**
 * Slide show properties.
 */
class SlideShowProperties extends ResourceBase {
    constructor() {
        super();
    }
}
exports.SlideShowProperties = SlideShowProperties;
(function (SlideShowProperties) {
    let SlideShowTypeEnum;
    (function (SlideShowTypeEnum) {
        SlideShowTypeEnum[SlideShowTypeEnum["BrowsedAtKiosk"] = 'BrowsedAtKiosk'] = "BrowsedAtKiosk";
        SlideShowTypeEnum[SlideShowTypeEnum["BrowsedByIndividual"] = 'BrowsedByIndividual'] = "BrowsedByIndividual";
        SlideShowTypeEnum[SlideShowTypeEnum["PresentedBySpeaker"] = 'PresentedBySpeaker'] = "PresentedBySpeaker";
    })(SlideShowTypeEnum = SlideShowProperties.SlideShowTypeEnum || (SlideShowProperties.SlideShowTypeEnum = {}));
})(SlideShowProperties = exports.SlideShowProperties || (exports.SlideShowProperties = {}));
/**
 * Slide Show Transition.
 */
class SlideShowTransition {
}
exports.SlideShowTransition = SlideShowTransition;
(function (SlideShowTransition) {
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["None"] = 'None'] = "None";
        TypeEnum[TypeEnum["Blinds"] = 'Blinds'] = "Blinds";
        TypeEnum[TypeEnum["Checker"] = 'Checker'] = "Checker";
        TypeEnum[TypeEnum["Circle"] = 'Circle'] = "Circle";
        TypeEnum[TypeEnum["Comb"] = 'Comb'] = "Comb";
        TypeEnum[TypeEnum["Cover"] = 'Cover'] = "Cover";
        TypeEnum[TypeEnum["Cut"] = 'Cut'] = "Cut";
        TypeEnum[TypeEnum["Diamond"] = 'Diamond'] = "Diamond";
        TypeEnum[TypeEnum["Dissolve"] = 'Dissolve'] = "Dissolve";
        TypeEnum[TypeEnum["Fade"] = 'Fade'] = "Fade";
        TypeEnum[TypeEnum["Newsflash"] = 'Newsflash'] = "Newsflash";
        TypeEnum[TypeEnum["Plus"] = 'Plus'] = "Plus";
        TypeEnum[TypeEnum["Pull"] = 'Pull'] = "Pull";
        TypeEnum[TypeEnum["Push"] = 'Push'] = "Push";
        TypeEnum[TypeEnum["Random"] = 'Random'] = "Random";
        TypeEnum[TypeEnum["RandomBar"] = 'RandomBar'] = "RandomBar";
        TypeEnum[TypeEnum["Split"] = 'Split'] = "Split";
        TypeEnum[TypeEnum["Strips"] = 'Strips'] = "Strips";
        TypeEnum[TypeEnum["Wedge"] = 'Wedge'] = "Wedge";
        TypeEnum[TypeEnum["Wheel"] = 'Wheel'] = "Wheel";
        TypeEnum[TypeEnum["Wipe"] = 'Wipe'] = "Wipe";
        TypeEnum[TypeEnum["Zoom"] = 'Zoom'] = "Zoom";
        TypeEnum[TypeEnum["Vortex"] = 'Vortex'] = "Vortex";
        TypeEnum[TypeEnum["Switch"] = 'Switch'] = "Switch";
        TypeEnum[TypeEnum["Flip"] = 'Flip'] = "Flip";
        TypeEnum[TypeEnum["Ripple"] = 'Ripple'] = "Ripple";
        TypeEnum[TypeEnum["Honeycomb"] = 'Honeycomb'] = "Honeycomb";
        TypeEnum[TypeEnum["Cube"] = 'Cube'] = "Cube";
        TypeEnum[TypeEnum["Box"] = 'Box'] = "Box";
        TypeEnum[TypeEnum["Rotate"] = 'Rotate'] = "Rotate";
        TypeEnum[TypeEnum["Orbit"] = 'Orbit'] = "Orbit";
        TypeEnum[TypeEnum["Doors"] = 'Doors'] = "Doors";
        TypeEnum[TypeEnum["Window"] = 'Window'] = "Window";
        TypeEnum[TypeEnum["Ferris"] = 'Ferris'] = "Ferris";
        TypeEnum[TypeEnum["Gallery"] = 'Gallery'] = "Gallery";
        TypeEnum[TypeEnum["Conveyor"] = 'Conveyor'] = "Conveyor";
        TypeEnum[TypeEnum["Pan"] = 'Pan'] = "Pan";
        TypeEnum[TypeEnum["Glitter"] = 'Glitter'] = "Glitter";
        TypeEnum[TypeEnum["Warp"] = 'Warp'] = "Warp";
        TypeEnum[TypeEnum["Flythrough"] = 'Flythrough'] = "Flythrough";
        TypeEnum[TypeEnum["Flash"] = 'Flash'] = "Flash";
        TypeEnum[TypeEnum["Shred"] = 'Shred'] = "Shred";
        TypeEnum[TypeEnum["Reveal"] = 'Reveal'] = "Reveal";
        TypeEnum[TypeEnum["WheelReverse"] = 'WheelReverse'] = "WheelReverse";
        TypeEnum[TypeEnum["FallOver"] = 'FallOver'] = "FallOver";
        TypeEnum[TypeEnum["Drape"] = 'Drape'] = "Drape";
        TypeEnum[TypeEnum["Curtains"] = 'Curtains'] = "Curtains";
        TypeEnum[TypeEnum["Wind"] = 'Wind'] = "Wind";
        TypeEnum[TypeEnum["Prestige"] = 'Prestige'] = "Prestige";
        TypeEnum[TypeEnum["Fracture"] = 'Fracture'] = "Fracture";
        TypeEnum[TypeEnum["Crush"] = 'Crush'] = "Crush";
        TypeEnum[TypeEnum["PeelOff"] = 'PeelOff'] = "PeelOff";
        TypeEnum[TypeEnum["PageCurlDouble"] = 'PageCurlDouble'] = "PageCurlDouble";
        TypeEnum[TypeEnum["PageCurlSingle"] = 'PageCurlSingle'] = "PageCurlSingle";
        TypeEnum[TypeEnum["Airplane"] = 'Airplane'] = "Airplane";
        TypeEnum[TypeEnum["Origami"] = 'Origami'] = "Origami";
        TypeEnum[TypeEnum["Morph"] = 'Morph'] = "Morph";
    })(TypeEnum = SlideShowTransition.TypeEnum || (SlideShowTransition.TypeEnum = {}));
    let SoundModeEnum;
    (function (SoundModeEnum) {
        SoundModeEnum[SoundModeEnum["StartSound"] = 'StartSound'] = "StartSound";
        SoundModeEnum[SoundModeEnum["StopPrevoiusSound"] = 'StopPrevoiusSound'] = "StopPrevoiusSound";
        SoundModeEnum[SoundModeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(SoundModeEnum = SlideShowTransition.SoundModeEnum || (SlideShowTransition.SoundModeEnum = {}));
    let SpeedEnum;
    (function (SpeedEnum) {
        SpeedEnum[SpeedEnum["Fast"] = 'Fast'] = "Fast";
        SpeedEnum[SpeedEnum["Medium"] = 'Medium'] = "Medium";
        SpeedEnum[SpeedEnum["Slow"] = 'Slow'] = "Slow";
    })(SpeedEnum = SlideShowTransition.SpeedEnum || (SlideShowTransition.SpeedEnum = {}));
    let CornerDirectionEnum;
    (function (CornerDirectionEnum) {
        CornerDirectionEnum[CornerDirectionEnum["LeftDown"] = 'LeftDown'] = "LeftDown";
        CornerDirectionEnum[CornerDirectionEnum["LeftUp"] = 'LeftUp'] = "LeftUp";
        CornerDirectionEnum[CornerDirectionEnum["RightDown"] = 'RightDown'] = "RightDown";
        CornerDirectionEnum[CornerDirectionEnum["RightUp"] = 'RightUp'] = "RightUp";
    })(CornerDirectionEnum = SlideShowTransition.CornerDirectionEnum || (SlideShowTransition.CornerDirectionEnum = {}));
    let EightDirectionEnum;
    (function (EightDirectionEnum) {
        EightDirectionEnum[EightDirectionEnum["LeftDown"] = 'LeftDown'] = "LeftDown";
        EightDirectionEnum[EightDirectionEnum["LeftUp"] = 'LeftUp'] = "LeftUp";
        EightDirectionEnum[EightDirectionEnum["RightDown"] = 'RightDown'] = "RightDown";
        EightDirectionEnum[EightDirectionEnum["RightUp"] = 'RightUp'] = "RightUp";
        EightDirectionEnum[EightDirectionEnum["Left"] = 'Left'] = "Left";
        EightDirectionEnum[EightDirectionEnum["Up"] = 'Up'] = "Up";
        EightDirectionEnum[EightDirectionEnum["Down"] = 'Down'] = "Down";
        EightDirectionEnum[EightDirectionEnum["Right"] = 'Right'] = "Right";
    })(EightDirectionEnum = SlideShowTransition.EightDirectionEnum || (SlideShowTransition.EightDirectionEnum = {}));
    let InOutDirectionEnum;
    (function (InOutDirectionEnum) {
        InOutDirectionEnum[InOutDirectionEnum["In"] = 'In'] = "In";
        InOutDirectionEnum[InOutDirectionEnum["Out"] = 'Out'] = "Out";
    })(InOutDirectionEnum = SlideShowTransition.InOutDirectionEnum || (SlideShowTransition.InOutDirectionEnum = {}));
    let SideDirectionEnum;
    (function (SideDirectionEnum) {
        SideDirectionEnum[SideDirectionEnum["Left"] = 'Left'] = "Left";
        SideDirectionEnum[SideDirectionEnum["Up"] = 'Up'] = "Up";
        SideDirectionEnum[SideDirectionEnum["Down"] = 'Down'] = "Down";
        SideDirectionEnum[SideDirectionEnum["Right"] = 'Right'] = "Right";
    })(SideDirectionEnum = SlideShowTransition.SideDirectionEnum || (SlideShowTransition.SideDirectionEnum = {}));
    let PatternEnum;
    (function (PatternEnum) {
        PatternEnum[PatternEnum["Diamond"] = 'Diamond'] = "Diamond";
        PatternEnum[PatternEnum["Hexagon"] = 'Hexagon'] = "Hexagon";
    })(PatternEnum = SlideShowTransition.PatternEnum || (SlideShowTransition.PatternEnum = {}));
    let LeftRightDirectionEnum;
    (function (LeftRightDirectionEnum) {
        LeftRightDirectionEnum[LeftRightDirectionEnum["Left"] = 'Left'] = "Left";
        LeftRightDirectionEnum[LeftRightDirectionEnum["Right"] = 'Right'] = "Right";
    })(LeftRightDirectionEnum = SlideShowTransition.LeftRightDirectionEnum || (SlideShowTransition.LeftRightDirectionEnum = {}));
    let MorphTypeEnum;
    (function (MorphTypeEnum) {
        MorphTypeEnum[MorphTypeEnum["ByObject"] = 'ByObject'] = "ByObject";
        MorphTypeEnum[MorphTypeEnum["ByWord"] = 'ByWord'] = "ByWord";
        MorphTypeEnum[MorphTypeEnum["ByChar"] = 'ByChar'] = "ByChar";
    })(MorphTypeEnum = SlideShowTransition.MorphTypeEnum || (SlideShowTransition.MorphTypeEnum = {}));
    let OrientationDirectionEnum;
    (function (OrientationDirectionEnum) {
        OrientationDirectionEnum[OrientationDirectionEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        OrientationDirectionEnum[OrientationDirectionEnum["Vertical"] = 'Vertical'] = "Vertical";
    })(OrientationDirectionEnum = SlideShowTransition.OrientationDirectionEnum || (SlideShowTransition.OrientationDirectionEnum = {}));
    let CornerAndCenterDirectionEnum;
    (function (CornerAndCenterDirectionEnum) {
        CornerAndCenterDirectionEnum[CornerAndCenterDirectionEnum["LeftDown"] = 'LeftDown'] = "LeftDown";
        CornerAndCenterDirectionEnum[CornerAndCenterDirectionEnum["LeftUp"] = 'LeftUp'] = "LeftUp";
        CornerAndCenterDirectionEnum[CornerAndCenterDirectionEnum["RightDown"] = 'RightDown'] = "RightDown";
        CornerAndCenterDirectionEnum[CornerAndCenterDirectionEnum["RightUp"] = 'RightUp'] = "RightUp";
        CornerAndCenterDirectionEnum[CornerAndCenterDirectionEnum["Center"] = 'Center'] = "Center";
    })(CornerAndCenterDirectionEnum = SlideShowTransition.CornerAndCenterDirectionEnum || (SlideShowTransition.CornerAndCenterDirectionEnum = {}));
    let ShredPatternEnum;
    (function (ShredPatternEnum) {
        ShredPatternEnum[ShredPatternEnum["Strip"] = 'Strip'] = "Strip";
        ShredPatternEnum[ShredPatternEnum["Rectangle"] = 'Rectangle'] = "Rectangle";
    })(ShredPatternEnum = SlideShowTransition.ShredPatternEnum || (SlideShowTransition.ShredPatternEnum = {}));
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        OrientationEnum[OrientationEnum["Vertical"] = 'Vertical'] = "Vertical";
    })(OrientationEnum = SlideShowTransition.OrientationEnum || (SlideShowTransition.OrientationEnum = {}));
})(SlideShowTransition = exports.SlideShowTransition || (exports.SlideShowTransition = {}));
/**
 * Slide list.
 */
class Slides extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Slides = Slides;
/**
 * Represents SmartArt shape resource.
 */
class SmartArt extends ShapeBase {
    constructor() {
        super();
        this.type = SmartArt.TypeEnum.SmartArt;
    }
}
exports.SmartArt = SmartArt;
(function (SmartArt) {
    let LayoutEnum;
    (function (LayoutEnum) {
        LayoutEnum[LayoutEnum["AccentProcess"] = 'AccentProcess'] = "AccentProcess";
        LayoutEnum[LayoutEnum["AccentedPicture"] = 'AccentedPicture'] = "AccentedPicture";
        LayoutEnum[LayoutEnum["AlternatingFlow"] = 'AlternatingFlow'] = "AlternatingFlow";
        LayoutEnum[LayoutEnum["AlternatingHexagons"] = 'AlternatingHexagons'] = "AlternatingHexagons";
        LayoutEnum[LayoutEnum["AlternatingPictureBlocks"] = 'AlternatingPictureBlocks'] = "AlternatingPictureBlocks";
        LayoutEnum[LayoutEnum["AlternatingPictureCircles"] = 'AlternatingPictureCircles'] = "AlternatingPictureCircles";
        LayoutEnum[LayoutEnum["ArrowRibbon"] = 'ArrowRibbon'] = "ArrowRibbon";
        LayoutEnum[LayoutEnum["AscendingPictureAccentProcess"] = 'AscendingPictureAccentProcess'] = "AscendingPictureAccentProcess";
        LayoutEnum[LayoutEnum["Balance"] = 'Balance'] = "Balance";
        LayoutEnum[LayoutEnum["BasicBendingProcess"] = 'BasicBendingProcess'] = "BasicBendingProcess";
        LayoutEnum[LayoutEnum["BasicBlockList"] = 'BasicBlockList'] = "BasicBlockList";
        LayoutEnum[LayoutEnum["BasicChevronProcess"] = 'BasicChevronProcess'] = "BasicChevronProcess";
        LayoutEnum[LayoutEnum["BasicCycle"] = 'BasicCycle'] = "BasicCycle";
        LayoutEnum[LayoutEnum["BasicMatrix"] = 'BasicMatrix'] = "BasicMatrix";
        LayoutEnum[LayoutEnum["BasicPie"] = 'BasicPie'] = "BasicPie";
        LayoutEnum[LayoutEnum["BasicProcess"] = 'BasicProcess'] = "BasicProcess";
        LayoutEnum[LayoutEnum["BasicPyramid"] = 'BasicPyramid'] = "BasicPyramid";
        LayoutEnum[LayoutEnum["BasicRadial"] = 'BasicRadial'] = "BasicRadial";
        LayoutEnum[LayoutEnum["BasicTarget"] = 'BasicTarget'] = "BasicTarget";
        LayoutEnum[LayoutEnum["BasicTimeline"] = 'BasicTimeline'] = "BasicTimeline";
        LayoutEnum[LayoutEnum["BasicVenn"] = 'BasicVenn'] = "BasicVenn";
        LayoutEnum[LayoutEnum["BendingPictureAccentList"] = 'BendingPictureAccentList'] = "BendingPictureAccentList";
        LayoutEnum[LayoutEnum["BendingPictureBlocks"] = 'BendingPictureBlocks'] = "BendingPictureBlocks";
        LayoutEnum[LayoutEnum["BendingPictureCaption"] = 'BendingPictureCaption'] = "BendingPictureCaption";
        LayoutEnum[LayoutEnum["BendingPictureCaptionList"] = 'BendingPictureCaptionList'] = "BendingPictureCaptionList";
        LayoutEnum[LayoutEnum["BendingPictureSemiTransparentText"] = 'BendingPictureSemiTransparentText'] = "BendingPictureSemiTransparentText";
        LayoutEnum[LayoutEnum["BlockCycle"] = 'BlockCycle'] = "BlockCycle";
        LayoutEnum[LayoutEnum["BubblePictureList"] = 'BubblePictureList'] = "BubblePictureList";
        LayoutEnum[LayoutEnum["CaptionedPictures"] = 'CaptionedPictures'] = "CaptionedPictures";
        LayoutEnum[LayoutEnum["ChevronList"] = 'ChevronList'] = "ChevronList";
        LayoutEnum[LayoutEnum["CircleAccentTimeline"] = 'CircleAccentTimeline'] = "CircleAccentTimeline";
        LayoutEnum[LayoutEnum["CircleArrowProcess"] = 'CircleArrowProcess'] = "CircleArrowProcess";
        LayoutEnum[LayoutEnum["CirclePictureHierarchy"] = 'CirclePictureHierarchy'] = "CirclePictureHierarchy";
        LayoutEnum[LayoutEnum["CircleRelationship"] = 'CircleRelationship'] = "CircleRelationship";
        LayoutEnum[LayoutEnum["CircularBendingProcess"] = 'CircularBendingProcess'] = "CircularBendingProcess";
        LayoutEnum[LayoutEnum["CircularPictureCallout"] = 'CircularPictureCallout'] = "CircularPictureCallout";
        LayoutEnum[LayoutEnum["ClosedChevronProcess"] = 'ClosedChevronProcess'] = "ClosedChevronProcess";
        LayoutEnum[LayoutEnum["ContinuousArrowProcess"] = 'ContinuousArrowProcess'] = "ContinuousArrowProcess";
        LayoutEnum[LayoutEnum["ContinuousBlockProcess"] = 'ContinuousBlockProcess'] = "ContinuousBlockProcess";
        LayoutEnum[LayoutEnum["ContinuousCycle"] = 'ContinuousCycle'] = "ContinuousCycle";
        LayoutEnum[LayoutEnum["ContinuousPictureList"] = 'ContinuousPictureList'] = "ContinuousPictureList";
        LayoutEnum[LayoutEnum["ConvergingArrows"] = 'ConvergingArrows'] = "ConvergingArrows";
        LayoutEnum[LayoutEnum["ConvergingRadial"] = 'ConvergingRadial'] = "ConvergingRadial";
        LayoutEnum[LayoutEnum["CounterbalanceArrows"] = 'CounterbalanceArrows'] = "CounterbalanceArrows";
        LayoutEnum[LayoutEnum["CycleMatrix"] = 'CycleMatrix'] = "CycleMatrix";
        LayoutEnum[LayoutEnum["DescendingBlockList"] = 'DescendingBlockList'] = "DescendingBlockList";
        LayoutEnum[LayoutEnum["DescendingProcess"] = 'DescendingProcess'] = "DescendingProcess";
        LayoutEnum[LayoutEnum["DetailedProcess"] = 'DetailedProcess'] = "DetailedProcess";
        LayoutEnum[LayoutEnum["DivergingArrows"] = 'DivergingArrows'] = "DivergingArrows";
        LayoutEnum[LayoutEnum["DivergingRadial"] = 'DivergingRadial'] = "DivergingRadial";
        LayoutEnum[LayoutEnum["Equation"] = 'Equation'] = "Equation";
        LayoutEnum[LayoutEnum["FramedTextPicture"] = 'FramedTextPicture'] = "FramedTextPicture";
        LayoutEnum[LayoutEnum["Funnel"] = 'Funnel'] = "Funnel";
        LayoutEnum[LayoutEnum["Gear"] = 'Gear'] = "Gear";
        LayoutEnum[LayoutEnum["GridMatrix"] = 'GridMatrix'] = "GridMatrix";
        LayoutEnum[LayoutEnum["GroupedList"] = 'GroupedList'] = "GroupedList";
        LayoutEnum[LayoutEnum["HalfCircleOrganizationChart"] = 'HalfCircleOrganizationChart'] = "HalfCircleOrganizationChart";
        LayoutEnum[LayoutEnum["HexagonCluster"] = 'HexagonCluster'] = "HexagonCluster";
        LayoutEnum[LayoutEnum["Hierarchy"] = 'Hierarchy'] = "Hierarchy";
        LayoutEnum[LayoutEnum["HierarchyList"] = 'HierarchyList'] = "HierarchyList";
        LayoutEnum[LayoutEnum["HorizontalBulletList"] = 'HorizontalBulletList'] = "HorizontalBulletList";
        LayoutEnum[LayoutEnum["HorizontalHierarchy"] = 'HorizontalHierarchy'] = "HorizontalHierarchy";
        LayoutEnum[LayoutEnum["HorizontalLabeledHierarchy"] = 'HorizontalLabeledHierarchy'] = "HorizontalLabeledHierarchy";
        LayoutEnum[LayoutEnum["HorizontalMultiLevelHierarchy"] = 'HorizontalMultiLevelHierarchy'] = "HorizontalMultiLevelHierarchy";
        LayoutEnum[LayoutEnum["HorizontalOrganizationChart"] = 'HorizontalOrganizationChart'] = "HorizontalOrganizationChart";
        LayoutEnum[LayoutEnum["HorizontalPictureList"] = 'HorizontalPictureList'] = "HorizontalPictureList";
        LayoutEnum[LayoutEnum["IncreasingArrowsProcess"] = 'IncreasingArrowsProcess'] = "IncreasingArrowsProcess";
        LayoutEnum[LayoutEnum["IncreasingCircleProcess"] = 'IncreasingCircleProcess'] = "IncreasingCircleProcess";
        LayoutEnum[LayoutEnum["InvertedPyramid"] = 'InvertedPyramid'] = "InvertedPyramid";
        LayoutEnum[LayoutEnum["LabeledHierarchy"] = 'LabeledHierarchy'] = "LabeledHierarchy";
        LayoutEnum[LayoutEnum["LinearVenn"] = 'LinearVenn'] = "LinearVenn";
        LayoutEnum[LayoutEnum["LinedList"] = 'LinedList'] = "LinedList";
        LayoutEnum[LayoutEnum["MultidirectionalCycle"] = 'MultidirectionalCycle'] = "MultidirectionalCycle";
        LayoutEnum[LayoutEnum["NameandTitleOrganizationChart"] = 'NameandTitleOrganizationChart'] = "NameandTitleOrganizationChart";
        LayoutEnum[LayoutEnum["NestedTarget"] = 'NestedTarget'] = "NestedTarget";
        LayoutEnum[LayoutEnum["NondirectionalCycle"] = 'NondirectionalCycle'] = "NondirectionalCycle";
        LayoutEnum[LayoutEnum["OpposingArrows"] = 'OpposingArrows'] = "OpposingArrows";
        LayoutEnum[LayoutEnum["OpposingIdeas"] = 'OpposingIdeas'] = "OpposingIdeas";
        LayoutEnum[LayoutEnum["OrganizationChart"] = 'OrganizationChart'] = "OrganizationChart";
        LayoutEnum[LayoutEnum["PhasedProcess"] = 'PhasedProcess'] = "PhasedProcess";
        LayoutEnum[LayoutEnum["PictureAccentBlocks"] = 'PictureAccentBlocks'] = "PictureAccentBlocks";
        LayoutEnum[LayoutEnum["PictureAccentList"] = 'PictureAccentList'] = "PictureAccentList";
        LayoutEnum[LayoutEnum["PictureAccentProcess"] = 'PictureAccentProcess'] = "PictureAccentProcess";
        LayoutEnum[LayoutEnum["PictureCaptionList"] = 'PictureCaptionList'] = "PictureCaptionList";
        LayoutEnum[LayoutEnum["PictureGrid"] = 'PictureGrid'] = "PictureGrid";
        LayoutEnum[LayoutEnum["PictureLineup"] = 'PictureLineup'] = "PictureLineup";
        LayoutEnum[LayoutEnum["PictureStrips"] = 'PictureStrips'] = "PictureStrips";
        LayoutEnum[LayoutEnum["PieProcess"] = 'PieProcess'] = "PieProcess";
        LayoutEnum[LayoutEnum["PlusandMinus"] = 'PlusandMinus'] = "PlusandMinus";
        LayoutEnum[LayoutEnum["ProcessArrows"] = 'ProcessArrows'] = "ProcessArrows";
        LayoutEnum[LayoutEnum["ProcessList"] = 'ProcessList'] = "ProcessList";
        LayoutEnum[LayoutEnum["PyramidList"] = 'PyramidList'] = "PyramidList";
        LayoutEnum[LayoutEnum["RadialCluster"] = 'RadialCluster'] = "RadialCluster";
        LayoutEnum[LayoutEnum["RadialCycle"] = 'RadialCycle'] = "RadialCycle";
        LayoutEnum[LayoutEnum["RadialList"] = 'RadialList'] = "RadialList";
        LayoutEnum[LayoutEnum["RadialVenn"] = 'RadialVenn'] = "RadialVenn";
        LayoutEnum[LayoutEnum["RandomToResultProcess"] = 'RandomToResultProcess'] = "RandomToResultProcess";
        LayoutEnum[LayoutEnum["RepeatingBendingProcess"] = 'RepeatingBendingProcess'] = "RepeatingBendingProcess";
        LayoutEnum[LayoutEnum["ReverseList"] = 'ReverseList'] = "ReverseList";
        LayoutEnum[LayoutEnum["SegmentedCycle"] = 'SegmentedCycle'] = "SegmentedCycle";
        LayoutEnum[LayoutEnum["SegmentedProcess"] = 'SegmentedProcess'] = "SegmentedProcess";
        LayoutEnum[LayoutEnum["SegmentedPyramid"] = 'SegmentedPyramid'] = "SegmentedPyramid";
        LayoutEnum[LayoutEnum["SnapshotPictureList"] = 'SnapshotPictureList'] = "SnapshotPictureList";
        LayoutEnum[LayoutEnum["SpiralPicture"] = 'SpiralPicture'] = "SpiralPicture";
        LayoutEnum[LayoutEnum["SquareAccentList"] = 'SquareAccentList'] = "SquareAccentList";
        LayoutEnum[LayoutEnum["StackedList"] = 'StackedList'] = "StackedList";
        LayoutEnum[LayoutEnum["StackedVenn"] = 'StackedVenn'] = "StackedVenn";
        LayoutEnum[LayoutEnum["StaggeredProcess"] = 'StaggeredProcess'] = "StaggeredProcess";
        LayoutEnum[LayoutEnum["StepDownProcess"] = 'StepDownProcess'] = "StepDownProcess";
        LayoutEnum[LayoutEnum["StepUpProcess"] = 'StepUpProcess'] = "StepUpProcess";
        LayoutEnum[LayoutEnum["SubStepProcess"] = 'SubStepProcess'] = "SubStepProcess";
        LayoutEnum[LayoutEnum["TableHierarchy"] = 'TableHierarchy'] = "TableHierarchy";
        LayoutEnum[LayoutEnum["TableList"] = 'TableList'] = "TableList";
        LayoutEnum[LayoutEnum["TargetList"] = 'TargetList'] = "TargetList";
        LayoutEnum[LayoutEnum["TextCycle"] = 'TextCycle'] = "TextCycle";
        LayoutEnum[LayoutEnum["TitlePictureLineup"] = 'TitlePictureLineup'] = "TitlePictureLineup";
        LayoutEnum[LayoutEnum["TitledMatrix"] = 'TitledMatrix'] = "TitledMatrix";
        LayoutEnum[LayoutEnum["TitledPictureAccentList"] = 'TitledPictureAccentList'] = "TitledPictureAccentList";
        LayoutEnum[LayoutEnum["TitledPictureBlocks"] = 'TitledPictureBlocks'] = "TitledPictureBlocks";
        LayoutEnum[LayoutEnum["TrapezoidList"] = 'TrapezoidList'] = "TrapezoidList";
        LayoutEnum[LayoutEnum["UpwardArrow"] = 'UpwardArrow'] = "UpwardArrow";
        LayoutEnum[LayoutEnum["VerticalAccentList"] = 'VerticalAccentList'] = "VerticalAccentList";
        LayoutEnum[LayoutEnum["VerticalArrowList"] = 'VerticalArrowList'] = "VerticalArrowList";
        LayoutEnum[LayoutEnum["VerticalBendingProcess"] = 'VerticalBendingProcess'] = "VerticalBendingProcess";
        LayoutEnum[LayoutEnum["VerticalBlockList"] = 'VerticalBlockList'] = "VerticalBlockList";
        LayoutEnum[LayoutEnum["VerticalBoxList"] = 'VerticalBoxList'] = "VerticalBoxList";
        LayoutEnum[LayoutEnum["VerticalBulletList"] = 'VerticalBulletList'] = "VerticalBulletList";
        LayoutEnum[LayoutEnum["VerticalChevronList"] = 'VerticalChevronList'] = "VerticalChevronList";
        LayoutEnum[LayoutEnum["VerticalCircleList"] = 'VerticalCircleList'] = "VerticalCircleList";
        LayoutEnum[LayoutEnum["VerticalCurvedList"] = 'VerticalCurvedList'] = "VerticalCurvedList";
        LayoutEnum[LayoutEnum["VerticalEquation"] = 'VerticalEquation'] = "VerticalEquation";
        LayoutEnum[LayoutEnum["VerticalPictureAccentList"] = 'VerticalPictureAccentList'] = "VerticalPictureAccentList";
        LayoutEnum[LayoutEnum["VerticalPictureList"] = 'VerticalPictureList'] = "VerticalPictureList";
        LayoutEnum[LayoutEnum["VerticalProcess"] = 'VerticalProcess'] = "VerticalProcess";
        LayoutEnum[LayoutEnum["Custom"] = 'Custom'] = "Custom";
        LayoutEnum[LayoutEnum["PictureOrganizationChart"] = 'PictureOrganizationChart'] = "PictureOrganizationChart";
    })(LayoutEnum = SmartArt.LayoutEnum || (SmartArt.LayoutEnum = {}));
    let QuickStyleEnum;
    (function (QuickStyleEnum) {
        QuickStyleEnum[QuickStyleEnum["SimpleFill"] = 'SimpleFill'] = "SimpleFill";
        QuickStyleEnum[QuickStyleEnum["WhiteOutline"] = 'WhiteOutline'] = "WhiteOutline";
        QuickStyleEnum[QuickStyleEnum["SubtleEffect"] = 'SubtleEffect'] = "SubtleEffect";
        QuickStyleEnum[QuickStyleEnum["ModerateEffect"] = 'ModerateEffect'] = "ModerateEffect";
        QuickStyleEnum[QuickStyleEnum["IntenceEffect"] = 'IntenceEffect'] = "IntenceEffect";
        QuickStyleEnum[QuickStyleEnum["Polished"] = 'Polished'] = "Polished";
        QuickStyleEnum[QuickStyleEnum["Inset"] = 'Inset'] = "Inset";
        QuickStyleEnum[QuickStyleEnum["Cartoon"] = 'Cartoon'] = "Cartoon";
        QuickStyleEnum[QuickStyleEnum["Powder"] = 'Powder'] = "Powder";
        QuickStyleEnum[QuickStyleEnum["BrickScene"] = 'BrickScene'] = "BrickScene";
        QuickStyleEnum[QuickStyleEnum["FlatScene"] = 'FlatScene'] = "FlatScene";
        QuickStyleEnum[QuickStyleEnum["MetallicScene"] = 'MetallicScene'] = "MetallicScene";
        QuickStyleEnum[QuickStyleEnum["SunsetScene"] = 'SunsetScene'] = "SunsetScene";
        QuickStyleEnum[QuickStyleEnum["BirdsEyeScene"] = 'BirdsEyeScene'] = "BirdsEyeScene";
    })(QuickStyleEnum = SmartArt.QuickStyleEnum || (SmartArt.QuickStyleEnum = {}));
    let ColorStyleEnum;
    (function (ColorStyleEnum) {
        ColorStyleEnum[ColorStyleEnum["Dark1Outline"] = 'Dark1Outline'] = "Dark1Outline";
        ColorStyleEnum[ColorStyleEnum["Dark2Outline"] = 'Dark2Outline'] = "Dark2Outline";
        ColorStyleEnum[ColorStyleEnum["DarkFill"] = 'DarkFill'] = "DarkFill";
        ColorStyleEnum[ColorStyleEnum["ColorfulAccentColors"] = 'ColorfulAccentColors'] = "ColorfulAccentColors";
        ColorStyleEnum[ColorStyleEnum["ColorfulAccentColors2to3"] = 'ColorfulAccentColors2to3'] = "ColorfulAccentColors2to3";
        ColorStyleEnum[ColorStyleEnum["ColorfulAccentColors3to4"] = 'ColorfulAccentColors3to4'] = "ColorfulAccentColors3to4";
        ColorStyleEnum[ColorStyleEnum["ColorfulAccentColors4to5"] = 'ColorfulAccentColors4to5'] = "ColorfulAccentColors4to5";
        ColorStyleEnum[ColorStyleEnum["ColorfulAccentColors5to6"] = 'ColorfulAccentColors5to6'] = "ColorfulAccentColors5to6";
        ColorStyleEnum[ColorStyleEnum["ColoredOutlineAccent1"] = 'ColoredOutlineAccent1'] = "ColoredOutlineAccent1";
        ColorStyleEnum[ColorStyleEnum["ColoredFillAccent1"] = 'ColoredFillAccent1'] = "ColoredFillAccent1";
        ColorStyleEnum[ColorStyleEnum["GradientRangeAccent1"] = 'GradientRangeAccent1'] = "GradientRangeAccent1";
        ColorStyleEnum[ColorStyleEnum["GradientLoopAccent1"] = 'GradientLoopAccent1'] = "GradientLoopAccent1";
        ColorStyleEnum[ColorStyleEnum["TransparentGradientRangeAccent1"] = 'TransparentGradientRangeAccent1'] = "TransparentGradientRangeAccent1";
        ColorStyleEnum[ColorStyleEnum["ColoredOutlineAccent2"] = 'ColoredOutlineAccent2'] = "ColoredOutlineAccent2";
        ColorStyleEnum[ColorStyleEnum["ColoredFillAccent2"] = 'ColoredFillAccent2'] = "ColoredFillAccent2";
        ColorStyleEnum[ColorStyleEnum["GradientRangeAccent2"] = 'GradientRangeAccent2'] = "GradientRangeAccent2";
        ColorStyleEnum[ColorStyleEnum["GradientLoopAccent2"] = 'GradientLoopAccent2'] = "GradientLoopAccent2";
        ColorStyleEnum[ColorStyleEnum["TransparentGradientRangeAccent2"] = 'TransparentGradientRangeAccent2'] = "TransparentGradientRangeAccent2";
        ColorStyleEnum[ColorStyleEnum["ColoredOutlineAccent3"] = 'ColoredOutlineAccent3'] = "ColoredOutlineAccent3";
        ColorStyleEnum[ColorStyleEnum["ColoredFillAccent3"] = 'ColoredFillAccent3'] = "ColoredFillAccent3";
        ColorStyleEnum[ColorStyleEnum["GradientRangeAccent3"] = 'GradientRangeAccent3'] = "GradientRangeAccent3";
        ColorStyleEnum[ColorStyleEnum["GradientLoopAccent3"] = 'GradientLoopAccent3'] = "GradientLoopAccent3";
        ColorStyleEnum[ColorStyleEnum["TransparentGradientRangeAccent3"] = 'TransparentGradientRangeAccent3'] = "TransparentGradientRangeAccent3";
        ColorStyleEnum[ColorStyleEnum["ColoredOutlineAccent4"] = 'ColoredOutlineAccent4'] = "ColoredOutlineAccent4";
        ColorStyleEnum[ColorStyleEnum["ColoredFillAccent4"] = 'ColoredFillAccent4'] = "ColoredFillAccent4";
        ColorStyleEnum[ColorStyleEnum["GradientRangeAccent4"] = 'GradientRangeAccent4'] = "GradientRangeAccent4";
        ColorStyleEnum[ColorStyleEnum["GradientLoopAccent4"] = 'GradientLoopAccent4'] = "GradientLoopAccent4";
        ColorStyleEnum[ColorStyleEnum["TransparentGradientRangeAccent4"] = 'TransparentGradientRangeAccent4'] = "TransparentGradientRangeAccent4";
        ColorStyleEnum[ColorStyleEnum["ColoredOutlineAccent5"] = 'ColoredOutlineAccent5'] = "ColoredOutlineAccent5";
        ColorStyleEnum[ColorStyleEnum["ColoredFillAccent5"] = 'ColoredFillAccent5'] = "ColoredFillAccent5";
        ColorStyleEnum[ColorStyleEnum["GradientRangeAccent5"] = 'GradientRangeAccent5'] = "GradientRangeAccent5";
        ColorStyleEnum[ColorStyleEnum["GradientLoopAccent5"] = 'GradientLoopAccent5'] = "GradientLoopAccent5";
        ColorStyleEnum[ColorStyleEnum["TransparentGradientRangeAccent5"] = 'TransparentGradientRangeAccent5'] = "TransparentGradientRangeAccent5";
        ColorStyleEnum[ColorStyleEnum["ColoredOutlineAccent6"] = 'ColoredOutlineAccent6'] = "ColoredOutlineAccent6";
        ColorStyleEnum[ColorStyleEnum["ColoredFillAccent6"] = 'ColoredFillAccent6'] = "ColoredFillAccent6";
        ColorStyleEnum[ColorStyleEnum["GradientRangeAccent6"] = 'GradientRangeAccent6'] = "GradientRangeAccent6";
        ColorStyleEnum[ColorStyleEnum["GradientLoopAccent6"] = 'GradientLoopAccent6'] = "GradientLoopAccent6";
        ColorStyleEnum[ColorStyleEnum["TransparentGradientRangeAccent6"] = 'TransparentGradientRangeAccent6'] = "TransparentGradientRangeAccent6";
    })(ColorStyleEnum = SmartArt.ColorStyleEnum || (SmartArt.ColorStyleEnum = {}));
})(SmartArt = exports.SmartArt || (exports.SmartArt = {}));
/**
 * Smart art node.
 */
class SmartArtNode {
}
exports.SmartArtNode = SmartArtNode;
(function (SmartArtNode) {
    let OrgChartLayoutEnum;
    (function (OrgChartLayoutEnum) {
        OrgChartLayoutEnum[OrgChartLayoutEnum["Initial"] = 'Initial'] = "Initial";
        OrgChartLayoutEnum[OrgChartLayoutEnum["Standart"] = 'Standart'] = "Standart";
        OrgChartLayoutEnum[OrgChartLayoutEnum["BothHanging"] = 'BothHanging'] = "BothHanging";
        OrgChartLayoutEnum[OrgChartLayoutEnum["LeftHanging"] = 'LeftHanging'] = "LeftHanging";
        OrgChartLayoutEnum[OrgChartLayoutEnum["RightHanging"] = 'RightHanging'] = "RightHanging";
    })(OrgChartLayoutEnum = SmartArtNode.OrgChartLayoutEnum || (SmartArtNode.OrgChartLayoutEnum = {}));
})(SmartArtNode = exports.SmartArtNode || (exports.SmartArtNode = {}));
/**
 * Represents SmartArt resource.
 */
class SmartArtShape extends GeometryShape {
    constructor() {
        super();
        this.type = SmartArtShape.TypeEnum.SmartArtShape;
    }
}
exports.SmartArtShape = SmartArtShape;
/**
 * Represents soft edge effect
 */
class SoftEdgeEffect {
}
exports.SoftEdgeEffect = SoftEdgeEffect;
/**
 * Represents solid fill format
 */
class SolidFill extends FillFormat {
    constructor() {
        super();
        this.type = SolidFill.TypeEnum.Solid;
    }
}
exports.SolidFill = SolidFill;
/**
 *
 */
/**
*
*/
var SpecialSlideType;
(function (SpecialSlideType) {
    SpecialSlideType[SpecialSlideType["MasterSlide"] = 'MasterSlide'] = "MasterSlide";
    SpecialSlideType[SpecialSlideType["LayoutSlide"] = 'LayoutSlide'] = "LayoutSlide";
    SpecialSlideType[SpecialSlideType["NotesSlide"] = 'NotesSlide'] = "NotesSlide";
})(SpecialSlideType = exports.SpecialSlideType || (exports.SpecialSlideType = {}));
/**
 * Split document result.
 */
class SplitDocumentResult extends ResourceBase {
    constructor() {
        super();
    }
}
exports.SplitDocumentResult = SplitDocumentResult;
/**
 * Storage exists
 */
class StorageExist {
}
exports.StorageExist = StorageExist;
/**
 * Subscript object
 */
class SubscriptElement extends MathElement {
    constructor() {
        super();
        this.type = SubscriptElement.TypeEnum.SubscriptElement;
    }
}
exports.SubscriptElement = SubscriptElement;
/**
 * Summary zoom frame.
 */
class SummaryZoomFrame extends ShapeBase {
    constructor() {
        super();
        this.type = SummaryZoomFrame.TypeEnum.SummaryZoomFrame;
    }
}
exports.SummaryZoomFrame = SummaryZoomFrame;
(function (SummaryZoomFrame) {
    let ZoomLayoutEnum;
    (function (ZoomLayoutEnum) {
        ZoomLayoutEnum[ZoomLayoutEnum["GridLayout"] = 'GridLayout'] = "GridLayout";
        ZoomLayoutEnum[ZoomLayoutEnum["FixedLayout"] = 'FixedLayout'] = "FixedLayout";
    })(ZoomLayoutEnum = SummaryZoomFrame.ZoomLayoutEnum || (SummaryZoomFrame.ZoomLayoutEnum = {}));
})(SummaryZoomFrame = exports.SummaryZoomFrame || (exports.SummaryZoomFrame = {}));
/**
 * Represents summary zoom section
 */
class SummaryZoomSection extends SectionZoomFrame {
    constructor() {
        super();
        this.type = SummaryZoomSection.TypeEnum.SummaryZoomSection;
    }
}
exports.SummaryZoomSection = SummaryZoomSection;
/**
 * Subscript object
 */
class SuperscriptElement extends MathElement {
    constructor() {
        super();
        this.type = SuperscriptElement.TypeEnum.SuperscriptElement;
    }
}
exports.SuperscriptElement = SuperscriptElement;
/**
 * Provides options that control how a presentation is saved in SVG format.
 */
class SvgExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'svg';
    }
}
exports.SvgExportOptions = SvgExportOptions;
(function (SvgExportOptions) {
    let PicturesCompressionEnum;
    (function (PicturesCompressionEnum) {
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi330"] = 'Dpi330'] = "Dpi330";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi220"] = 'Dpi220'] = "Dpi220";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi150"] = 'Dpi150'] = "Dpi150";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi96"] = 'Dpi96'] = "Dpi96";
        PicturesCompressionEnum[PicturesCompressionEnum["Dpi72"] = 'Dpi72'] = "Dpi72";
        PicturesCompressionEnum[PicturesCompressionEnum["DocumentResolution"] = 'DocumentResolution'] = "DocumentResolution";
    })(PicturesCompressionEnum = SvgExportOptions.PicturesCompressionEnum || (SvgExportOptions.PicturesCompressionEnum = {}));
    let ExternalFontsHandlingEnum;
    (function (ExternalFontsHandlingEnum) {
        ExternalFontsHandlingEnum[ExternalFontsHandlingEnum["AddLinksToFontFiles"] = 'AddLinksToFontFiles'] = "AddLinksToFontFiles";
        ExternalFontsHandlingEnum[ExternalFontsHandlingEnum["Embed"] = 'Embed'] = "Embed";
        ExternalFontsHandlingEnum[ExternalFontsHandlingEnum["Vectorize"] = 'Vectorize'] = "Vectorize";
    })(ExternalFontsHandlingEnum = SvgExportOptions.ExternalFontsHandlingEnum || (SvgExportOptions.ExternalFontsHandlingEnum = {}));
})(SvgExportOptions = exports.SvgExportOptions || (exports.SvgExportOptions = {}));
/**
 * Provides options that control how a presentation is saved in SWF format.
 */
class SwfExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'swf';
    }
}
exports.SwfExportOptions = SwfExportOptions;
(function (SwfExportOptions) {
    let NotesPositionEnum;
    (function (NotesPositionEnum) {
        NotesPositionEnum[NotesPositionEnum["None"] = 'None'] = "None";
        NotesPositionEnum[NotesPositionEnum["BottomFull"] = 'BottomFull'] = "BottomFull";
        NotesPositionEnum[NotesPositionEnum["BottomTruncated"] = 'BottomTruncated'] = "BottomTruncated";
    })(NotesPositionEnum = SwfExportOptions.NotesPositionEnum || (SwfExportOptions.NotesPositionEnum = {}));
    let CommentsPositionEnum;
    (function (CommentsPositionEnum) {
        CommentsPositionEnum[CommentsPositionEnum["None"] = 'None'] = "None";
        CommentsPositionEnum[CommentsPositionEnum["Bottom"] = 'Bottom'] = "Bottom";
        CommentsPositionEnum[CommentsPositionEnum["Right"] = 'Right'] = "Right";
    })(CommentsPositionEnum = SwfExportOptions.CommentsPositionEnum || (SwfExportOptions.CommentsPositionEnum = {}));
})(SwfExportOptions = exports.SwfExportOptions || (exports.SwfExportOptions = {}));
/**
 * Represents Table shape resource.
 */
class Table extends ShapeBase {
    constructor() {
        super();
        this.type = Table.TypeEnum.Table;
    }
}
exports.Table = Table;
(function (Table) {
    let StyleEnum;
    (function (StyleEnum) {
        StyleEnum[StyleEnum["None"] = 'None'] = "None";
        StyleEnum[StyleEnum["MediumStyle2Accent1"] = 'MediumStyle2Accent1'] = "MediumStyle2Accent1";
        StyleEnum[StyleEnum["MediumStyle2"] = 'MediumStyle2'] = "MediumStyle2";
        StyleEnum[StyleEnum["NoStyleNoGrid"] = 'NoStyleNoGrid'] = "NoStyleNoGrid";
        StyleEnum[StyleEnum["ThemedStyle1Accent1"] = 'ThemedStyle1Accent1'] = "ThemedStyle1Accent1";
        StyleEnum[StyleEnum["ThemedStyle1Accent2"] = 'ThemedStyle1Accent2'] = "ThemedStyle1Accent2";
        StyleEnum[StyleEnum["ThemedStyle1Accent3"] = 'ThemedStyle1Accent3'] = "ThemedStyle1Accent3";
        StyleEnum[StyleEnum["ThemedStyle1Accent4"] = 'ThemedStyle1Accent4'] = "ThemedStyle1Accent4";
        StyleEnum[StyleEnum["ThemedStyle1Accent5"] = 'ThemedStyle1Accent5'] = "ThemedStyle1Accent5";
        StyleEnum[StyleEnum["ThemedStyle1Accent6"] = 'ThemedStyle1Accent6'] = "ThemedStyle1Accent6";
        StyleEnum[StyleEnum["NoStyleTableGrid"] = 'NoStyleTableGrid'] = "NoStyleTableGrid";
        StyleEnum[StyleEnum["ThemedStyle2Accent1"] = 'ThemedStyle2Accent1'] = "ThemedStyle2Accent1";
        StyleEnum[StyleEnum["ThemedStyle2Accent2"] = 'ThemedStyle2Accent2'] = "ThemedStyle2Accent2";
        StyleEnum[StyleEnum["ThemedStyle2Accent3"] = 'ThemedStyle2Accent3'] = "ThemedStyle2Accent3";
        StyleEnum[StyleEnum["ThemedStyle2Accent4"] = 'ThemedStyle2Accent4'] = "ThemedStyle2Accent4";
        StyleEnum[StyleEnum["ThemedStyle2Accent5"] = 'ThemedStyle2Accent5'] = "ThemedStyle2Accent5";
        StyleEnum[StyleEnum["ThemedStyle2Accent6"] = 'ThemedStyle2Accent6'] = "ThemedStyle2Accent6";
        StyleEnum[StyleEnum["LightStyle1"] = 'LightStyle1'] = "LightStyle1";
        StyleEnum[StyleEnum["LightStyle1Accent1"] = 'LightStyle1Accent1'] = "LightStyle1Accent1";
        StyleEnum[StyleEnum["LightStyle1Accent2"] = 'LightStyle1Accent2'] = "LightStyle1Accent2";
        StyleEnum[StyleEnum["LightStyle1Accent3"] = 'LightStyle1Accent3'] = "LightStyle1Accent3";
        StyleEnum[StyleEnum["LightStyle1Accent4"] = 'LightStyle1Accent4'] = "LightStyle1Accent4";
        StyleEnum[StyleEnum["LightStyle2Accent5"] = 'LightStyle2Accent5'] = "LightStyle2Accent5";
        StyleEnum[StyleEnum["LightStyle1Accent6"] = 'LightStyle1Accent6'] = "LightStyle1Accent6";
        StyleEnum[StyleEnum["LightStyle2"] = 'LightStyle2'] = "LightStyle2";
        StyleEnum[StyleEnum["LightStyle2Accent1"] = 'LightStyle2Accent1'] = "LightStyle2Accent1";
        StyleEnum[StyleEnum["LightStyle2Accent2"] = 'LightStyle2Accent2'] = "LightStyle2Accent2";
        StyleEnum[StyleEnum["LightStyle2Accent3"] = 'LightStyle2Accent3'] = "LightStyle2Accent3";
        StyleEnum[StyleEnum["MediumStyle2Accent3"] = 'MediumStyle2Accent3'] = "MediumStyle2Accent3";
        StyleEnum[StyleEnum["MediumStyle2Accent4"] = 'MediumStyle2Accent4'] = "MediumStyle2Accent4";
        StyleEnum[StyleEnum["MediumStyle2Accent5"] = 'MediumStyle2Accent5'] = "MediumStyle2Accent5";
        StyleEnum[StyleEnum["LightStyle2Accent6"] = 'LightStyle2Accent6'] = "LightStyle2Accent6";
        StyleEnum[StyleEnum["LightStyle2Accent4"] = 'LightStyle2Accent4'] = "LightStyle2Accent4";
        StyleEnum[StyleEnum["LightStyle3"] = 'LightStyle3'] = "LightStyle3";
        StyleEnum[StyleEnum["LightStyle3Accent1"] = 'LightStyle3Accent1'] = "LightStyle3Accent1";
        StyleEnum[StyleEnum["MediumStyle2Accent2"] = 'MediumStyle2Accent2'] = "MediumStyle2Accent2";
        StyleEnum[StyleEnum["LightStyle3Accent2"] = 'LightStyle3Accent2'] = "LightStyle3Accent2";
        StyleEnum[StyleEnum["LightStyle3Accent3"] = 'LightStyle3Accent3'] = "LightStyle3Accent3";
        StyleEnum[StyleEnum["LightStyle3Accent4"] = 'LightStyle3Accent4'] = "LightStyle3Accent4";
        StyleEnum[StyleEnum["LightStyle3Accent5"] = 'LightStyle3Accent5'] = "LightStyle3Accent5";
        StyleEnum[StyleEnum["LightStyle3Accent6"] = 'LightStyle3Accent6'] = "LightStyle3Accent6";
        StyleEnum[StyleEnum["MediumStyle1"] = 'MediumStyle1'] = "MediumStyle1";
        StyleEnum[StyleEnum["MediumStyle1Accent1"] = 'MediumStyle1Accent1'] = "MediumStyle1Accent1";
        StyleEnum[StyleEnum["MediumStyle1Accent2"] = 'MediumStyle1Accent2'] = "MediumStyle1Accent2";
        StyleEnum[StyleEnum["MediumStyle1Accent3"] = 'MediumStyle1Accent3'] = "MediumStyle1Accent3";
        StyleEnum[StyleEnum["MediumStyle1Accent4"] = 'MediumStyle1Accent4'] = "MediumStyle1Accent4";
        StyleEnum[StyleEnum["MediumStyle1Accent5"] = 'MediumStyle1Accent5'] = "MediumStyle1Accent5";
        StyleEnum[StyleEnum["MediumStyle1Accent6"] = 'MediumStyle1Accent6'] = "MediumStyle1Accent6";
        StyleEnum[StyleEnum["MediumStyle2Accent6"] = 'MediumStyle2Accent6'] = "MediumStyle2Accent6";
        StyleEnum[StyleEnum["MediumStyle3"] = 'MediumStyle3'] = "MediumStyle3";
        StyleEnum[StyleEnum["MediumStyle3Accent1"] = 'MediumStyle3Accent1'] = "MediumStyle3Accent1";
        StyleEnum[StyleEnum["MediumStyle3Accent2"] = 'MediumStyle3Accent2'] = "MediumStyle3Accent2";
        StyleEnum[StyleEnum["MediumStyle3Accent3"] = 'MediumStyle3Accent3'] = "MediumStyle3Accent3";
        StyleEnum[StyleEnum["MediumStyle3Accent4"] = 'MediumStyle3Accent4'] = "MediumStyle3Accent4";
        StyleEnum[StyleEnum["MediumStyle3Accent5"] = 'MediumStyle3Accent5'] = "MediumStyle3Accent5";
        StyleEnum[StyleEnum["MediumStyle3Accent6"] = 'MediumStyle3Accent6'] = "MediumStyle3Accent6";
        StyleEnum[StyleEnum["MediumStyle4"] = 'MediumStyle4'] = "MediumStyle4";
        StyleEnum[StyleEnum["MediumStyle4Accent1"] = 'MediumStyle4Accent1'] = "MediumStyle4Accent1";
        StyleEnum[StyleEnum["MediumStyle4Accent2"] = 'MediumStyle4Accent2'] = "MediumStyle4Accent2";
        StyleEnum[StyleEnum["MediumStyle4Accent3"] = 'MediumStyle4Accent3'] = "MediumStyle4Accent3";
        StyleEnum[StyleEnum["MediumStyle4Accent4"] = 'MediumStyle4Accent4'] = "MediumStyle4Accent4";
        StyleEnum[StyleEnum["MediumStyle4Accent5"] = 'MediumStyle4Accent5'] = "MediumStyle4Accent5";
        StyleEnum[StyleEnum["MediumStyle4Accent6"] = 'MediumStyle4Accent6'] = "MediumStyle4Accent6";
        StyleEnum[StyleEnum["DarkStyle1"] = 'DarkStyle1'] = "DarkStyle1";
        StyleEnum[StyleEnum["DarkStyle1Accent1"] = 'DarkStyle1Accent1'] = "DarkStyle1Accent1";
        StyleEnum[StyleEnum["DarkStyle1Accent2"] = 'DarkStyle1Accent2'] = "DarkStyle1Accent2";
        StyleEnum[StyleEnum["DarkStyle1Accent3"] = 'DarkStyle1Accent3'] = "DarkStyle1Accent3";
        StyleEnum[StyleEnum["DarkStyle1Accent4"] = 'DarkStyle1Accent4'] = "DarkStyle1Accent4";
        StyleEnum[StyleEnum["DarkStyle1Accent5"] = 'DarkStyle1Accent5'] = "DarkStyle1Accent5";
        StyleEnum[StyleEnum["DarkStyle1Accent6"] = 'DarkStyle1Accent6'] = "DarkStyle1Accent6";
        StyleEnum[StyleEnum["DarkStyle2"] = 'DarkStyle2'] = "DarkStyle2";
        StyleEnum[StyleEnum["DarkStyle2Accent1Accent2"] = 'DarkStyle2Accent1Accent2'] = "DarkStyle2Accent1Accent2";
        StyleEnum[StyleEnum["DarkStyle2Accent3Accent4"] = 'DarkStyle2Accent3Accent4'] = "DarkStyle2Accent3Accent4";
        StyleEnum[StyleEnum["DarkStyle2Accent5Accent6"] = 'DarkStyle2Accent5Accent6'] = "DarkStyle2Accent5Accent6";
        StyleEnum[StyleEnum["LightStyle1Accent5"] = 'LightStyle1Accent5'] = "LightStyle1Accent5";
        StyleEnum[StyleEnum["Custom"] = 'Custom'] = "Custom";
    })(StyleEnum = Table.StyleEnum || (Table.StyleEnum = {}));
})(Table = exports.Table || (exports.Table = {}));
/**
 * Represents one cell of table.
 */
class TableCell {
}
exports.TableCell = TableCell;
(function (TableCell) {
    let TextAnchorTypeEnum;
    (function (TextAnchorTypeEnum) {
        TextAnchorTypeEnum[TextAnchorTypeEnum["Top"] = 'Top'] = "Top";
        TextAnchorTypeEnum[TextAnchorTypeEnum["Center"] = 'Center'] = "Center";
        TextAnchorTypeEnum[TextAnchorTypeEnum["Bottom"] = 'Bottom'] = "Bottom";
        TextAnchorTypeEnum[TextAnchorTypeEnum["Justified"] = 'Justified'] = "Justified";
        TextAnchorTypeEnum[TextAnchorTypeEnum["Distributed"] = 'Distributed'] = "Distributed";
        TextAnchorTypeEnum[TextAnchorTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TextAnchorTypeEnum = TableCell.TextAnchorTypeEnum || (TableCell.TextAnchorTypeEnum = {}));
    let TextVerticalTypeEnum;
    (function (TextVerticalTypeEnum) {
        TextVerticalTypeEnum[TextVerticalTypeEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        TextVerticalTypeEnum[TextVerticalTypeEnum["Vertical"] = 'Vertical'] = "Vertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["Vertical270"] = 'Vertical270'] = "Vertical270";
        TextVerticalTypeEnum[TextVerticalTypeEnum["WordArtVertical"] = 'WordArtVertical'] = "WordArtVertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["EastAsianVertical"] = 'EastAsianVertical'] = "EastAsianVertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["MongolianVertical"] = 'MongolianVertical'] = "MongolianVertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["WordArtVerticalRightToLeft"] = 'WordArtVerticalRightToLeft'] = "WordArtVerticalRightToLeft";
        TextVerticalTypeEnum[TextVerticalTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TextVerticalTypeEnum = TableCell.TextVerticalTypeEnum || (TableCell.TextVerticalTypeEnum = {}));
})(TableCell = exports.TableCell || (exports.TableCell = {}));
/**
 * Table cells merge options
 */
class TableCellMergeOptions {
}
exports.TableCellMergeOptions = TableCellMergeOptions;
/**
 * Table cell split type
 */
/**
* Table cell split type
*/
var TableCellSplitType;
(function (TableCellSplitType) {
    TableCellSplitType[TableCellSplitType["SplitByWidth"] = 'SplitByWidth'] = "SplitByWidth";
    TableCellSplitType[TableCellSplitType["SplitByHeight"] = 'SplitByHeight'] = "SplitByHeight";
    TableCellSplitType[TableCellSplitType["SplitByColSpan"] = 'SplitByColSpan'] = "SplitByColSpan";
    TableCellSplitType[TableCellSplitType["SplitByRowSpan"] = 'SplitByRowSpan'] = "SplitByRowSpan";
})(TableCellSplitType = exports.TableCellSplitType || (exports.TableCellSplitType = {}));
/**
 * Table column.
 */
class TableColumn {
}
exports.TableColumn = TableColumn;
/**
 * Table Row.
 */
class TableRow {
}
exports.TableRow = TableRow;
/**
 * Represents text bounds within a paragraph or portion.
 */
class TextBounds {
}
exports.TextBounds = TextBounds;
/**
 * Mathematical text
 */
class TextElement extends MathElement {
    constructor() {
        super();
        this.type = TextElement.TypeEnum.Text;
    }
}
exports.TextElement = TextElement;
/**
 * Contains the TextFrame's formatting properties.
 */
class TextFrameFormat {
}
exports.TextFrameFormat = TextFrameFormat;
(function (TextFrameFormat) {
    let TransformEnum;
    (function (TransformEnum) {
        TransformEnum[TransformEnum["None"] = 'None'] = "None";
        TransformEnum[TransformEnum["Plain"] = 'Plain'] = "Plain";
        TransformEnum[TransformEnum["Stop"] = 'Stop'] = "Stop";
        TransformEnum[TransformEnum["Triangle"] = 'Triangle'] = "Triangle";
        TransformEnum[TransformEnum["TriangleInverted"] = 'TriangleInverted'] = "TriangleInverted";
        TransformEnum[TransformEnum["Chevron"] = 'Chevron'] = "Chevron";
        TransformEnum[TransformEnum["ChevronInverted"] = 'ChevronInverted'] = "ChevronInverted";
        TransformEnum[TransformEnum["RingInside"] = 'RingInside'] = "RingInside";
        TransformEnum[TransformEnum["RingOutside"] = 'RingOutside'] = "RingOutside";
        TransformEnum[TransformEnum["ArchUp"] = 'ArchUp'] = "ArchUp";
        TransformEnum[TransformEnum["ArchDown"] = 'ArchDown'] = "ArchDown";
        TransformEnum[TransformEnum["Circle"] = 'Circle'] = "Circle";
        TransformEnum[TransformEnum["Button"] = 'Button'] = "Button";
        TransformEnum[TransformEnum["ArchUpPour"] = 'ArchUpPour'] = "ArchUpPour";
        TransformEnum[TransformEnum["ArchDownPour"] = 'ArchDownPour'] = "ArchDownPour";
        TransformEnum[TransformEnum["CirclePour"] = 'CirclePour'] = "CirclePour";
        TransformEnum[TransformEnum["ButtonPour"] = 'ButtonPour'] = "ButtonPour";
        TransformEnum[TransformEnum["CurveUp"] = 'CurveUp'] = "CurveUp";
        TransformEnum[TransformEnum["CurveDown"] = 'CurveDown'] = "CurveDown";
        TransformEnum[TransformEnum["CanUp"] = 'CanUp'] = "CanUp";
        TransformEnum[TransformEnum["CanDown"] = 'CanDown'] = "CanDown";
        TransformEnum[TransformEnum["Wave1"] = 'Wave1'] = "Wave1";
        TransformEnum[TransformEnum["Wave2"] = 'Wave2'] = "Wave2";
        TransformEnum[TransformEnum["DoubleWave1"] = 'DoubleWave1'] = "DoubleWave1";
        TransformEnum[TransformEnum["Wave4"] = 'Wave4'] = "Wave4";
        TransformEnum[TransformEnum["Inflate"] = 'Inflate'] = "Inflate";
        TransformEnum[TransformEnum["Deflate"] = 'Deflate'] = "Deflate";
        TransformEnum[TransformEnum["InflateBottom"] = 'InflateBottom'] = "InflateBottom";
        TransformEnum[TransformEnum["DeflateBottom"] = 'DeflateBottom'] = "DeflateBottom";
        TransformEnum[TransformEnum["InflateTop"] = 'InflateTop'] = "InflateTop";
        TransformEnum[TransformEnum["DeflateTop"] = 'DeflateTop'] = "DeflateTop";
        TransformEnum[TransformEnum["DeflateInflate"] = 'DeflateInflate'] = "DeflateInflate";
        TransformEnum[TransformEnum["DeflateInflateDeflate"] = 'DeflateInflateDeflate'] = "DeflateInflateDeflate";
        TransformEnum[TransformEnum["FadeRight"] = 'FadeRight'] = "FadeRight";
        TransformEnum[TransformEnum["FadeLeft"] = 'FadeLeft'] = "FadeLeft";
        TransformEnum[TransformEnum["FadeUp"] = 'FadeUp'] = "FadeUp";
        TransformEnum[TransformEnum["FadeDown"] = 'FadeDown'] = "FadeDown";
        TransformEnum[TransformEnum["SlantUp"] = 'SlantUp'] = "SlantUp";
        TransformEnum[TransformEnum["SlantDown"] = 'SlantDown'] = "SlantDown";
        TransformEnum[TransformEnum["CascadeUp"] = 'CascadeUp'] = "CascadeUp";
        TransformEnum[TransformEnum["CascadeDown"] = 'CascadeDown'] = "CascadeDown";
        TransformEnum[TransformEnum["Custom"] = 'Custom'] = "Custom";
        TransformEnum[TransformEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TransformEnum = TextFrameFormat.TransformEnum || (TextFrameFormat.TransformEnum = {}));
    let WrapTextEnum;
    (function (WrapTextEnum) {
        WrapTextEnum[WrapTextEnum["False"] = 'False'] = "False";
        WrapTextEnum[WrapTextEnum["True"] = 'True'] = "True";
        WrapTextEnum[WrapTextEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(WrapTextEnum = TextFrameFormat.WrapTextEnum || (TextFrameFormat.WrapTextEnum = {}));
    let AnchoringTypeEnum;
    (function (AnchoringTypeEnum) {
        AnchoringTypeEnum[AnchoringTypeEnum["Top"] = 'Top'] = "Top";
        AnchoringTypeEnum[AnchoringTypeEnum["Center"] = 'Center'] = "Center";
        AnchoringTypeEnum[AnchoringTypeEnum["Bottom"] = 'Bottom'] = "Bottom";
        AnchoringTypeEnum[AnchoringTypeEnum["Justified"] = 'Justified'] = "Justified";
        AnchoringTypeEnum[AnchoringTypeEnum["Distributed"] = 'Distributed'] = "Distributed";
        AnchoringTypeEnum[AnchoringTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(AnchoringTypeEnum = TextFrameFormat.AnchoringTypeEnum || (TextFrameFormat.AnchoringTypeEnum = {}));
    let CenterTextEnum;
    (function (CenterTextEnum) {
        CenterTextEnum[CenterTextEnum["False"] = 'False'] = "False";
        CenterTextEnum[CenterTextEnum["True"] = 'True'] = "True";
        CenterTextEnum[CenterTextEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(CenterTextEnum = TextFrameFormat.CenterTextEnum || (TextFrameFormat.CenterTextEnum = {}));
    let TextVerticalTypeEnum;
    (function (TextVerticalTypeEnum) {
        TextVerticalTypeEnum[TextVerticalTypeEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        TextVerticalTypeEnum[TextVerticalTypeEnum["Vertical"] = 'Vertical'] = "Vertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["Vertical270"] = 'Vertical270'] = "Vertical270";
        TextVerticalTypeEnum[TextVerticalTypeEnum["WordArtVertical"] = 'WordArtVertical'] = "WordArtVertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["EastAsianVertical"] = 'EastAsianVertical'] = "EastAsianVertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["MongolianVertical"] = 'MongolianVertical'] = "MongolianVertical";
        TextVerticalTypeEnum[TextVerticalTypeEnum["WordArtVerticalRightToLeft"] = 'WordArtVerticalRightToLeft'] = "WordArtVerticalRightToLeft";
        TextVerticalTypeEnum[TextVerticalTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(TextVerticalTypeEnum = TextFrameFormat.TextVerticalTypeEnum || (TextFrameFormat.TextVerticalTypeEnum = {}));
    let AutofitTypeEnum;
    (function (AutofitTypeEnum) {
        AutofitTypeEnum[AutofitTypeEnum["None"] = 'None'] = "None";
        AutofitTypeEnum[AutofitTypeEnum["Normal"] = 'Normal'] = "Normal";
        AutofitTypeEnum[AutofitTypeEnum["Shape"] = 'Shape'] = "Shape";
        AutofitTypeEnum[AutofitTypeEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(AutofitTypeEnum = TextFrameFormat.AutofitTypeEnum || (TextFrameFormat.AutofitTypeEnum = {}));
})(TextFrameFormat = exports.TextFrameFormat || (exports.TextFrameFormat = {}));
/**
 * Represents text item, referenced by TextItems
 */
class TextItem {
}
exports.TextItem = TextItem;
/**
 * Represents text of resource
 */
class TextItems extends ResourceBase {
    constructor() {
        super();
    }
}
exports.TextItems = TextItems;
/**
 * Represents Slide's theme
 */
class Theme extends ResourceBase {
    constructor() {
        super();
    }
}
exports.Theme = Theme;
/**
 * ThreeDFormat
 */
class ThreeDFormat {
}
exports.ThreeDFormat = ThreeDFormat;
(function (ThreeDFormat) {
    let MaterialEnum;
    (function (MaterialEnum) {
        MaterialEnum[MaterialEnum["Clear"] = 'Clear'] = "Clear";
        MaterialEnum[MaterialEnum["DkEdge"] = 'DkEdge'] = "DkEdge";
        MaterialEnum[MaterialEnum["Flat"] = 'Flat'] = "Flat";
        MaterialEnum[MaterialEnum["LegacyMatte"] = 'LegacyMatte'] = "LegacyMatte";
        MaterialEnum[MaterialEnum["LegacyMetal"] = 'LegacyMetal'] = "LegacyMetal";
        MaterialEnum[MaterialEnum["LegacyPlastic"] = 'LegacyPlastic'] = "LegacyPlastic";
        MaterialEnum[MaterialEnum["LegacyWireframe"] = 'LegacyWireframe'] = "LegacyWireframe";
        MaterialEnum[MaterialEnum["Matte"] = 'Matte'] = "Matte";
        MaterialEnum[MaterialEnum["Metal"] = 'Metal'] = "Metal";
        MaterialEnum[MaterialEnum["Plastic"] = 'Plastic'] = "Plastic";
        MaterialEnum[MaterialEnum["Powder"] = 'Powder'] = "Powder";
        MaterialEnum[MaterialEnum["SoftEdge"] = 'SoftEdge'] = "SoftEdge";
        MaterialEnum[MaterialEnum["Softmetal"] = 'Softmetal'] = "Softmetal";
        MaterialEnum[MaterialEnum["TranslucentPowder"] = 'TranslucentPowder'] = "TranslucentPowder";
        MaterialEnum[MaterialEnum["WarmMatte"] = 'WarmMatte'] = "WarmMatte";
        MaterialEnum[MaterialEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(MaterialEnum = ThreeDFormat.MaterialEnum || (ThreeDFormat.MaterialEnum = {}));
})(ThreeDFormat = exports.ThreeDFormat || (exports.ThreeDFormat = {}));
/**
 * Provides options that control how a presentation is saved in TIFF format.
 */
class TiffExportOptions extends ImageExportOptionsBase {
    constructor() {
        super();
        this.format = 'tiff';
    }
}
exports.TiffExportOptions = TiffExportOptions;
(function (TiffExportOptions) {
    let CompressionEnum;
    (function (CompressionEnum) {
        CompressionEnum[CompressionEnum["Default"] = 'Default'] = "Default";
        CompressionEnum[CompressionEnum["None"] = 'None'] = "None";
        CompressionEnum[CompressionEnum["CCITT3"] = 'CCITT3'] = "CCITT3";
        CompressionEnum[CompressionEnum["CCITT4"] = 'CCITT4'] = "CCITT4";
        CompressionEnum[CompressionEnum["LZW"] = 'LZW'] = "LZW";
        CompressionEnum[CompressionEnum["RLE"] = 'RLE'] = "RLE";
    })(CompressionEnum = TiffExportOptions.CompressionEnum || (TiffExportOptions.CompressionEnum = {}));
    let PixelFormatEnum;
    (function (PixelFormatEnum) {
        PixelFormatEnum[PixelFormatEnum["Format1bppIndexed"] = 'Format1bppIndexed'] = "Format1bppIndexed";
        PixelFormatEnum[PixelFormatEnum["Format4bppIndexed"] = 'Format4bppIndexed'] = "Format4bppIndexed";
        PixelFormatEnum[PixelFormatEnum["Format8bppIndexed"] = 'Format8bppIndexed'] = "Format8bppIndexed";
        PixelFormatEnum[PixelFormatEnum["Format24bppRgb"] = 'Format24bppRgb'] = "Format24bppRgb";
        PixelFormatEnum[PixelFormatEnum["Format32bppArgb"] = 'Format32bppArgb'] = "Format32bppArgb";
    })(PixelFormatEnum = TiffExportOptions.PixelFormatEnum || (TiffExportOptions.PixelFormatEnum = {}));
    let BwConversionModeEnum;
    (function (BwConversionModeEnum) {
        BwConversionModeEnum[BwConversionModeEnum["Default"] = 'Default'] = "Default";
        BwConversionModeEnum[BwConversionModeEnum["Dithering"] = 'Dithering'] = "Dithering";
        BwConversionModeEnum[BwConversionModeEnum["DitheringFloydSteinberg"] = 'DitheringFloydSteinberg'] = "DitheringFloydSteinberg";
        BwConversionModeEnum[BwConversionModeEnum["Auto"] = 'Auto'] = "Auto";
        BwConversionModeEnum[BwConversionModeEnum["AutoOtsu"] = 'AutoOtsu'] = "AutoOtsu";
        BwConversionModeEnum[BwConversionModeEnum["Threshold25"] = 'Threshold25'] = "Threshold25";
        BwConversionModeEnum[BwConversionModeEnum["Threshold50"] = 'Threshold50'] = "Threshold50";
        BwConversionModeEnum[BwConversionModeEnum["Threshold75"] = 'Threshold75'] = "Threshold75";
    })(BwConversionModeEnum = TiffExportOptions.BwConversionModeEnum || (TiffExportOptions.BwConversionModeEnum = {}));
})(TiffExportOptions = exports.TiffExportOptions || (exports.TiffExportOptions = {}));
/**
 * Represents a Tint effect.
 */
class TintEffect extends ImageTransformEffect {
    constructor() {
        super();
        this.type = TintEffect.TypeEnum.Tint;
    }
}
exports.TintEffect = TintEffect;
/**
 * Update background task.
 */
class UpdateBackground extends Task {
    constructor() {
        super();
        this.type = UpdateBackground.TypeEnum.UpdateBackground;
    }
}
exports.UpdateBackground = UpdateBackground;
/**
 * Update shape task.
 */
class UpdateShape extends Task {
    constructor() {
        super();
        this.type = UpdateShape.TypeEnum.UpdateShape;
    }
}
exports.UpdateShape = UpdateShape;
/**
 * Represents VBA module.
 */
class VbaModule extends ResourceBase {
    constructor() {
        super();
    }
}
exports.VbaModule = VbaModule;
/**
 * VBA project
 */
class VbaProject extends ResourceBase {
    constructor() {
        super();
    }
}
exports.VbaProject = VbaProject;
/**
 * VBA reference
 */
class VbaReference {
}
exports.VbaReference = VbaReference;
/**
 * Provides options that control how a presentation is saved in an video format.
 */
class VideoExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'mpeg4';
    }
}
exports.VideoExportOptions = VideoExportOptions;
(function (VideoExportOptions) {
    let TransitionTypeEnum;
    (function (TransitionTypeEnum) {
        TransitionTypeEnum[TransitionTypeEnum["None"] = 'None'] = "None";
        TransitionTypeEnum[TransitionTypeEnum["Fade"] = 'Fade'] = "Fade";
        TransitionTypeEnum[TransitionTypeEnum["Distance"] = 'Distance'] = "Distance";
        TransitionTypeEnum[TransitionTypeEnum["Slidedown"] = 'Slidedown'] = "Slidedown";
        TransitionTypeEnum[TransitionTypeEnum["Slideright"] = 'Slideright'] = "Slideright";
        TransitionTypeEnum[TransitionTypeEnum["Slideleft"] = 'Slideleft'] = "Slideleft";
        TransitionTypeEnum[TransitionTypeEnum["Slideup"] = 'Slideup'] = "Slideup";
        TransitionTypeEnum[TransitionTypeEnum["Smoothleft"] = 'Smoothleft'] = "Smoothleft";
        TransitionTypeEnum[TransitionTypeEnum["Smoothright"] = 'Smoothright'] = "Smoothright";
        TransitionTypeEnum[TransitionTypeEnum["Smoothup"] = 'Smoothup'] = "Smoothup";
        TransitionTypeEnum[TransitionTypeEnum["Smoothdown"] = 'Smoothdown'] = "Smoothdown";
        TransitionTypeEnum[TransitionTypeEnum["Rectcrop"] = 'Rectcrop'] = "Rectcrop";
        TransitionTypeEnum[TransitionTypeEnum["Circlecrop"] = 'Circlecrop'] = "Circlecrop";
        TransitionTypeEnum[TransitionTypeEnum["Circleclose"] = 'Circleclose'] = "Circleclose";
        TransitionTypeEnum[TransitionTypeEnum["Circleopen"] = 'Circleopen'] = "Circleopen";
        TransitionTypeEnum[TransitionTypeEnum["Horzclose"] = 'Horzclose'] = "Horzclose";
        TransitionTypeEnum[TransitionTypeEnum["Horzopen"] = 'Horzopen'] = "Horzopen";
        TransitionTypeEnum[TransitionTypeEnum["Vertclose"] = 'Vertclose'] = "Vertclose";
        TransitionTypeEnum[TransitionTypeEnum["Vertopen"] = 'Vertopen'] = "Vertopen";
        TransitionTypeEnum[TransitionTypeEnum["Diagbl"] = 'Diagbl'] = "Diagbl";
        TransitionTypeEnum[TransitionTypeEnum["Diagbr"] = 'Diagbr'] = "Diagbr";
        TransitionTypeEnum[TransitionTypeEnum["Diagtl"] = 'Diagtl'] = "Diagtl";
        TransitionTypeEnum[TransitionTypeEnum["Diagtr"] = 'Diagtr'] = "Diagtr";
        TransitionTypeEnum[TransitionTypeEnum["Hlslice"] = 'Hlslice'] = "Hlslice";
        TransitionTypeEnum[TransitionTypeEnum["Hrslice"] = 'Hrslice'] = "Hrslice";
        TransitionTypeEnum[TransitionTypeEnum["Vuslice"] = 'Vuslice'] = "Vuslice";
        TransitionTypeEnum[TransitionTypeEnum["Vdslice"] = 'Vdslice'] = "Vdslice";
        TransitionTypeEnum[TransitionTypeEnum["Dissolve"] = 'Dissolve'] = "Dissolve";
        TransitionTypeEnum[TransitionTypeEnum["Pixelize"] = 'Pixelize'] = "Pixelize";
        TransitionTypeEnum[TransitionTypeEnum["Radial"] = 'Radial'] = "Radial";
    })(TransitionTypeEnum = VideoExportOptions.TransitionTypeEnum || (VideoExportOptions.TransitionTypeEnum = {}));
    let VideoResolutionTypeEnum;
    (function (VideoResolutionTypeEnum) {
        VideoResolutionTypeEnum[VideoResolutionTypeEnum["FullHD"] = 'FullHD'] = "FullHD";
        VideoResolutionTypeEnum[VideoResolutionTypeEnum["SD"] = 'SD'] = "SD";
        VideoResolutionTypeEnum[VideoResolutionTypeEnum["HD"] = 'HD'] = "HD";
        VideoResolutionTypeEnum[VideoResolutionTypeEnum["QHD"] = 'QHD'] = "QHD";
    })(VideoResolutionTypeEnum = VideoExportOptions.VideoResolutionTypeEnum || (VideoExportOptions.VideoResolutionTypeEnum = {}));
})(VideoExportOptions = exports.VideoExportOptions || (exports.VideoExportOptions = {}));
/**
 * Represents VideoFrame resource.
 */
class VideoFrame extends GeometryShape {
    constructor() {
        super();
        this.type = VideoFrame.TypeEnum.VideoFrame;
    }
}
exports.VideoFrame = VideoFrame;
(function (VideoFrame) {
    let PlayModeEnum;
    (function (PlayModeEnum) {
        PlayModeEnum[PlayModeEnum["Auto"] = 'Auto'] = "Auto";
        PlayModeEnum[PlayModeEnum["OnClick"] = 'OnClick'] = "OnClick";
        PlayModeEnum[PlayModeEnum["AllSlides"] = 'AllSlides'] = "AllSlides";
        PlayModeEnum[PlayModeEnum["InClickSequence"] = 'InClickSequence'] = "InClickSequence";
        PlayModeEnum[PlayModeEnum["Mixed"] = 'Mixed'] = "Mixed";
    })(PlayModeEnum = VideoFrame.PlayModeEnum || (VideoFrame.PlayModeEnum = {}));
    let VolumeEnum;
    (function (VolumeEnum) {
        VolumeEnum[VolumeEnum["Mute"] = 'Mute'] = "Mute";
        VolumeEnum[VolumeEnum["Low"] = 'Low'] = "Low";
        VolumeEnum[VolumeEnum["Medium"] = 'Medium'] = "Medium";
        VolumeEnum[VolumeEnum["Loud"] = 'Loud'] = "Loud";
        VolumeEnum[VolumeEnum["Mixed"] = 'Mixed'] = "Mixed";
    })(VolumeEnum = VideoFrame.VolumeEnum || (VideoFrame.VolumeEnum = {}));
})(VideoFrame = exports.VideoFrame || (exports.VideoFrame = {}));
/**
 * Slides document properties.
 */
class ViewProperties extends ResourceBase {
    constructor() {
        super();
    }
}
exports.ViewProperties = ViewProperties;
(function (ViewProperties) {
    let LastViewEnum;
    (function (LastViewEnum) {
        LastViewEnum[LastViewEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
        LastViewEnum[LastViewEnum["SlideView"] = 'SlideView'] = "SlideView";
        LastViewEnum[LastViewEnum["SlideMasterView"] = 'SlideMasterView'] = "SlideMasterView";
        LastViewEnum[LastViewEnum["NotesView"] = 'NotesView'] = "NotesView";
        LastViewEnum[LastViewEnum["HandoutView"] = 'HandoutView'] = "HandoutView";
        LastViewEnum[LastViewEnum["NotesMasterView"] = 'NotesMasterView'] = "NotesMasterView";
        LastViewEnum[LastViewEnum["OutlineView"] = 'OutlineView'] = "OutlineView";
        LastViewEnum[LastViewEnum["SlideSorterView"] = 'SlideSorterView'] = "SlideSorterView";
        LastViewEnum[LastViewEnum["SlideThumbnailView"] = 'SlideThumbnailView'] = "SlideThumbnailView";
    })(LastViewEnum = ViewProperties.LastViewEnum || (ViewProperties.LastViewEnum = {}));
    let HorizontalBarStateEnum;
    (function (HorizontalBarStateEnum) {
        HorizontalBarStateEnum[HorizontalBarStateEnum["Minimized"] = 'Minimized'] = "Minimized";
        HorizontalBarStateEnum[HorizontalBarStateEnum["Restored"] = 'Restored'] = "Restored";
        HorizontalBarStateEnum[HorizontalBarStateEnum["Maximized"] = 'Maximized'] = "Maximized";
    })(HorizontalBarStateEnum = ViewProperties.HorizontalBarStateEnum || (ViewProperties.HorizontalBarStateEnum = {}));
    let VerticalBarStateEnum;
    (function (VerticalBarStateEnum) {
        VerticalBarStateEnum[VerticalBarStateEnum["Minimized"] = 'Minimized'] = "Minimized";
        VerticalBarStateEnum[VerticalBarStateEnum["Restored"] = 'Restored'] = "Restored";
        VerticalBarStateEnum[VerticalBarStateEnum["Maximized"] = 'Maximized'] = "Maximized";
    })(VerticalBarStateEnum = ViewProperties.VerticalBarStateEnum || (ViewProperties.VerticalBarStateEnum = {}));
    let ShowCommentsEnum;
    (function (ShowCommentsEnum) {
        ShowCommentsEnum[ShowCommentsEnum["False"] = 'False'] = "False";
        ShowCommentsEnum[ShowCommentsEnum["True"] = 'True'] = "True";
        ShowCommentsEnum[ShowCommentsEnum["NotDefined"] = 'NotDefined'] = "NotDefined";
    })(ShowCommentsEnum = ViewProperties.ShowCommentsEnum || (ViewProperties.ShowCommentsEnum = {}));
})(ViewProperties = exports.ViewProperties || (exports.ViewProperties = {}));
/**
 * Represents Excel spreadsheet data source.
 */
class Workbook extends DataSource {
    constructor() {
        super();
        this.type = Workbook.TypeEnum.Workbook;
    }
}
exports.Workbook = Workbook;
/**
 * Provides options that control how a presentation is saved in XAML format.
 */
class XamlExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'xaml';
    }
}
exports.XamlExportOptions = XamlExportOptions;
/**
 * Provides options that control how a presentation is saved in XPS format.
 */
class XpsExportOptions extends ExportOptions {
    constructor() {
        super();
        this.format = 'xps';
    }
}
exports.XpsExportOptions = XpsExportOptions;
/**
 * Zoom frame.
 */
class ZoomFrame extends ZoomObject {
    constructor() {
        super();
        this.type = ZoomFrame.TypeEnum.ZoomFrame;
    }
}
exports.ZoomFrame = ZoomFrame;
